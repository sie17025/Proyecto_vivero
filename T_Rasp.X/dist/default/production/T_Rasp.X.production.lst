

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon May 11 19:01:36 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 2.10
    32                           ; Generated 31/07/2019 GMT
    33                           ; 
    34                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F887 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  0087                     	;# 
   104  0088                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  008F                     	;# 
   110  0090                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0094                     	;# 
   117  0095                     	;# 
   118  0096                     	;# 
   119  0097                     	;# 
   120  0098                     	;# 
   121  0099                     	;# 
   122  009A                     	;# 
   123  009B                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  0105                     	;# 
   129  0107                     	;# 
   130  0108                     	;# 
   131  0109                     	;# 
   132  010C                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  0185                     	;# 
   138  0187                     	;# 
   139  0188                     	;# 
   140  0189                     	;# 
   141  018C                     	;# 
   142  018D                     	;# 
   143  0000                     	;# 
   144  0001                     	;# 
   145  0002                     	;# 
   146  0003                     	;# 
   147  0004                     	;# 
   148  0005                     	;# 
   149  0006                     	;# 
   150  0007                     	;# 
   151  0008                     	;# 
   152  0009                     	;# 
   153  000A                     	;# 
   154  000B                     	;# 
   155  000C                     	;# 
   156  000D                     	;# 
   157  000E                     	;# 
   158  000E                     	;# 
   159  000F                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0013                     	;# 
   164  0014                     	;# 
   165  0015                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0017                     	;# 
   169  0018                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001B                     	;# 
   173  001B                     	;# 
   174  001C                     	;# 
   175  001D                     	;# 
   176  001E                     	;# 
   177  001F                     	;# 
   178  0081                     	;# 
   179  0085                     	;# 
   180  0086                     	;# 
   181  0087                     	;# 
   182  0088                     	;# 
   183  0089                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  008F                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  009F                     	;# 
   206  0105                     	;# 
   207  0107                     	;# 
   208  0108                     	;# 
   209  0109                     	;# 
   210  010C                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  010F                     	;# 
   215  0185                     	;# 
   216  0187                     	;# 
   217  0188                     	;# 
   218  0189                     	;# 
   219  018C                     	;# 
   220  018D                     	;# 
   221  0000                     	;# 
   222  0001                     	;# 
   223  0002                     	;# 
   224  0003                     	;# 
   225  0004                     	;# 
   226  0005                     	;# 
   227  0006                     	;# 
   228  0007                     	;# 
   229  0008                     	;# 
   230  0009                     	;# 
   231  000A                     	;# 
   232  000B                     	;# 
   233  000C                     	;# 
   234  000D                     	;# 
   235  000E                     	;# 
   236  000E                     	;# 
   237  000F                     	;# 
   238  0010                     	;# 
   239  0011                     	;# 
   240  0012                     	;# 
   241  0013                     	;# 
   242  0014                     	;# 
   243  0015                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001D                     	;# 
   254  001E                     	;# 
   255  001F                     	;# 
   256  0081                     	;# 
   257  0085                     	;# 
   258  0086                     	;# 
   259  0087                     	;# 
   260  0088                     	;# 
   261  0089                     	;# 
   262  008C                     	;# 
   263  008D                     	;# 
   264  008E                     	;# 
   265  008F                     	;# 
   266  0090                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0094                     	;# 
   273  0095                     	;# 
   274  0096                     	;# 
   275  0097                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009A                     	;# 
   279  009B                     	;# 
   280  009C                     	;# 
   281  009D                     	;# 
   282  009E                     	;# 
   283  009F                     	;# 
   284  0105                     	;# 
   285  0107                     	;# 
   286  0108                     	;# 
   287  0109                     	;# 
   288  010C                     	;# 
   289  010C                     	;# 
   290  010D                     	;# 
   291  010E                     	;# 
   292  010F                     	;# 
   293  0185                     	;# 
   294  0187                     	;# 
   295  0188                     	;# 
   296  0189                     	;# 
   297  018C                     	;# 
   298  018D                     	;# 
   299  0000                     	;# 
   300  0001                     	;# 
   301  0002                     	;# 
   302  0003                     	;# 
   303  0004                     	;# 
   304  0005                     	;# 
   305  0006                     	;# 
   306  0007                     	;# 
   307  0008                     	;# 
   308  0009                     	;# 
   309  000A                     	;# 
   310  000B                     	;# 
   311  000C                     	;# 
   312  000D                     	;# 
   313  000E                     	;# 
   314  000E                     	;# 
   315  000F                     	;# 
   316  0010                     	;# 
   317  0011                     	;# 
   318  0012                     	;# 
   319  0013                     	;# 
   320  0014                     	;# 
   321  0015                     	;# 
   322  0015                     	;# 
   323  0016                     	;# 
   324  0017                     	;# 
   325  0018                     	;# 
   326  0019                     	;# 
   327  001A                     	;# 
   328  001B                     	;# 
   329  001B                     	;# 
   330  001C                     	;# 
   331  001D                     	;# 
   332  001E                     	;# 
   333  001F                     	;# 
   334  0081                     	;# 
   335  0085                     	;# 
   336  0086                     	;# 
   337  0087                     	;# 
   338  0088                     	;# 
   339  0089                     	;# 
   340  008C                     	;# 
   341  008D                     	;# 
   342  008E                     	;# 
   343  008F                     	;# 
   344  0090                     	;# 
   345  0091                     	;# 
   346  0092                     	;# 
   347  0093                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0094                     	;# 
   351  0095                     	;# 
   352  0096                     	;# 
   353  0097                     	;# 
   354  0098                     	;# 
   355  0099                     	;# 
   356  009A                     	;# 
   357  009B                     	;# 
   358  009C                     	;# 
   359  009D                     	;# 
   360  009E                     	;# 
   361  009F                     	;# 
   362  0105                     	;# 
   363  0107                     	;# 
   364  0108                     	;# 
   365  0109                     	;# 
   366  010C                     	;# 
   367  010C                     	;# 
   368  010D                     	;# 
   369  010E                     	;# 
   370  010F                     	;# 
   371  0185                     	;# 
   372  0187                     	;# 
   373  0188                     	;# 
   374  0189                     	;# 
   375  018C                     	;# 
   376  018D                     	;# 
   377                           
   378                           	psect	strings
   379  0475                     __pstrings:	
   380  0475                     stringtab:	
   381  0475                     __stringtab:	
   382                           
   383                           ;	String table - string pointers are 1 byte each
   384  0475  1BFF               	btfsc	btemp+1,7
   385  0476  2C7F               	ljmp	stringcode
   386  0477  1383               	bcf	3,7
   387  0478  187F               	btfsc	btemp+1,0
   388  0479  1783               	bsf	3,7
   389  047A  0800               	movf	0,w
   390  047B  0A84               	incf	4,f
   391  047C  1903               	skipnz
   392  047D  0AFF               	incf	btemp+1,f
   393  047E  0008               	return
   394  047F                     stringcode:	
   395  047F                     stringdir:	
   396  047F  3004               	movlw	high stringdir
   397  0480  008A               	movwf	10
   398  0481  0804               	movf	4,w
   399  0482  0A84               	incf	4,f
   400  0483  0782               	addwf	2,f
   401  0484                     __stringbase:	
   402  0484  3400               	retlw	0
   403  0485                     __end_of__stringtab:	
   404  0485                     _dpowers:	
   405  0485  3401               	retlw	1
   406  0486  3400               	retlw	0
   407  0487  340A               	retlw	10
   408  0488  3400               	retlw	0
   409  0489  3464               	retlw	100
   410  048A  3400               	retlw	0
   411  048B  34E8               	retlw	232
   412  048C  3403               	retlw	3
   413  048D  3410               	retlw	16
   414  048E  3427               	retlw	39
   415  048F                     __end_of_dpowers:	
   416  0013                     _SSPBUF	set	19
   417  0014                     _SSPCON	set	20
   418  000B                     _INTCONbits	set	11
   419  0018                     _RCSTAbits	set	24
   420  0008                     _PORTD	set	8
   421  0006                     _PORTB	set	6
   422  0005                     _PORTA	set	5
   423  001A                     _RCREG	set	26
   424  0019                     _TXREG	set	25
   425  000C                     _PIR1bits	set	12
   426  0041                     _RD1	set	65
   427  0040                     _RD0	set	64
   428  0065                     _RCIF	set	101
   429  0063                     _SSPIF	set	99
   430  0094                     _SSPSTATbits	set	148
   431  0094                     _SSPSTAT	set	148
   432  0085                     _TRISAbits	set	133
   433  008C                     _PIE1bits	set	140
   434  009A                     _SPBRGH	set	154
   435  0099                     _SPBRG	set	153
   436  0088                     _TRISD	set	136
   437  0087                     _TRISC	set	135
   438  0086                     _TRISB	set	134
   439  0085                     _TRISA	set	133
   440  0098                     _TXSTAbits	set	152
   441  0187                     _BAUDCTLbits	set	391
   442  0189                     _ANSELH	set	393
   443  0188                     _ANSEL	set	392
   444  048F                     STR_1:	
   445  048F  3420               	retlw	32	;' '
   446  0490  3420               	retlw	32	;' '
   447  0491  3420               	retlw	32	;' '
   448  0492  3400               	retlw	0
   449  0493                     STR_8:	
   450  0493  3453               	retlw	83	;'S'
   451  0494  344F               	retlw	79	;'O'
   452  0495  344C               	retlw	76	;'L'
   453  0496  3400               	retlw	0
   454  0497                     STR_6:	
   455  0497  3454               	retlw	84	;'T'
   456  0498  3445               	retlw	69	;'E'
   457  0499  344D               	retlw	77	;'M'
   458  049A  3400               	retlw	0
   459  049B                     STR_10:	
   460  049B  3425               	retlw	37	;'%'
   461  049C  3464               	retlw	100	;'d'
   462  049D  3400               	retlw	0
   463  049E                     STR_9:	
   464  049E  3443               	retlw	67	;'C'
   465  049F  3441               	retlw	65	;'A'
   466  04A0  3400               	retlw	0
   467  04A1                     STR_7:	
   468  04A1  3448               	retlw	72	;'H'
   469  04A2  3455               	retlw	85	;'U'
   470  04A3  3400               	retlw	0
   471  04A4                     STR_5:	
   472  04A4  3450               	retlw	80	;'P'
   473  04A5  3400               	retlw	0
   474  048F                     
   475                           ; #config settings
   476  0000                     
   477                           	psect	cinit
   478  000F                     start_initialization:	
   479  000F                     __initialization:	
   480                           
   481                           ; Clear objects allocated to COMMON
   482  000F  01F5               	clrf	__pbssCOMMON& (0+127)
   483  0010  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   484  0011  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   485  0012  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   486                           
   487                           ; Clear objects allocated to BANK0
   488  0013  1383               	bcf	3,7	;select IRP bank0
   489  0014  3045               	movlw	low __pbssBANK0
   490  0015  0084               	movwf	4
   491  0016  3057               	movlw	low (__pbssBANK0+18)
   492  0017  120A  118A  2528  120A  118A  	fcall	clear_ram0
   493  001C                     end_of_initialization:	
   494                           ;End of C runtime variable initialization code
   495                           
   496  001C                     __end_of__initialization:	
   497  001C  0183               	clrf	3
   498  001D  120A  118A  2820   	ljmp	_main	;jump to C main() function
   499                           
   500                           	psect	bssCOMMON
   501  0075                     __pbssCOMMON:	
   502  0075                     _escoger:	
   503  0075                     	ds	2
   504  0077                     _z:	
   505  0077                     	ds	1
   506  0078                     _cursor:	
   507  0078                     	ds	1
   508                           
   509                           	psect	bssBANK0
   510  0045                     __pbssBANK0:	
   511  0045                     _hum:	
   512  0045                     	ds	2
   513  0047                     _luz:	
   514  0047                     	ds	2
   515  0049                     _prox:	
   516  0049                     	ds	2
   517  004B                     _caudal:	
   518  004B                     	ds	2
   519  004D                     _temp:	
   520  004D                     	ds	2
   521  004F                     _cont:	
   522  004F                     	ds	2
   523  0051                     _Pot2:	
   524  0051                     	ds	2
   525  0053                     _Pot1:	
   526  0053                     	ds	2
   527  0055                     _var1:	
   528  0055                     	ds	2
   529                           
   530                           	psect	clrtext
   531  0528                     clear_ram0:	
   532                           ;	Called with FSR containing the base address, and
   533                           ;	W with the last address+1
   534                           
   535  0528  0064               	clrwdt	;clear the watchdog before getting into this loop
   536  0529                     clrloop0:	
   537  0529  0180               	clrf	0	;clear RAM location pointed to by FSR
   538  052A  0A84               	incf	4,f	;increment pointer
   539  052B  0604               	xorwf	4,w	;XOR with final address
   540  052C  1903               	btfsc	3,2	;have we reached the end yet?
   541  052D  3400               	retlw	0	;all done for this memory range, return
   542  052E  0604               	xorwf	4,w	;XOR again to restore value
   543  052F  2D29               	goto	clrloop0	;do the next byte
   544                           
   545                           	psect	cstackCOMMON
   546  0070                     __pcstackCOMMON:	
   547  0070                     ?_spiRead:	
   548  0070                     ??_spiRead:	
   549                           ; 1 bytes @ 0x0
   550                           
   551  0070                     ?_spiWrite:	
   552                           ; 1 bytes @ 0x0
   553                           
   554  0070                     ??_spiWrite:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0070                     ?_setup:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0070                     ?_writeIntLCD:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0070                     ?_initLCD:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0070                     ?_clcLCD:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0070                     ?_cmdLCD:	
   570                           ; 1 bytes @ 0x0
   571                           
   572  0070                     ?_writeCharLCD:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0070                     ?_isr:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0070                     ?_main:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0070                     ?_spiReceiveWait:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0070                     ??_spiReceiveWait:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0070                     spiWrite@dat:	
   588                           ; 1 bytes @ 0x0
   589                           
   590                           
   591                           ; 1 bytes @ 0x0
   592  0070                     	ds	1
   593  0071                     ??_isr:	
   594                           
   595                           ; 1 bytes @ 0x1
   596  0071                     	ds	4
   597  0075                     ??_spiInit:	
   598  0075                     ??_clcLCD:	
   599                           ; 1 bytes @ 0x5
   600                           
   601                           
   602                           	psect	cstackBANK0
   603  0020                     __pcstackBANK0:	
   604                           ; 1 bytes @ 0x5
   605                           
   606  0020                     ?_spiInit:	
   607  0020                     ??_cmdLCD:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0020                     ??_writeCharLCD:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0020                     ?___lwdiv:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0020                     spiInit@sDataSample:	
   617                           ; 2 bytes @ 0x0
   618                           
   619  0020                     ___lwdiv@divisor:	
   620                           ; 1 bytes @ 0x0
   621                           
   622                           
   623                           ; 2 bytes @ 0x0
   624  0020                     	ds	1
   625  0021                     writeCharLCD@character:	
   626  0021                     spiInit@sClockIdle:	
   627                           ; 1 bytes @ 0x1
   628                           
   629                           
   630                           ; 1 bytes @ 0x1
   631  0021                     	ds	1
   632  0022                     ?_writeStrLCD:	
   633  0022                     cmdLCD@cmd:	
   634                           ; 1 bytes @ 0x2
   635                           
   636  0022                     spiInit@sTransmitEdge:	
   637                           ; 1 bytes @ 0x2
   638                           
   639  0022                     writeStrLCD@string:	
   640                           ; 1 bytes @ 0x2
   641                           
   642  0022                     ___lwdiv@dividend:	
   643                           ; 2 bytes @ 0x2
   644                           
   645                           
   646                           ; 2 bytes @ 0x2
   647  0022                     	ds	1
   648  0023                     ?_setCursorLCD:	
   649  0023                     ??_initLCD:	
   650                           ; 1 bytes @ 0x3
   651                           
   652  0023                     setCursorLCD@x:	
   653                           ; 1 bytes @ 0x3
   654                           
   655  0023                     spiInit@sType:	
   656                           ; 1 bytes @ 0x3
   657                           
   658                           
   659                           ; 1 bytes @ 0x3
   660  0023                     	ds	1
   661  0024                     ??_setCursorLCD:	
   662  0024                     ??_writeStrLCD:	
   663                           ; 1 bytes @ 0x4
   664                           
   665  0024                     ??___lwdiv:	
   666                           ; 1 bytes @ 0x4
   667                           
   668                           
   669                           ; 1 bytes @ 0x4
   670  0024                     	ds	1
   671  0025                     setCursorLCD@y:	
   672  0025                     ___lwdiv@counter:	
   673                           ; 1 bytes @ 0x5
   674                           
   675                           
   676                           ; 1 bytes @ 0x5
   677  0025                     	ds	1
   678  0026                     ___lwdiv@quotient:	
   679                           
   680                           ; 2 bytes @ 0x6
   681  0026                     	ds	1
   682  0027                     writeStrLCD@cont:	
   683                           
   684                           ; 2 bytes @ 0x7
   685  0027                     	ds	1
   686  0028                     ?___lwmod:	
   687  0028                     ___lwmod@divisor:	
   688                           ; 2 bytes @ 0x8
   689                           
   690                           
   691                           ; 2 bytes @ 0x8
   692  0028                     	ds	1
   693  0029                     ??_setup:	
   694                           
   695                           ; 1 bytes @ 0x9
   696  0029                     	ds	1
   697  002A                     ___lwmod@dividend:	
   698                           
   699                           ; 2 bytes @ 0xA
   700  002A                     	ds	2
   701  002C                     ??___lwmod:	
   702                           
   703                           ; 1 bytes @ 0xC
   704  002C                     	ds	1
   705  002D                     ___lwmod@counter:	
   706                           
   707                           ; 1 bytes @ 0xD
   708  002D                     	ds	1
   709  002E                     ?_sprintf:	
   710  002E                     sprintf@f:	
   711                           ; 2 bytes @ 0xE
   712                           
   713                           
   714                           ; 1 bytes @ 0xE
   715  002E                     	ds	3
   716  0031                     ??_sprintf:	
   717                           
   718                           ; 1 bytes @ 0x11
   719  0031                     	ds	3
   720  0034                     sprintf@ap:	
   721                           
   722                           ; 1 bytes @ 0x14
   723  0034                     	ds	1
   724  0035                     sprintf@flag:	
   725                           
   726                           ; 1 bytes @ 0x15
   727  0035                     	ds	1
   728  0036                     sprintf@prec:	
   729                           
   730                           ; 1 bytes @ 0x16
   731  0036                     	ds	1
   732  0037                     sprintf@val:	
   733                           
   734                           ; 2 bytes @ 0x17
   735  0037                     	ds	2
   736  0039                     sprintf@sp:	
   737                           
   738                           ; 1 bytes @ 0x19
   739  0039                     	ds	1
   740  003A                     sprintf@c:	
   741                           
   742                           ; 1 bytes @ 0x1A
   743  003A                     	ds	1
   744  003B                     ??_writeIntLCD:	
   745                           
   746                           ; 1 bytes @ 0x1B
   747  003B                     	ds	3
   748  003E                     writeIntLCD@buffer:	
   749                           
   750                           ; 4 bytes @ 0x1E
   751  003E                     	ds	4
   752  0042                     writeIntLCD@numero:	
   753                           
   754                           ; 1 bytes @ 0x22
   755  0042                     	ds	1
   756  0043                     ??_main:	
   757                           
   758                           ; 1 bytes @ 0x23
   759  0043                     	ds	2
   760                           
   761                           	psect	maintext
   762  0020                     __pmaintext:	
   763 ;;
   764 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   765 ;;
   766 ;; *************** function _main *****************
   767 ;; Defined at:
   768 ;;		line 76 in file "main_rasp.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;		None
   771 ;; Auto vars:     Size  Location     Type
   772 ;;		None
   773 ;; Return value:  Size  Location     Type
   774 ;;                  1    wreg      void 
   775 ;; Registers used:
   776 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   777 ;; Tracked objects:
   778 ;;		On entry : B00/0
   779 ;;		On exit  : 0/0
   780 ;;		Unchanged: 0/0
   781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   782 ;;      Params:         0       0       0       0       0
   783 ;;      Locals:         0       0       0       0       0
   784 ;;      Temps:          0       2       0       0       0
   785 ;;      Totals:         0       2       0       0       0
   786 ;;Total ram usage:        2 bytes
   787 ;; Hardware stack levels required when called:    6
   788 ;; This function calls:
   789 ;;		_setCursorLCD
   790 ;;		_setup
   791 ;;		_writeIntLCD
   792 ;;		_writeStrLCD
   793 ;; This function is called by:
   794 ;;		Startup code after reset
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           
   799                           ;psect for function _main
   800  0020                     _main:	
   801  0020                     l1756:	
   802                           ;incstack = 0
   803                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   804                           
   805                           
   806                           ;main_rasp.c: 77:     setup();
   807  0020  120A  118A  2256  120A  118A  	fcall	_setup
   808  0025                     l1758:	
   809                           
   810                           ;main_rasp.c: 84:         setCursorLCD(2, 1);
   811  0025  1283               	bcf	3,5	;RP0=0, select bank0
   812  0026  1303               	bcf	3,6	;RP1=0, select bank0
   813  0027  01A3               	clrf	setCursorLCD@x
   814  0028  0AA3               	incf	setCursorLCD@x,f
   815  0029  3002               	movlw	2
   816  002A  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
   817  002F                     l1760:	
   818                           
   819                           ;main_rasp.c: 85:         writeStrLCD("   ");
   820  002F  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   821  0030  1283               	bcf	3,5	;RP0=0, select bank0
   822  0031  1303               	bcf	3,6	;RP1=0, select bank0
   823  0032  00A2               	movwf	writeStrLCD@string
   824  0033  3080               	movlw	128
   825  0034  00A3               	movwf	writeStrLCD@string+1
   826  0035  120A  118A  23B8  120A  118A  	fcall	_writeStrLCD
   827                           
   828                           ;main_rasp.c: 86:         setCursorLCD(2, 1);
   829  003A  1283               	bcf	3,5	;RP0=0, select bank0
   830  003B  1303               	bcf	3,6	;RP1=0, select bank0
   831  003C  01A3               	clrf	setCursorLCD@x
   832  003D  0AA3               	incf	setCursorLCD@x,f
   833  003E  3002               	movlw	2
   834  003F  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
   835  0044                     l1762:	
   836                           
   837                           ;main_rasp.c: 87:         writeIntLCD(prox);
   838  0044  1283               	bcf	3,5	;RP0=0, select bank0
   839  0045  1303               	bcf	3,6	;RP1=0, select bank0
   840  0046  0849               	movf	_prox,w
   841  0047  120A  118A  24A6  120A  118A  	fcall	_writeIntLCD
   842  004C                     l1764:	
   843                           
   844                           ;main_rasp.c: 88:         setCursorLCD(2, 9);
   845  004C  3009               	movlw	9
   846  004D  1283               	bcf	3,5	;RP0=0, select bank0
   847  004E  1303               	bcf	3,6	;RP1=0, select bank0
   848  004F  00C3               	movwf	??_main
   849  0050  0843               	movf	??_main,w
   850  0051  00A3               	movwf	setCursorLCD@x
   851  0052  3002               	movlw	2
   852  0053  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
   853                           
   854                           ;main_rasp.c: 89:         writeStrLCD("   ");
   855  0058  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   856  0059  1283               	bcf	3,5	;RP0=0, select bank0
   857  005A  1303               	bcf	3,6	;RP1=0, select bank0
   858  005B  00A2               	movwf	writeStrLCD@string
   859  005C  3080               	movlw	128
   860  005D  00A3               	movwf	writeStrLCD@string+1
   861  005E  120A  118A  23B8  120A  118A  	fcall	_writeStrLCD
   862  0063                     l1766:	
   863                           
   864                           ;main_rasp.c: 90:         setCursorLCD(2, 9);
   865  0063  3009               	movlw	9
   866  0064  1283               	bcf	3,5	;RP0=0, select bank0
   867  0065  1303               	bcf	3,6	;RP1=0, select bank0
   868  0066  00C3               	movwf	??_main
   869  0067  0843               	movf	??_main,w
   870  0068  00A3               	movwf	setCursorLCD@x
   871  0069  3002               	movlw	2
   872  006A  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
   873  006F                     l1768:	
   874                           
   875                           ;main_rasp.c: 91:         writeIntLCD(temp);
   876  006F  1283               	bcf	3,5	;RP0=0, select bank0
   877  0070  1303               	bcf	3,6	;RP1=0, select bank0
   878  0071  084D               	movf	_temp,w
   879  0072  120A  118A  24A6  120A  118A  	fcall	_writeIntLCD
   880                           
   881                           ;main_rasp.c: 93:         setCursorLCD(2, 14);
   882  0077  300E               	movlw	14
   883  0078  1283               	bcf	3,5	;RP0=0, select bank0
   884  0079  1303               	bcf	3,6	;RP1=0, select bank0
   885  007A  00C3               	movwf	??_main
   886  007B  0843               	movf	??_main,w
   887  007C  00A3               	movwf	setCursorLCD@x
   888  007D  3002               	movlw	2
   889  007E  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
   890  0083                     l1770:	
   891                           
   892                           ;main_rasp.c: 94:         writeStrLCD("   ");
   893  0083  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   894  0084  1283               	bcf	3,5	;RP0=0, select bank0
   895  0085  1303               	bcf	3,6	;RP1=0, select bank0
   896  0086  00A2               	movwf	writeStrLCD@string
   897  0087  3080               	movlw	128
   898  0088  00A3               	movwf	writeStrLCD@string+1
   899  0089  120A  118A  23B8  120A  118A  	fcall	_writeStrLCD
   900  008E                     l1772:	
   901                           
   902                           ;main_rasp.c: 95:         setCursorLCD(2, 14);
   903  008E  300E               	movlw	14
   904  008F  1283               	bcf	3,5	;RP0=0, select bank0
   905  0090  1303               	bcf	3,6	;RP1=0, select bank0
   906  0091  00C3               	movwf	??_main
   907  0092  0843               	movf	??_main,w
   908  0093  00A3               	movwf	setCursorLCD@x
   909  0094  3002               	movlw	2
   910  0095  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
   911                           
   912                           ;main_rasp.c: 96:         writeIntLCD(luz);
   913  009A  1283               	bcf	3,5	;RP0=0, select bank0
   914  009B  1303               	bcf	3,6	;RP1=0, select bank0
   915  009C  0847               	movf	_luz,w
   916  009D  120A  118A  24A6  120A  118A  	fcall	_writeIntLCD
   917  00A2                     l1774:	
   918                           
   919                           ;main_rasp.c: 97:         setCursorLCD(2, 4);
   920  00A2  3004               	movlw	4
   921  00A3  1283               	bcf	3,5	;RP0=0, select bank0
   922  00A4  1303               	bcf	3,6	;RP1=0, select bank0
   923  00A5  00C3               	movwf	??_main
   924  00A6  0843               	movf	??_main,w
   925  00A7  00A3               	movwf	setCursorLCD@x
   926  00A8  3002               	movlw	2
   927  00A9  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
   928  00AE                     l1776:	
   929                           
   930                           ;main_rasp.c: 98:         writeStrLCD("   ");
   931  00AE  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   932  00AF  1283               	bcf	3,5	;RP0=0, select bank0
   933  00B0  1303               	bcf	3,6	;RP1=0, select bank0
   934  00B1  00A2               	movwf	writeStrLCD@string
   935  00B2  3080               	movlw	128
   936  00B3  00A3               	movwf	writeStrLCD@string+1
   937  00B4  120A  118A  23B8  120A  118A  	fcall	_writeStrLCD
   938                           
   939                           ;main_rasp.c: 99:         setCursorLCD(2, 4);
   940  00B9  3004               	movlw	4
   941  00BA  1283               	bcf	3,5	;RP0=0, select bank0
   942  00BB  1303               	bcf	3,6	;RP1=0, select bank0
   943  00BC  00C3               	movwf	??_main
   944  00BD  0843               	movf	??_main,w
   945  00BE  00A3               	movwf	setCursorLCD@x
   946  00BF  3002               	movlw	2
   947  00C0  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
   948  00C5                     l1778:	
   949                           
   950                           ;main_rasp.c: 100:         writeIntLCD(hum);
   951  00C5  1283               	bcf	3,5	;RP0=0, select bank0
   952  00C6  1303               	bcf	3,6	;RP1=0, select bank0
   953  00C7  0845               	movf	_hum,w
   954  00C8  120A  118A  24A6  120A  118A  	fcall	_writeIntLCD
   955  00CD                     l109:	
   956                           ;main_rasp.c: 108:         }
   957                           
   958                           
   959                           ;main_rasp.c: 107:         while (TXSTAbits.TRMT == 0) {
   960  00CD  1683               	bsf	3,5	;RP0=1, select bank1
   961  00CE  1303               	bcf	3,6	;RP1=0, select bank1
   962  00CF  1C98               	btfss	24,1	;volatile
   963  00D0  28D2               	goto	u1061
   964  00D1  28D3               	goto	u1060
   965  00D2                     u1061:	
   966  00D2  28CD               	goto	l109
   967  00D3                     u1060:	
   968  00D3                     l1780:	
   969                           
   970                           ;main_rasp.c: 109:         TXREG = 1;
   971  00D3  3001               	movlw	1
   972  00D4  1283               	bcf	3,5	;RP0=0, select bank0
   973  00D5  1303               	bcf	3,6	;RP1=0, select bank0
   974  00D6  0099               	movwf	25	;volatile
   975  00D7                     l112:	
   976                           ;main_rasp.c: 111:         }
   977                           
   978                           
   979                           ;main_rasp.c: 110:         while (!RCIF) {
   980  00D7  1E8C               	btfss	12,5	;volatile
   981  00D8  28DA               	goto	u1071
   982  00D9  28DB               	goto	u1070
   983  00DA                     u1071:	
   984  00DA  28D7               	goto	l112
   985  00DB                     u1070:	
   986  00DB                     l1782:	
   987                           
   988                           ;main_rasp.c: 112:         prox = RCREG;
   989  00DB  081A               	movf	26,w	;volatile
   990  00DC  00C3               	movwf	??_main
   991  00DD  01C4               	clrf	??_main+1
   992  00DE  0843               	movf	??_main,w
   993  00DF  00C9               	movwf	_prox
   994  00E0  0844               	movf	??_main+1,w
   995  00E1  00CA               	movwf	_prox+1
   996                           
   997                           ;main_rasp.c: 113:         _delay((unsigned long)((100)*(4000000/4000.0)));
   998  00E2  3082               	movlw	130
   999  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  1000  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  1001  00E5  00C4               	movwf	??_main+1
  1002  00E6  30DD               	movlw	221
  1003  00E7  00C3               	movwf	??_main
  1004  00E8                     u1177:	
  1005  00E8  0BC3               	decfsz	??_main,f
  1006  00E9  28E8               	goto	u1177
  1007  00EA  0BC4               	decfsz	??_main+1,f
  1008  00EB  28E8               	goto	u1177
  1009  00EC                     l115:	
  1010                           ;main_rasp.c: 115:         }
  1011                           
  1012                           
  1013                           ;main_rasp.c: 114:         while (TXSTAbits.TRMT == 0) {
  1014  00EC  1683               	bsf	3,5	;RP0=1, select bank1
  1015  00ED  1303               	bcf	3,6	;RP1=0, select bank1
  1016  00EE  1C98               	btfss	24,1	;volatile
  1017  00EF  28F1               	goto	u1081
  1018  00F0  28F2               	goto	u1080
  1019  00F1                     u1081:	
  1020  00F1  28EC               	goto	l115
  1021  00F2                     u1080:	
  1022  00F2                     l1784:	
  1023                           
  1024                           ;main_rasp.c: 116:         TXREG = 2;
  1025  00F2  3002               	movlw	2
  1026  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1027  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1028  00F5  0099               	movwf	25	;volatile
  1029  00F6                     l118:	
  1030                           ;main_rasp.c: 118:         }
  1031                           
  1032                           
  1033                           ;main_rasp.c: 117:         while (!RCIF) {
  1034  00F6  1E8C               	btfss	12,5	;volatile
  1035  00F7  28F9               	goto	u1091
  1036  00F8  28FA               	goto	u1090
  1037  00F9                     u1091:	
  1038  00F9  28F6               	goto	l118
  1039  00FA                     u1090:	
  1040  00FA                     l1786:	
  1041                           
  1042                           ;main_rasp.c: 119:         temp = RCREG;
  1043  00FA  081A               	movf	26,w	;volatile
  1044  00FB  00C3               	movwf	??_main
  1045  00FC  01C4               	clrf	??_main+1
  1046  00FD  0843               	movf	??_main,w
  1047  00FE  00CD               	movwf	_temp
  1048  00FF  0844               	movf	??_main+1,w
  1049  0100  00CE               	movwf	_temp+1
  1050                           
  1051                           ;main_rasp.c: 120:         _delay((unsigned long)((100)*(4000000/4000.0)));
  1052  0101  3082               	movlw	130
  1053  0102  1283               	bcf	3,5	;RP0=0, select bank0
  1054  0103  1303               	bcf	3,6	;RP1=0, select bank0
  1055  0104  00C4               	movwf	??_main+1
  1056  0105  30DD               	movlw	221
  1057  0106  00C3               	movwf	??_main
  1058  0107                     u1187:	
  1059  0107  0BC3               	decfsz	??_main,f
  1060  0108  2907               	goto	u1187
  1061  0109  0BC4               	decfsz	??_main+1,f
  1062  010A  2907               	goto	u1187
  1063  010B                     l121:	
  1064                           ;main_rasp.c: 122:         }
  1065                           
  1066                           
  1067                           ;main_rasp.c: 121:         while (TXSTAbits.TRMT == 0) {
  1068  010B  1683               	bsf	3,5	;RP0=1, select bank1
  1069  010C  1303               	bcf	3,6	;RP1=0, select bank1
  1070  010D  1C98               	btfss	24,1	;volatile
  1071  010E  2910               	goto	u1101
  1072  010F  2911               	goto	u1100
  1073  0110                     u1101:	
  1074  0110  290B               	goto	l121
  1075  0111                     u1100:	
  1076  0111                     l1788:	
  1077                           
  1078                           ;main_rasp.c: 123:         TXREG = 3;
  1079  0111  3003               	movlw	3
  1080  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1081  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1082  0114  0099               	movwf	25	;volatile
  1083  0115                     l124:	
  1084                           ;main_rasp.c: 125:         }
  1085                           
  1086                           
  1087                           ;main_rasp.c: 124:         while (!RCIF) {
  1088  0115  1E8C               	btfss	12,5	;volatile
  1089  0116  2918               	goto	u1111
  1090  0117  2919               	goto	u1110
  1091  0118                     u1111:	
  1092  0118  2915               	goto	l124
  1093  0119                     u1110:	
  1094  0119                     l1790:	
  1095                           
  1096                           ;main_rasp.c: 126:         caudal = RCREG;
  1097  0119  081A               	movf	26,w	;volatile
  1098  011A  00C3               	movwf	??_main
  1099  011B  01C4               	clrf	??_main+1
  1100  011C  0843               	movf	??_main,w
  1101  011D  00CB               	movwf	_caudal
  1102  011E  0844               	movf	??_main+1,w
  1103  011F  00CC               	movwf	_caudal+1
  1104                           
  1105                           ;main_rasp.c: 127:         _delay((unsigned long)((100)*(4000000/4000.0)));
  1106  0120  3082               	movlw	130
  1107  0121  1283               	bcf	3,5	;RP0=0, select bank0
  1108  0122  1303               	bcf	3,6	;RP1=0, select bank0
  1109  0123  00C4               	movwf	??_main+1
  1110  0124  30DD               	movlw	221
  1111  0125  00C3               	movwf	??_main
  1112  0126                     u1197:	
  1113  0126  0BC3               	decfsz	??_main,f
  1114  0127  2926               	goto	u1197
  1115  0128  0BC4               	decfsz	??_main+1,f
  1116  0129  2926               	goto	u1197
  1117  012A                     l127:	
  1118                           ;main_rasp.c: 129:         }
  1119                           
  1120                           
  1121                           ;main_rasp.c: 128:         while (TXSTAbits.TRMT == 0) {
  1122  012A  1683               	bsf	3,5	;RP0=1, select bank1
  1123  012B  1303               	bcf	3,6	;RP1=0, select bank1
  1124  012C  1C98               	btfss	24,1	;volatile
  1125  012D  292F               	goto	u1121
  1126  012E  2930               	goto	u1120
  1127  012F                     u1121:	
  1128  012F  292A               	goto	l127
  1129  0130                     u1120:	
  1130  0130                     l1792:	
  1131                           
  1132                           ;main_rasp.c: 130:         TXREG = 4;
  1133  0130  3004               	movlw	4
  1134  0131  1283               	bcf	3,5	;RP0=0, select bank0
  1135  0132  1303               	bcf	3,6	;RP1=0, select bank0
  1136  0133  0099               	movwf	25	;volatile
  1137  0134                     l130:	
  1138                           ;main_rasp.c: 132:         }
  1139                           
  1140                           
  1141                           ;main_rasp.c: 131:         while (!RCIF) {
  1142  0134  1E8C               	btfss	12,5	;volatile
  1143  0135  2937               	goto	u1131
  1144  0136  2938               	goto	u1130
  1145  0137                     u1131:	
  1146  0137  2934               	goto	l130
  1147  0138                     u1130:	
  1148  0138                     l1794:	
  1149                           
  1150                           ;main_rasp.c: 133:         luz = RCREG;
  1151  0138  081A               	movf	26,w	;volatile
  1152  0139  00C3               	movwf	??_main
  1153  013A  01C4               	clrf	??_main+1
  1154  013B  0843               	movf	??_main,w
  1155  013C  00C7               	movwf	_luz
  1156  013D  0844               	movf	??_main+1,w
  1157  013E  00C8               	movwf	_luz+1
  1158                           
  1159                           ;main_rasp.c: 134:         _delay((unsigned long)((100)*(4000000/4000.0)));
  1160  013F  3082               	movlw	130
  1161  0140  1283               	bcf	3,5	;RP0=0, select bank0
  1162  0141  1303               	bcf	3,6	;RP1=0, select bank0
  1163  0142  00C4               	movwf	??_main+1
  1164  0143  30DD               	movlw	221
  1165  0144  00C3               	movwf	??_main
  1166  0145                     u1207:	
  1167  0145  0BC3               	decfsz	??_main,f
  1168  0146  2945               	goto	u1207
  1169  0147  0BC4               	decfsz	??_main+1,f
  1170  0148  2945               	goto	u1207
  1171  0149                     l133:	
  1172                           ;main_rasp.c: 136:         }
  1173                           
  1174                           
  1175                           ;main_rasp.c: 135:         while (TXSTAbits.TRMT == 0) {
  1176  0149  1683               	bsf	3,5	;RP0=1, select bank1
  1177  014A  1303               	bcf	3,6	;RP1=0, select bank1
  1178  014B  1C98               	btfss	24,1	;volatile
  1179  014C  294E               	goto	u1141
  1180  014D  294F               	goto	u1140
  1181  014E                     u1141:	
  1182  014E  2949               	goto	l133
  1183  014F                     u1140:	
  1184  014F                     l1796:	
  1185                           
  1186                           ;main_rasp.c: 137:         TXREG = 5;
  1187  014F  3005               	movlw	5
  1188  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1189  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1190  0152  0099               	movwf	25	;volatile
  1191  0153                     l136:	
  1192                           ;main_rasp.c: 139:         }
  1193                           
  1194                           
  1195                           ;main_rasp.c: 138:         while (!RCIF) {
  1196  0153  1E8C               	btfss	12,5	;volatile
  1197  0154  2956               	goto	u1151
  1198  0155  2957               	goto	u1150
  1199  0156                     u1151:	
  1200  0156  2953               	goto	l136
  1201  0157                     u1150:	
  1202  0157                     l1798:	
  1203                           
  1204                           ;main_rasp.c: 140:         hum = RCREG;
  1205  0157  081A               	movf	26,w	;volatile
  1206  0158  00C3               	movwf	??_main
  1207  0159  01C4               	clrf	??_main+1
  1208  015A  0843               	movf	??_main,w
  1209  015B  00C5               	movwf	_hum
  1210  015C  0844               	movf	??_main+1,w
  1211  015D  00C6               	movwf	_hum+1
  1212                           
  1213                           ;main_rasp.c: 141:         _delay((unsigned long)((100)*(4000000/4000.0)));
  1214  015E  3082               	movlw	130
  1215  015F  1283               	bcf	3,5	;RP0=0, select bank0
  1216  0160  1303               	bcf	3,6	;RP1=0, select bank0
  1217  0161  00C4               	movwf	??_main+1
  1218  0162  30DD               	movlw	221
  1219  0163  00C3               	movwf	??_main
  1220  0164                     u1217:	
  1221  0164  0BC3               	decfsz	??_main,f
  1222  0165  2964               	goto	u1217
  1223  0166  0BC4               	decfsz	??_main+1,f
  1224  0167  2964               	goto	u1217
  1225  0168  2825               	goto	l1758
  1226  0169  120A  118A  280C   	ljmp	start
  1227  016C                     __end_of_main:	
  1228                           
  1229                           	psect	text1
  1230  04A6                     __ptext1:	
  1231 ;; *************** function _writeIntLCD *****************
  1232 ;; Defined at:
  1233 ;;		line 66 in file "LCD.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;  numero          1    wreg     unsigned char 
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;  numero          1   34[BANK0 ] unsigned char 
  1238 ;;  buffer          4   30[BANK0 ] unsigned char [4]
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1248 ;;      Params:         0       0       0       0       0
  1249 ;;      Locals:         0       5       0       0       0
  1250 ;;      Temps:          0       3       0       0       0
  1251 ;;      Totals:         0       8       0       0       0
  1252 ;;Total ram usage:        8 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    5
  1255 ;; This function calls:
  1256 ;;		_sprintf
  1257 ;;		_writeStrLCD
  1258 ;; This function is called by:
  1259 ;;		_main
  1260 ;;		_writeFloat
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           
  1265                           ;psect for function _writeIntLCD
  1266  04A6                     _writeIntLCD:	
  1267                           
  1268                           ;incstack = 0
  1269                           ; Regs used in _writeIntLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1270                           ;writeIntLCD@numero stored from wreg
  1271  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  1272  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  1273  04A8  00C2               	movwf	writeIntLCD@numero
  1274  04A9                     l1754:	
  1275                           
  1276                           ;LCD.c: 67:     char buffer [4];;LCD.c: 68:     sprintf (buffer, "%d", numero);
  1277  04A9  3017               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1278  04AA  00BB               	movwf	??_writeIntLCD
  1279  04AB  083B               	movf	??_writeIntLCD,w
  1280  04AC  00AE               	movwf	sprintf@f
  1281  04AD  0842               	movf	writeIntLCD@numero,w
  1282  04AE  00BC               	movwf	??_writeIntLCD+1
  1283  04AF  01BD               	clrf	??_writeIntLCD+2
  1284  04B0  083C               	movf	??_writeIntLCD+1,w
  1285  04B1  00AF               	movwf	?_sprintf+1
  1286  04B2  083D               	movf	??_writeIntLCD+2,w
  1287  04B3  00B0               	movwf	?_sprintf+2
  1288  04B4  303E               	movlw	(low (writeIntLCD@buffer| 0))& (0+255)
  1289  04B5  120A  118A  216C  120A  118A  	fcall	_sprintf
  1290                           
  1291                           ;LCD.c: 69:     writeStrLCD(buffer);
  1292  04BA  303E               	movlw	(low (writeIntLCD@buffer| 0))& (0+255)
  1293  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  1294  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  1295  04BD  00A2               	movwf	writeStrLCD@string
  1296  04BE  3000               	movlw	0
  1297  04BF  00A3               	movwf	writeStrLCD@string+1
  1298  04C0  120A  118A  23B8  120A  118A  	fcall	_writeStrLCD
  1299  04C5                     l186:	
  1300  04C5  0008               	return
  1301  04C6                     __end_of_writeIntLCD:	
  1302                           
  1303                           	psect	text2
  1304  016C                     __ptext2:	
  1305 ;; *************** function _sprintf *****************
  1306 ;; Defined at:
  1307 ;;		line 505 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;  sp              1    wreg     PTR unsigned char 
  1310 ;;		 -> writeIntLCD@buffer(4), 
  1311 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  1312 ;;		 -> STR_10(3), 
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  sp              1   25[BANK0 ] PTR unsigned char 
  1315 ;;		 -> writeIntLCD@buffer(4), 
  1316 ;;  tmpval          4    0        struct .
  1317 ;;  val             2   23[BANK0 ] unsigned int 
  1318 ;;  cp              2    0        PTR const unsigned char 
  1319 ;;  len             2    0        unsigned int 
  1320 ;;  c               1   26[BANK0 ] unsigned char 
  1321 ;;  prec            1   22[BANK0 ] char 
  1322 ;;  flag            1   21[BANK0 ] unsigned char 
  1323 ;;  ap              1   20[BANK0 ] PTR void [1]
  1324 ;;		 -> ?_sprintf(2), 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  2   14[BANK0 ] int 
  1327 ;; Registers used:
  1328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1334 ;;      Params:         0       3       0       0       0
  1335 ;;      Locals:         0       7       0       0       0
  1336 ;;      Temps:          0       3       0       0       0
  1337 ;;      Totals:         0      13       0       0       0
  1338 ;;Total ram usage:       13 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:    4
  1341 ;; This function calls:
  1342 ;;		___lwdiv
  1343 ;;		___lwmod
  1344 ;; This function is called by:
  1345 ;;		_writeIntLCD
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           
  1350                           ;psect for function _sprintf
  1351  016C                     _sprintf:	
  1352                           
  1353                           ;incstack = 0
  1354                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1355                           ;sprintf@sp stored from wreg
  1356  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1357  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1358  016E  00B9               	movwf	sprintf@sp
  1359  016F                     l1632:	
  1360                           
  1361                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 505: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources
      +                          \c90\common\doprnt.c: 506: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\
      +                          common\doprnt.c: 507:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\source
      +                          s\c90\common\doprnt.c: 512:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sour
      +                          ces\c90\common\doprnt.c: 521:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .10\pic\sources\c90\common\doprnt.c: 525:  unsigned char flag;
  1362  016F  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1363  0170  00B1               	movwf	??_sprintf
  1364  0171  0831               	movf	??_sprintf,w
  1365  0172  00B4               	movwf	sprintf@ap
  1366                           
  1367                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
  1368  0173  2A3F               	goto	l1684
  1369  0174                     l1634:	
  1370                           
  1371                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 555:   if(c
      +                           != '%')
  1372  0174  3025               	movlw	37
  1373  0175  063A               	xorwf	sprintf@c,w
  1374  0176  1903               	btfsc	3,2
  1375  0177  2979               	goto	u991
  1376  0178  297A               	goto	u990
  1377  0179                     u991:	
  1378  0179  2986               	goto	l1640
  1379  017A                     u990:	
  1380  017A                     l1636:	
  1381                           
  1382                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 557:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 558:    ((*sp+
      +                          + = (c)));
  1383  017A  083A               	movf	sprintf@c,w
  1384  017B  00B1               	movwf	??_sprintf
  1385  017C  0839               	movf	sprintf@sp,w
  1386  017D  0084               	movwf	4
  1387  017E  0831               	movf	??_sprintf,w
  1388  017F  1383               	bcf	3,7	;select IRP bank0
  1389  0180  0080               	movwf	0
  1390  0181                     l1638:	
  1391  0181  3001               	movlw	1
  1392  0182  00B1               	movwf	??_sprintf
  1393  0183  0831               	movf	??_sprintf,w
  1394  0184  07B9               	addwf	sprintf@sp,f
  1395                           
  1396                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 559:    con
      +                          tinue;
  1397  0185  2A3F               	goto	l1684
  1398  0186                     l1640:	
  1399                           
  1400                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 565:   flag
      +                           = 0;
  1401  0186  01B5               	clrf	sprintf@flag
  1402  0187                     l1644:	
  1403                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 661:   swit
      +                          ch(c = *f++) {
  1404                           
  1405  0187  3001               	movlw	1
  1406  0188  07AE               	addwf	sprintf@f,f
  1407  0189  30FF               	movlw	-1
  1408  018A  072E               	addwf	sprintf@f,w
  1409  018B  0084               	movwf	4
  1410  018C  120A  118A  247F  120A  118A  	fcall	stringdir
  1411  0191  00BA               	movwf	sprintf@c
  1412  0192  00B1               	movwf	??_sprintf
  1413  0193  01B2               	clrf	??_sprintf+1
  1414                           
  1415                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1416                           ; Switch size 1, requested type "simple"
  1417                           ; Number of cases is 1, Range of values is 0 to 0
  1418                           ; switch strategies available:
  1419                           ; Name         Instructions Cycles
  1420                           ; simple_byte            4     3 (average)
  1421                           ; direct_byte           11     8 (fixed)
  1422                           ; jumptable            260     6 (fixed)
  1423                           ;	Chosen strategy is simple_byte
  1424  0194  0832               	movf	??_sprintf+1,w
  1425  0195  3A00               	xorlw	0	; case 0
  1426  0196  1903               	skipnz
  1427  0197  2999               	goto	l1840
  1428  0198  2A3F               	goto	l1684
  1429  0199                     l1840:	
  1430                           
  1431                           ; Switch size 1, requested type "simple"
  1432                           ; Number of cases is 3, Range of values is 0 to 105
  1433                           ; switch strategies available:
  1434                           ; Name         Instructions Cycles
  1435                           ; simple_byte           10     6 (average)
  1436                           ; jumptable            260     6 (fixed)
  1437                           ;	Chosen strategy is simple_byte
  1438  0199  0831               	movf	??_sprintf,w
  1439  019A  3A00               	xorlw	0	; case 0
  1440  019B  1903               	skipnz
  1441  019C  2A51               	goto	l1686
  1442  019D  3A64               	xorlw	100	; case 100
  1443  019E  1903               	skipnz
  1444  019F  29A4               	goto	l1646
  1445  01A0  3A0D               	xorlw	13	; case 105
  1446  01A1  1903               	skipnz
  1447  01A2  29A4               	goto	l1646
  1448  01A3  2A3F               	goto	l1684
  1449  01A4                     l1646:	
  1450                           
  1451                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1279:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1285:     val
      +                           = (unsigned int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1452  01A4  0834               	movf	sprintf@ap,w
  1453  01A5  0084               	movwf	4
  1454  01A6  1383               	bcf	3,7	;select IRP bank0
  1455  01A7  0800               	movf	0,w
  1456  01A8  00B7               	movwf	sprintf@val
  1457  01A9  0A84               	incf	4,f
  1458  01AA  0800               	movf	0,w
  1459  01AB  00B8               	movwf	sprintf@val+1
  1460  01AC                     l1648:	
  1461  01AC  3002               	movlw	2
  1462  01AD  00B1               	movwf	??_sprintf
  1463  01AE  0831               	movf	??_sprintf,w
  1464  01AF  07B4               	addwf	sprintf@ap,f
  1465  01B0                     l1650:	
  1466                           
  1467                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1287:    if
      +                          ((int)val < 0) {
  1468  01B0  1FB8               	btfss	sprintf@val+1,7
  1469  01B1  29B3               	goto	u1001
  1470  01B2  29B4               	goto	u1000
  1471  01B3                     u1001:	
  1472  01B3  29BD               	goto	l1656
  1473  01B4                     u1000:	
  1474  01B4                     l1652:	
  1475                           
  1476                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1288:     f
      +                          lag |= 0x03;
  1477  01B4  3003               	movlw	3
  1478  01B5  00B1               	movwf	??_sprintf
  1479  01B6  0831               	movf	??_sprintf,w
  1480  01B7  04B5               	iorwf	sprintf@flag,f
  1481  01B8                     l1654:	
  1482                           
  1483                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1289:     v
      +                          al = -val;
  1484  01B8  09B7               	comf	sprintf@val,f
  1485  01B9  09B8               	comf	sprintf@val+1,f
  1486  01BA  0AB7               	incf	sprintf@val,f
  1487  01BB  1903               	skipnz
  1488  01BC  0AB8               	incf	sprintf@val+1,f
  1489  01BD                     l1656:	
  1490                           
  1491                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1292:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1331:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1492  01BD  01BA               	clrf	sprintf@c
  1493  01BE  0ABA               	incf	sprintf@c,f
  1494  01BF                     l1662:	
  1495                           
  1496                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1332:     i
      +                          f(val < dpowers[c])
  1497  01BF  083A               	movf	sprintf@c,w
  1498  01C0  00B1               	movwf	??_sprintf
  1499  01C1  0731               	addwf	??_sprintf,w
  1500  01C2  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1501  01C3  0084               	movwf	4
  1502  01C4  120A  118A  247F  120A  118A  	fcall	stringdir
  1503  01C9  00B2               	movwf	??_sprintf+1
  1504  01CA  120A  118A  247F  120A  118A  	fcall	stringdir
  1505  01CF  00B3               	movwf	??_sprintf+2
  1506  01D0  0833               	movf	??_sprintf+2,w
  1507  01D1  0238               	subwf	sprintf@val+1,w
  1508  01D2  1D03               	skipz
  1509  01D3  29D6               	goto	u1015
  1510  01D4  0832               	movf	??_sprintf+1,w
  1511  01D5  0237               	subwf	sprintf@val,w
  1512  01D6                     u1015:	
  1513  01D6  1803               	skipnc
  1514  01D7  29D9               	goto	u1011
  1515  01D8  29DA               	goto	u1010
  1516  01D9                     u1011:	
  1517  01D9  29DB               	goto	l1666
  1518  01DA                     u1010:	
  1519  01DA  29E5               	goto	l1668
  1520  01DB                     l1666:	
  1521  01DB  3001               	movlw	1
  1522  01DC  00B1               	movwf	??_sprintf
  1523  01DD  0831               	movf	??_sprintf,w
  1524  01DE  07BA               	addwf	sprintf@c,f
  1525  01DF  3005               	movlw	5
  1526  01E0  063A               	xorwf	sprintf@c,w
  1527  01E1  1D03               	btfss	3,2
  1528  01E2  29E4               	goto	u1021
  1529  01E3  29E5               	goto	u1020
  1530  01E4                     u1021:	
  1531  01E4  29BF               	goto	l1662
  1532  01E5                     u1020:	
  1533  01E5                     l1668:	
  1534                           
  1535                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1448:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1464:    if(f
      +                          lag & 0x03)
  1536  01E5  0835               	movf	sprintf@flag,w
  1537  01E6  3903               	andlw	3
  1538  01E7  1903               	btfsc	3,2
  1539  01E8  29EA               	goto	u1031
  1540  01E9  29EB               	goto	u1030
  1541  01EA                     u1031:	
  1542  01EA  29F6               	goto	l1674
  1543  01EB                     u1030:	
  1544  01EB                     l1670:	
  1545                           
  1546                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1465:     (
      +                          (*sp++ = ('-')));
  1547  01EB  302D               	movlw	45
  1548  01EC  00B1               	movwf	??_sprintf
  1549  01ED  0839               	movf	sprintf@sp,w
  1550  01EE  0084               	movwf	4
  1551  01EF  0831               	movf	??_sprintf,w
  1552  01F0  1383               	bcf	3,7	;select IRP bank0
  1553  01F1  0080               	movwf	0
  1554  01F2                     l1672:	
  1555  01F2  3001               	movlw	1
  1556  01F3  00B1               	movwf	??_sprintf
  1557  01F4  0831               	movf	??_sprintf,w
  1558  01F5  07B9               	addwf	sprintf@sp,f
  1559  01F6                     l1674:	
  1560                           
  1561                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1495:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1498:   prec 
      +                          = c;
  1562  01F6  083A               	movf	sprintf@c,w
  1563  01F7  00B1               	movwf	??_sprintf
  1564  01F8  0831               	movf	??_sprintf,w
  1565  01F9  00B6               	movwf	sprintf@prec
  1566                           
  1567                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
  1568  01FA  2A36               	goto	l1682
  1569  01FB                     l1676:	
  1570                           
  1571                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1504:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1515:     c 
      +                          = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  1572  01FB  300A               	movlw	10
  1573  01FC  00A8               	movwf	___lwmod@divisor
  1574  01FD  3000               	movlw	0
  1575  01FE  00A9               	movwf	___lwmod@divisor+1
  1576  01FF  0836               	movf	sprintf@prec,w
  1577  0200  00B1               	movwf	??_sprintf
  1578  0201  0731               	addwf	??_sprintf,w
  1579  0202  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1580  0203  0084               	movwf	4
  1581  0204  120A  118A  247F  120A  118A  	fcall	stringdir
  1582  0209  00A0               	movwf	___lwdiv@divisor
  1583  020A  120A  118A  247F  120A  118A  	fcall	stringdir
  1584  020F  00A1               	movwf	___lwdiv@divisor+1
  1585  0210  0838               	movf	sprintf@val+1,w
  1586  0211  00A3               	movwf	___lwdiv@dividend+1
  1587  0212  0837               	movf	sprintf@val,w
  1588  0213  00A2               	movwf	___lwdiv@dividend
  1589  0214  120A  118A  2372  120A  118A  	fcall	___lwdiv
  1590  0219  1283               	bcf	3,5	;RP0=0, select bank0
  1591  021A  1303               	bcf	3,6	;RP1=0, select bank0
  1592  021B  0821               	movf	?___lwdiv+1,w
  1593  021C  00AB               	movwf	___lwmod@dividend+1
  1594  021D  0820               	movf	?___lwdiv,w
  1595  021E  00AA               	movwf	___lwmod@dividend
  1596  021F  120A  118A  23FE  120A  118A  	fcall	___lwmod
  1597  0224  1283               	bcf	3,5	;RP0=0, select bank0
  1598  0225  1303               	bcf	3,6	;RP1=0, select bank0
  1599  0226  0828               	movf	?___lwmod,w
  1600  0227  3E30               	addlw	48
  1601  0228  00B2               	movwf	??_sprintf+1
  1602  0229  0832               	movf	??_sprintf+1,w
  1603  022A  00BA               	movwf	sprintf@c
  1604  022B                     l1678:	
  1605                           
  1606                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1549:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1550:    ((*
      +                          sp++ = (c)));
  1607  022B  083A               	movf	sprintf@c,w
  1608  022C  00B1               	movwf	??_sprintf
  1609  022D  0839               	movf	sprintf@sp,w
  1610  022E  0084               	movwf	4
  1611  022F  0831               	movf	??_sprintf,w
  1612  0230  1383               	bcf	3,7	;select IRP bank0
  1613  0231  0080               	movwf	0
  1614  0232                     l1680:	
  1615  0232  3001               	movlw	1
  1616  0233  00B1               	movwf	??_sprintf
  1617  0234  0831               	movf	??_sprintf,w
  1618  0235  07B9               	addwf	sprintf@sp,f
  1619  0236                     l1682:	
  1620                           
  1621                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
  1622  0236  30FF               	movlw	255
  1623  0237  00B1               	movwf	??_sprintf
  1624  0238  0831               	movf	??_sprintf,w
  1625  0239  07B6               	addwf	sprintf@prec,f
  1626  023A  0A36               	incf	sprintf@prec,w
  1627  023B  1D03               	btfss	3,2
  1628  023C  2A3E               	goto	u1041
  1629  023D  2A3F               	goto	u1040
  1630  023E                     u1041:	
  1631  023E  29FB               	goto	l1676
  1632  023F                     u1040:	
  1633  023F                     l1684:	
  1634                           
  1635                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
  1636  023F  3001               	movlw	1
  1637  0240  07AE               	addwf	sprintf@f,f
  1638  0241  30FF               	movlw	-1
  1639  0242  072E               	addwf	sprintf@f,w
  1640  0243  0084               	movwf	4
  1641  0244  120A  118A  247F  120A  118A  	fcall	stringdir
  1642  0249  00B1               	movwf	??_sprintf
  1643  024A  0831               	movf	??_sprintf,w
  1644  024B  00BA               	movwf	sprintf@c
  1645  024C  083A               	movf	sprintf@c,w
  1646  024D  1D03               	btfss	3,2
  1647  024E  2A50               	goto	u1051
  1648  024F  2A51               	goto	u1050
  1649  0250                     u1051:	
  1650  0250  2974               	goto	l1634
  1651  0251                     u1050:	
  1652  0251                     l1686:	
  1653                           
  1654                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1564:  *sp 
      +                          = 0;
  1655  0251  0839               	movf	sprintf@sp,w
  1656  0252  0084               	movwf	4
  1657  0253  1383               	bcf	3,7	;select IRP bank0
  1658  0254  0180               	clrf	0
  1659  0255                     l332:	
  1660  0255  0008               	return
  1661  0256                     __end_of_sprintf:	
  1662                           
  1663                           	psect	text3
  1664  03FE                     __ptext3:	
  1665 ;; *************** function ___lwmod *****************
  1666 ;; Defined at:
  1667 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  divisor         2    8[BANK0 ] unsigned int 
  1670 ;;  dividend        2   10[BANK0 ] unsigned int 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;  counter         1   13[BANK0 ] unsigned char 
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  2    8[BANK0 ] unsigned int 
  1675 ;; Registers used:
  1676 ;;		wreg, status,2, status,0
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1682 ;;      Params:         0       4       0       0       0
  1683 ;;      Locals:         0       1       0       0       0
  1684 ;;      Temps:          0       1       0       0       0
  1685 ;;      Totals:         0       6       0       0       0
  1686 ;;Total ram usage:        6 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:    3
  1689 ;; This function calls:
  1690 ;;		Nothing
  1691 ;; This function is called by:
  1692 ;;		_sprintf
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           
  1697                           ;psect for function ___lwmod
  1698  03FE                     ___lwmod:	
  1699  03FE                     l1240:	
  1700                           ;incstack = 0
  1701                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1702                           
  1703  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  1704  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  1705  0400  0828               	movf	___lwmod@divisor,w
  1706  0401  0429               	iorwf	___lwmod@divisor+1,w
  1707  0402  1903               	btfsc	3,2
  1708  0403  2C05               	goto	u511
  1709  0404  2C06               	goto	u510
  1710  0405                     u511:	
  1711  0405  2C35               	goto	l1258
  1712  0406                     u510:	
  1713  0406                     l1242:	
  1714  0406  01AD               	clrf	___lwmod@counter
  1715  0407  0AAD               	incf	___lwmod@counter,f
  1716  0408  2C14               	goto	l1248
  1717  0409                     l1244:	
  1718  0409  3001               	movlw	1
  1719  040A                     u525:	
  1720  040A  1003               	clrc
  1721  040B  0DA8               	rlf	___lwmod@divisor,f
  1722  040C  0DA9               	rlf	___lwmod@divisor+1,f
  1723  040D  3EFF               	addlw	-1
  1724  040E  1D03               	skipz
  1725  040F  2C0A               	goto	u525
  1726  0410                     l1246:	
  1727  0410  3001               	movlw	1
  1728  0411  00AC               	movwf	??___lwmod
  1729  0412  082C               	movf	??___lwmod,w
  1730  0413  07AD               	addwf	___lwmod@counter,f
  1731  0414                     l1248:	
  1732  0414  1FA9               	btfss	___lwmod@divisor+1,7
  1733  0415  2C17               	goto	u531
  1734  0416  2C18               	goto	u530
  1735  0417                     u531:	
  1736  0417  2C09               	goto	l1244
  1737  0418                     u530:	
  1738  0418                     l1250:	
  1739  0418  0829               	movf	___lwmod@divisor+1,w
  1740  0419  022B               	subwf	___lwmod@dividend+1,w
  1741  041A  1D03               	skipz
  1742  041B  2C1E               	goto	u545
  1743  041C  0828               	movf	___lwmod@divisor,w
  1744  041D  022A               	subwf	___lwmod@dividend,w
  1745  041E                     u545:	
  1746  041E  1C03               	skipc
  1747  041F  2C21               	goto	u541
  1748  0420  2C22               	goto	u540
  1749  0421                     u541:	
  1750  0421  2C28               	goto	l1254
  1751  0422                     u540:	
  1752  0422                     l1252:	
  1753  0422  0828               	movf	___lwmod@divisor,w
  1754  0423  02AA               	subwf	___lwmod@dividend,f
  1755  0424  0829               	movf	___lwmod@divisor+1,w
  1756  0425  1C03               	skipc
  1757  0426  03AB               	decf	___lwmod@dividend+1,f
  1758  0427  02AB               	subwf	___lwmod@dividend+1,f
  1759  0428                     l1254:	
  1760  0428  3001               	movlw	1
  1761  0429                     u555:	
  1762  0429  1003               	clrc
  1763  042A  0CA9               	rrf	___lwmod@divisor+1,f
  1764  042B  0CA8               	rrf	___lwmod@divisor,f
  1765  042C  3EFF               	addlw	-1
  1766  042D  1D03               	skipz
  1767  042E  2C29               	goto	u555
  1768  042F                     l1256:	
  1769  042F  3001               	movlw	1
  1770  0430  02AD               	subwf	___lwmod@counter,f
  1771  0431  1D03               	btfss	3,2
  1772  0432  2C34               	goto	u561
  1773  0433  2C35               	goto	u560
  1774  0434                     u561:	
  1775  0434  2C18               	goto	l1250
  1776  0435                     u560:	
  1777  0435                     l1258:	
  1778  0435  082B               	movf	___lwmod@dividend+1,w
  1779  0436  00A9               	movwf	?___lwmod+1
  1780  0437  082A               	movf	___lwmod@dividend,w
  1781  0438  00A8               	movwf	?___lwmod
  1782  0439                     l618:	
  1783  0439  0008               	return
  1784  043A                     __end_of___lwmod:	
  1785                           
  1786                           	psect	text4
  1787  0372                     __ptext4:	
  1788 ;; *************** function ___lwdiv *****************
  1789 ;; Defined at:
  1790 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;  divisor         2    0[BANK0 ] unsigned int 
  1793 ;;  dividend        2    2[BANK0 ] unsigned int 
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  quotient        2    6[BANK0 ] unsigned int 
  1796 ;;  counter         1    5[BANK0 ] unsigned char 
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  2    0[BANK0 ] unsigned int 
  1799 ;; Registers used:
  1800 ;;		wreg, status,2, status,0
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1806 ;;      Params:         0       4       0       0       0
  1807 ;;      Locals:         0       3       0       0       0
  1808 ;;      Temps:          0       1       0       0       0
  1809 ;;      Totals:         0       8       0       0       0
  1810 ;;Total ram usage:        8 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    3
  1813 ;; This function calls:
  1814 ;;		Nothing
  1815 ;; This function is called by:
  1816 ;;		_sprintf
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           
  1821                           ;psect for function ___lwdiv
  1822  0372                     ___lwdiv:	
  1823  0372                     l1564:	
  1824                           ;incstack = 0
  1825                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1826                           
  1827  0372  1283               	bcf	3,5	;RP0=0, select bank0
  1828  0373  1303               	bcf	3,6	;RP1=0, select bank0
  1829  0374  01A6               	clrf	___lwdiv@quotient
  1830  0375  01A7               	clrf	___lwdiv@quotient+1
  1831  0376                     l1566:	
  1832  0376  0820               	movf	___lwdiv@divisor,w
  1833  0377  0421               	iorwf	___lwdiv@divisor+1,w
  1834  0378  1903               	btfsc	3,2
  1835  0379  2B7B               	goto	u871
  1836  037A  2B7C               	goto	u870
  1837  037B                     u871:	
  1838  037B  2BB3               	goto	l1586
  1839  037C                     u870:	
  1840  037C                     l1568:	
  1841  037C  01A5               	clrf	___lwdiv@counter
  1842  037D  0AA5               	incf	___lwdiv@counter,f
  1843  037E  2B8A               	goto	l1574
  1844  037F                     l1570:	
  1845  037F  3001               	movlw	1
  1846  0380                     u885:	
  1847  0380  1003               	clrc
  1848  0381  0DA0               	rlf	___lwdiv@divisor,f
  1849  0382  0DA1               	rlf	___lwdiv@divisor+1,f
  1850  0383  3EFF               	addlw	-1
  1851  0384  1D03               	skipz
  1852  0385  2B80               	goto	u885
  1853  0386                     l1572:	
  1854  0386  3001               	movlw	1
  1855  0387  00A4               	movwf	??___lwdiv
  1856  0388  0824               	movf	??___lwdiv,w
  1857  0389  07A5               	addwf	___lwdiv@counter,f
  1858  038A                     l1574:	
  1859  038A  1FA1               	btfss	___lwdiv@divisor+1,7
  1860  038B  2B8D               	goto	u891
  1861  038C  2B8E               	goto	u890
  1862  038D                     u891:	
  1863  038D  2B7F               	goto	l1570
  1864  038E                     u890:	
  1865  038E                     l1576:	
  1866  038E  3001               	movlw	1
  1867  038F                     u905:	
  1868  038F  1003               	clrc
  1869  0390  0DA6               	rlf	___lwdiv@quotient,f
  1870  0391  0DA7               	rlf	___lwdiv@quotient+1,f
  1871  0392  3EFF               	addlw	-1
  1872  0393  1D03               	skipz
  1873  0394  2B8F               	goto	u905
  1874  0395  0821               	movf	___lwdiv@divisor+1,w
  1875  0396  0223               	subwf	___lwdiv@dividend+1,w
  1876  0397  1D03               	skipz
  1877  0398  2B9B               	goto	u915
  1878  0399  0820               	movf	___lwdiv@divisor,w
  1879  039A  0222               	subwf	___lwdiv@dividend,w
  1880  039B                     u915:	
  1881  039B  1C03               	skipc
  1882  039C  2B9E               	goto	u911
  1883  039D  2B9F               	goto	u910
  1884  039E                     u911:	
  1885  039E  2BA6               	goto	l1582
  1886  039F                     u910:	
  1887  039F                     l1578:	
  1888  039F  0820               	movf	___lwdiv@divisor,w
  1889  03A0  02A2               	subwf	___lwdiv@dividend,f
  1890  03A1  0821               	movf	___lwdiv@divisor+1,w
  1891  03A2  1C03               	skipc
  1892  03A3  03A3               	decf	___lwdiv@dividend+1,f
  1893  03A4  02A3               	subwf	___lwdiv@dividend+1,f
  1894  03A5                     l1580:	
  1895  03A5  1426               	bsf	___lwdiv@quotient,0
  1896  03A6                     l1582:	
  1897  03A6  3001               	movlw	1
  1898  03A7                     u925:	
  1899  03A7  1003               	clrc
  1900  03A8  0CA1               	rrf	___lwdiv@divisor+1,f
  1901  03A9  0CA0               	rrf	___lwdiv@divisor,f
  1902  03AA  3EFF               	addlw	-1
  1903  03AB  1D03               	skipz
  1904  03AC  2BA7               	goto	u925
  1905  03AD                     l1584:	
  1906  03AD  3001               	movlw	1
  1907  03AE  02A5               	subwf	___lwdiv@counter,f
  1908  03AF  1D03               	btfss	3,2
  1909  03B0  2BB2               	goto	u931
  1910  03B1  2BB3               	goto	u930
  1911  03B2                     u931:	
  1912  03B2  2B8E               	goto	l1576
  1913  03B3                     u930:	
  1914  03B3                     l1586:	
  1915  03B3  0827               	movf	___lwdiv@quotient+1,w
  1916  03B4  00A1               	movwf	?___lwdiv+1
  1917  03B5  0826               	movf	___lwdiv@quotient,w
  1918  03B6  00A0               	movwf	?___lwdiv
  1919  03B7                     l608:	
  1920  03B7  0008               	return
  1921  03B8                     __end_of___lwdiv:	
  1922                           
  1923                           	psect	text5
  1924  0256                     __ptext5:	
  1925 ;; *************** function _setup *****************
  1926 ;; Defined at:
  1927 ;;		line 148 in file "main_rasp.c"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;		None
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;		None
  1932 ;; Return value:  Size  Location     Type
  1933 ;;                  1    wreg      void 
  1934 ;; Registers used:
  1935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1936 ;; Tracked objects:
  1937 ;;		On entry : 0/0
  1938 ;;		On exit  : 0/0
  1939 ;;		Unchanged: 0/0
  1940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1941 ;;      Params:         0       0       0       0       0
  1942 ;;      Locals:         0       0       0       0       0
  1943 ;;      Temps:          0       1       0       0       0
  1944 ;;      Totals:         0       1       0       0       0
  1945 ;;Total ram usage:        1 bytes
  1946 ;; Hardware stack levels used:    1
  1947 ;; Hardware stack levels required when called:    5
  1948 ;; This function calls:
  1949 ;;		_clcLCD
  1950 ;;		_initLCD
  1951 ;;		_setCursorLCD
  1952 ;;		_spiInit
  1953 ;;		_writeStrLCD
  1954 ;; This function is called by:
  1955 ;;		_main
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959                           
  1960                           ;psect for function _setup
  1961  0256                     _setup:	
  1962  0256                     l1694:	
  1963                           ;incstack = 0
  1964                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1965                           
  1966                           
  1967                           ;main_rasp.c: 149:     PORTA = 0;
  1968  0256  1283               	bcf	3,5	;RP0=0, select bank0
  1969  0257  1303               	bcf	3,6	;RP1=0, select bank0
  1970  0258  0185               	clrf	5	;volatile
  1971                           
  1972                           ;main_rasp.c: 150:     PORTB = 0;
  1973  0259  0186               	clrf	6	;volatile
  1974                           
  1975                           ;main_rasp.c: 151:     PORTD = 0;
  1976  025A  0188               	clrf	8	;volatile
  1977                           
  1978                           ;main_rasp.c: 152:     TRISA = 0;
  1979  025B  1683               	bsf	3,5	;RP0=1, select bank1
  1980  025C  1303               	bcf	3,6	;RP1=0, select bank1
  1981  025D  0185               	clrf	5	;volatile
  1982                           
  1983                           ;main_rasp.c: 153:     TRISB = 0;
  1984  025E  0186               	clrf	6	;volatile
  1985  025F                     l1696:	
  1986                           
  1987                           ;main_rasp.c: 154:     TRISC = 0b10011000;
  1988  025F  3098               	movlw	152
  1989  0260  0087               	movwf	7	;volatile
  1990  0261                     l1698:	
  1991                           
  1992                           ;main_rasp.c: 155:     TRISD = 0;
  1993  0261  0188               	clrf	8	;volatile
  1994  0262                     l1700:	
  1995                           
  1996                           ;main_rasp.c: 156:     ANSEL = 0;
  1997  0262  1683               	bsf	3,5	;RP0=1, select bank3
  1998  0263  1703               	bsf	3,6	;RP1=1, select bank3
  1999  0264  0188               	clrf	8	;volatile
  2000  0265                     l1702:	
  2001                           
  2002                           ;main_rasp.c: 157:     ANSELH = 0;
  2003  0265  0189               	clrf	9	;volatile
  2004  0266                     l1704:	
  2005                           
  2006                           ;main_rasp.c: 163:     TXSTAbits.SYNC = 0;
  2007  0266  1683               	bsf	3,5	;RP0=1, select bank1
  2008  0267  1303               	bcf	3,6	;RP1=0, select bank1
  2009  0268  1218               	bcf	24,4	;volatile
  2010  0269                     l1706:	
  2011                           
  2012                           ;main_rasp.c: 164:     TXSTAbits.BRGH = 0;
  2013  0269  1118               	bcf	24,2	;volatile
  2014  026A                     l1708:	
  2015                           
  2016                           ;main_rasp.c: 165:     BAUDCTLbits.BRG16 = 1;
  2017  026A  1683               	bsf	3,5	;RP0=1, select bank3
  2018  026B  1703               	bsf	3,6	;RP1=1, select bank3
  2019  026C  1587               	bsf	7,3	;volatile
  2020                           
  2021                           ;main_rasp.c: 166:     SPBRG = 25;
  2022  026D  3019               	movlw	25
  2023  026E  1683               	bsf	3,5	;RP0=1, select bank1
  2024  026F  1303               	bcf	3,6	;RP1=0, select bank1
  2025  0270  0099               	movwf	25	;volatile
  2026  0271                     l1710:	
  2027                           
  2028                           ;main_rasp.c: 167:     SPBRGH = 0;
  2029  0271  019A               	clrf	26	;volatile
  2030  0272                     l1712:	
  2031                           
  2032                           ;main_rasp.c: 168:     RCSTAbits.SPEN = 1;
  2033  0272  1283               	bcf	3,5	;RP0=0, select bank0
  2034  0273  1303               	bcf	3,6	;RP1=0, select bank0
  2035  0274  1798               	bsf	24,7	;volatile
  2036  0275                     l1714:	
  2037                           
  2038                           ;main_rasp.c: 169:     RCSTAbits.CREN = 1;
  2039  0275  1618               	bsf	24,4	;volatile
  2040  0276                     l1716:	
  2041                           
  2042                           ;main_rasp.c: 170:     TXSTAbits.TXEN = 1;
  2043  0276  1683               	bsf	3,5	;RP0=1, select bank1
  2044  0277  1303               	bcf	3,6	;RP1=0, select bank1
  2045  0278  1698               	bsf	24,5	;volatile
  2046  0279                     l1718:	
  2047                           
  2048                           ;main_rasp.c: 173:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_L
      +                          OW, SPI_IDLE_2_ACTIVE);
  2049  0279  1283               	bcf	3,5	;RP0=0, select bank0
  2050  027A  1303               	bcf	3,6	;RP1=0, select bank0
  2051  027B  01A0               	clrf	spiInit@sDataSample
  2052  027C  01A1               	clrf	spiInit@sClockIdle
  2053  027D  01A2               	clrf	spiInit@sTransmitEdge
  2054  027E  3024               	movlw	36
  2055  027F  120A  118A  24E0  120A  118A  	fcall	_spiInit
  2056  0284                     l1720:	
  2057                           
  2058                           ;main_rasp.c: 175:     INTCONbits.GIE = 1;
  2059  0284  178B               	bsf	11,7	;volatile
  2060  0285                     l1722:	
  2061                           
  2062                           ;main_rasp.c: 176:     INTCONbits.PEIE = 1;
  2063  0285  170B               	bsf	11,6	;volatile
  2064  0286                     l1724:	
  2065                           
  2066                           ;main_rasp.c: 178:     PIR1bits.SSPIF = 0;
  2067  0286  1283               	bcf	3,5	;RP0=0, select bank0
  2068  0287  1303               	bcf	3,6	;RP1=0, select bank0
  2069  0288  118C               	bcf	12,3	;volatile
  2070  0289                     l1726:	
  2071                           
  2072                           ;main_rasp.c: 179:     PIE1bits.SSPIE = 1;
  2073  0289  1683               	bsf	3,5	;RP0=1, select bank1
  2074  028A  1303               	bcf	3,6	;RP1=0, select bank1
  2075  028B  158C               	bsf	12,3	;volatile
  2076  028C                     l1728:	
  2077                           
  2078                           ;main_rasp.c: 180:     TRISAbits.TRISA5 = 1;
  2079  028C  1685               	bsf	5,5	;volatile
  2080  028D                     l1730:	
  2081                           
  2082                           ;main_rasp.c: 184:     initLCD();
  2083  028D  120A  118A  243A  120A  118A  	fcall	_initLCD
  2084  0292                     l1732:	
  2085                           
  2086                           ;main_rasp.c: 185:     clcLCD();
  2087  0292  120A  118A  2530  120A  118A  	fcall	_clcLCD
  2088  0297                     l1734:	
  2089                           
  2090                           ;main_rasp.c: 188:     setCursorLCD(1, 1);
  2091  0297  1283               	bcf	3,5	;RP0=0, select bank0
  2092  0298  1303               	bcf	3,6	;RP1=0, select bank0
  2093  0299  01A3               	clrf	setCursorLCD@x
  2094  029A  0AA3               	incf	setCursorLCD@x,f
  2095  029B  3001               	movlw	1
  2096  029C  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
  2097  02A1                     l1736:	
  2098                           
  2099                           ;main_rasp.c: 189:     writeStrLCD("P");
  2100  02A1  3020               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2101  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  2102  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  2103  02A4  00A2               	movwf	writeStrLCD@string
  2104  02A5  3080               	movlw	128
  2105  02A6  00A3               	movwf	writeStrLCD@string+1
  2106  02A7  120A  118A  23B8  120A  118A  	fcall	_writeStrLCD
  2107  02AC                     l1738:	
  2108                           
  2109                           ;main_rasp.c: 190:     setCursorLCD(1, 3);
  2110  02AC  3003               	movlw	3
  2111  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  2112  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  2113  02AF  00A9               	movwf	??_setup
  2114  02B0  0829               	movf	??_setup,w
  2115  02B1  00A3               	movwf	setCursorLCD@x
  2116  02B2  3001               	movlw	1
  2117  02B3  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
  2118  02B8                     l1740:	
  2119                           
  2120                           ;main_rasp.c: 191:     writeStrLCD("TEM");
  2121  02B8  3013               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2122  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  2123  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  2124  02BB  00A2               	movwf	writeStrLCD@string
  2125  02BC  3080               	movlw	128
  2126  02BD  00A3               	movwf	writeStrLCD@string+1
  2127  02BE  120A  118A  23B8  120A  118A  	fcall	_writeStrLCD
  2128  02C3                     l1742:	
  2129                           
  2130                           ;main_rasp.c: 192:     setCursorLCD(1, 7);
  2131  02C3  3007               	movlw	7
  2132  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  2133  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  2134  02C6  00A9               	movwf	??_setup
  2135  02C7  0829               	movf	??_setup,w
  2136  02C8  00A3               	movwf	setCursorLCD@x
  2137  02C9  3001               	movlw	1
  2138  02CA  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
  2139  02CF                     l1744:	
  2140                           
  2141                           ;main_rasp.c: 193:     writeStrLCD("HU");
  2142  02CF  301D               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2143  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  2144  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  2145  02D2  00A2               	movwf	writeStrLCD@string
  2146  02D3  3080               	movlw	128
  2147  02D4  00A3               	movwf	writeStrLCD@string+1
  2148  02D5  120A  118A  23B8  120A  118A  	fcall	_writeStrLCD
  2149  02DA                     l1746:	
  2150                           
  2151                           ;main_rasp.c: 194:     setCursorLCD(1, 10);
  2152  02DA  300A               	movlw	10
  2153  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  2154  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  2155  02DD  00A9               	movwf	??_setup
  2156  02DE  0829               	movf	??_setup,w
  2157  02DF  00A3               	movwf	setCursorLCD@x
  2158  02E0  3001               	movlw	1
  2159  02E1  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
  2160  02E6                     l1748:	
  2161                           
  2162                           ;main_rasp.c: 195:     writeStrLCD("SOL");
  2163  02E6  300F               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2164  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  2165  02E8  1303               	bcf	3,6	;RP1=0, select bank0
  2166  02E9  00A2               	movwf	writeStrLCD@string
  2167  02EA  3080               	movlw	128
  2168  02EB  00A3               	movwf	writeStrLCD@string+1
  2169  02EC  120A  118A  23B8  120A  118A  	fcall	_writeStrLCD
  2170  02F1                     l1750:	
  2171                           
  2172                           ;main_rasp.c: 196:     setCursorLCD(1, 14);
  2173  02F1  300E               	movlw	14
  2174  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  2175  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  2176  02F4  00A9               	movwf	??_setup
  2177  02F5  0829               	movf	??_setup,w
  2178  02F6  00A3               	movwf	setCursorLCD@x
  2179  02F7  3001               	movlw	1
  2180  02F8  120A  118A  24C6  120A  118A  	fcall	_setCursorLCD
  2181  02FD                     l1752:	
  2182                           
  2183                           ;main_rasp.c: 197:     writeStrLCD("CA");
  2184  02FD  301A               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2185  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  2186  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  2187  0300  00A2               	movwf	writeStrLCD@string
  2188  0301  3080               	movlw	128
  2189  0302  00A3               	movwf	writeStrLCD@string+1
  2190  0303  120A  118A  23B8  120A  118A  	fcall	_writeStrLCD
  2191  0308                     l144:	
  2192  0308  0008               	return
  2193  0309                     __end_of_setup:	
  2194                           
  2195                           	psect	text6
  2196  03B8                     __ptext6:	
  2197 ;; *************** function _writeStrLCD *****************
  2198 ;; Defined at:
  2199 ;;		line 30 in file "LCD.c"
  2200 ;; Parameters:    Size  Location     Type
  2201 ;;  string          2    2[BANK0 ] PTR unsigned char 
  2202 ;;		 -> writeIntLCD@buffer(4), STR_9(3), STR_8(4), STR_7(3), 
  2203 ;;		 -> STR_6(4), STR_5(2), STR_4(4), STR_3(4), 
  2204 ;;		 -> STR_2(4), STR_1(4), 
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;  cont            2    7[BANK0 ] int 
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  1    wreg      void 
  2209 ;; Registers used:
  2210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2216 ;;      Params:         0       2       0       0       0
  2217 ;;      Locals:         0       2       0       0       0
  2218 ;;      Temps:          0       3       0       0       0
  2219 ;;      Totals:         0       7       0       0       0
  2220 ;;Total ram usage:        7 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:    4
  2223 ;; This function calls:
  2224 ;;		_writeCharLCD
  2225 ;; This function is called by:
  2226 ;;		_main
  2227 ;;		_setup
  2228 ;;		_writeIntLCD
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           
  2233                           ;psect for function _writeStrLCD
  2234  03B8                     _writeStrLCD:	
  2235  03B8                     l1598:	
  2236                           ;incstack = 0
  2237                           ; Regs used in _writeStrLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2238                           
  2239                           
  2240                           ;LCD.c: 31:  int cont;;LCD.c: 32:  for(cont=0;string[cont]!='\0';cont++){
  2241  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  2242  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  2243  03BA  01A7               	clrf	writeStrLCD@cont
  2244  03BB  01A8               	clrf	writeStrLCD@cont+1
  2245  03BC  2BE1               	goto	l1604
  2246  03BD                     l1600:	
  2247                           
  2248                           ;LCD.c: 33:         writeCharLCD(string[cont]);
  2249  03BD  0827               	movf	writeStrLCD@cont,w
  2250  03BE  0722               	addwf	writeStrLCD@string,w
  2251  03BF  00A5               	movwf	??_writeStrLCD+1
  2252  03C0  0823               	movf	writeStrLCD@string+1,w
  2253  03C1  00A4               	movwf	??_writeStrLCD
  2254  03C2  1803               	skipnc
  2255  03C3  0AA4               	incf	??_writeStrLCD,f
  2256  03C4  1FA7               	btfss	writeStrLCD@cont,7
  2257  03C5  2BC7               	goto	u950
  2258  03C6  03A4               	decf	??_writeStrLCD,f
  2259  03C7                     u950:	
  2260  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  2261  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  2262  03C9  0824               	movf	??_writeStrLCD,w
  2263  03CA  00A6               	movwf	??_writeStrLCD+2
  2264  03CB  0826               	movf	??_writeStrLCD+2,w
  2265  03CC  00FF               	movwf	btemp+1
  2266  03CD  0825               	movf	??_writeStrLCD+1,w
  2267  03CE  0084               	movwf	4
  2268  03CF  120A  118A  2475  120A  118A  	fcall	stringtab
  2269  03D4  120A  118A  250D  120A  118A  	fcall	_writeCharLCD
  2270  03D9                     l1602:	
  2271                           
  2272                           ;LCD.c: 34:     }
  2273  03D9  3001               	movlw	1
  2274  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  2275  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  2276  03DC  07A7               	addwf	writeStrLCD@cont,f
  2277  03DD  1803               	skipnc
  2278  03DE  0AA8               	incf	writeStrLCD@cont+1,f
  2279  03DF  3000               	movlw	0
  2280  03E0  07A8               	addwf	writeStrLCD@cont+1,f
  2281  03E1                     l1604:	
  2282  03E1  0827               	movf	writeStrLCD@cont,w
  2283  03E2  0722               	addwf	writeStrLCD@string,w
  2284  03E3  00A5               	movwf	??_writeStrLCD+1
  2285  03E4  0823               	movf	writeStrLCD@string+1,w
  2286  03E5  00A4               	movwf	??_writeStrLCD
  2287  03E6  1803               	skipnc
  2288  03E7  0AA4               	incf	??_writeStrLCD,f
  2289  03E8  1FA7               	btfss	writeStrLCD@cont,7
  2290  03E9  2BEB               	goto	u960
  2291  03EA  03A4               	decf	??_writeStrLCD,f
  2292  03EB                     u960:	
  2293  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  2294  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  2295  03ED  0824               	movf	??_writeStrLCD,w
  2296  03EE  00A6               	movwf	??_writeStrLCD+2
  2297  03EF  0826               	movf	??_writeStrLCD+2,w
  2298  03F0  00FF               	movwf	btemp+1
  2299  03F1  0825               	movf	??_writeStrLCD+1,w
  2300  03F2  0084               	movwf	4
  2301  03F3  120A  118A  2475  120A  118A  	fcall	stringtab
  2302  03F8  3A00               	xorlw	0
  2303  03F9  1D03               	skipz
  2304  03FA  2BFC               	goto	u971
  2305  03FB  2BFD               	goto	u970
  2306  03FC                     u971:	
  2307  03FC  2BBD               	goto	l1600
  2308  03FD                     u970:	
  2309  03FD                     l174:	
  2310  03FD  0008               	return
  2311  03FE                     __end_of_writeStrLCD:	
  2312                           
  2313                           	psect	text7
  2314  050D                     __ptext7:	
  2315 ;; *************** function _writeCharLCD *****************
  2316 ;; Defined at:
  2317 ;;		line 37 in file "LCD.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;  character       1    wreg     unsigned char 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  character       1    1[BANK0 ] unsigned char 
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  1    wreg      void 
  2324 ;; Registers used:
  2325 ;;		wreg
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2331 ;;      Params:         0       0       0       0       0
  2332 ;;      Locals:         0       1       0       0       0
  2333 ;;      Temps:          0       1       0       0       0
  2334 ;;      Totals:         0       2       0       0       0
  2335 ;;Total ram usage:        2 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    3
  2338 ;; This function calls:
  2339 ;;		Nothing
  2340 ;; This function is called by:
  2341 ;;		_writeStrLCD
  2342 ;;		_writeFloat
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           
  2347                           ;psect for function _writeCharLCD
  2348  050D                     _writeCharLCD:	
  2349                           
  2350                           ;incstack = 0
  2351                           ; Regs used in _writeCharLCD: [wreg]
  2352                           ;writeCharLCD@character stored from wreg
  2353  050D  1283               	bcf	3,5	;RP0=0, select bank0
  2354  050E  1303               	bcf	3,6	;RP1=0, select bank0
  2355  050F  00A1               	movwf	writeCharLCD@character
  2356  0510                     l1556:	
  2357                           
  2358                           ;LCD.c: 38:    RD0 = 1;
  2359  0510  1408               	bsf	8,0	;volatile
  2360  0511                     l1558:	
  2361                           
  2362                           ;LCD.c: 39:    PORTB = character;
  2363  0511  0821               	movf	writeCharLCD@character,w
  2364  0512  0086               	movwf	6	;volatile
  2365  0513                     l1560:	
  2366                           
  2367                           ;LCD.c: 40:    RD1 = 1;
  2368  0513  1488               	bsf	8,1	;volatile
  2369                           
  2370                           ;LCD.c: 41:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2371  0514  300C               	movlw	12
  2372  0515  1283               	bcf	3,5	;RP0=0, select bank0
  2373  0516  1303               	bcf	3,6	;RP1=0, select bank0
  2374  0517  00A0               	movwf	??_writeCharLCD
  2375  0518                     u1227:	
  2376  0518  0BA0               	decfsz	??_writeCharLCD,f
  2377  0519  2D18               	goto	u1227
  2378  051A  0000               	nop
  2379  051B                     l1562:	
  2380                           
  2381                           ;LCD.c: 42:    RD1 = 0;
  2382  051B  1283               	bcf	3,5	;RP0=0, select bank0
  2383  051C  1303               	bcf	3,6	;RP1=0, select bank0
  2384  051D  1088               	bcf	8,1	;volatile
  2385  051E                     l177:	
  2386  051E  0008               	return
  2387  051F                     __end_of_writeCharLCD:	
  2388                           
  2389                           	psect	text8
  2390  04E0                     __ptext8:	
  2391 ;; *************** function _spiInit *****************
  2392 ;; Defined at:
  2393 ;;		line 15 in file "SPI.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;  sType           1    wreg     enum E1293
  2396 ;;  sDataSample     1    0[BANK0 ] enum E1301
  2397 ;;  sClockIdle      1    1[BANK0 ] enum E1305
  2398 ;;  sTransmitEdg    1    2[BANK0 ] enum E1309
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  sType           1    3[BANK0 ] enum E1293
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      void 
  2403 ;; Registers used:
  2404 ;;		wreg, status,2, status,0
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2410 ;;      Params:         0       3       0       0       0
  2411 ;;      Locals:         0       1       0       0       0
  2412 ;;      Temps:          0       0       0       0       0
  2413 ;;      Totals:         0       4       0       0       0
  2414 ;;Total ram usage:        4 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    3
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_setup
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           
  2425                           ;psect for function _spiInit
  2426  04E0                     _spiInit:	
  2427                           
  2428                           ;incstack = 0
  2429                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2430                           ;spiInit@sType stored from wreg
  2431  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2432  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2433  04E2  00A3               	movwf	spiInit@sType
  2434  04E3                     l1606:	
  2435                           
  2436                           ;SPI.c: 15: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 16: {;SPI.c: 18:     if(sType & 0b00000
      +                          100)
  2437  04E3  1D23               	btfss	spiInit@sType,2
  2438  04E4  2CE6               	goto	u981
  2439  04E5  2CE7               	goto	u980
  2440  04E6                     u981:	
  2441  04E6  2CEC               	goto	l1610
  2442  04E7                     u980:	
  2443  04E7                     l1608:	
  2444                           
  2445                           ;SPI.c: 19:     {;SPI.c: 20:         SSPSTAT = sTransmitEdge;
  2446  04E7  0822               	movf	spiInit@sTransmitEdge,w
  2447  04E8  1683               	bsf	3,5	;RP0=1, select bank1
  2448  04E9  1303               	bcf	3,6	;RP1=0, select bank1
  2449  04EA  0094               	movwf	20	;volatile
  2450                           
  2451                           ;SPI.c: 22:     }
  2452  04EB  2CF1               	goto	l204
  2453  04EC                     l1610:	
  2454                           
  2455                           ;SPI.c: 24:     {;SPI.c: 25:         SSPSTAT = sDataSample | sTransmitEdge;
  2456  04EC  0820               	movf	spiInit@sDataSample,w
  2457  04ED  0422               	iorwf	spiInit@sTransmitEdge,w
  2458  04EE  1683               	bsf	3,5	;RP0=1, select bank1
  2459  04EF  1303               	bcf	3,6	;RP1=0, select bank1
  2460  04F0  0094               	movwf	20	;volatile
  2461  04F1                     l204:	
  2462                           ;SPI.c: 27:     }
  2463                           
  2464                           
  2465                           ;SPI.c: 29:     SSPCON = sType | sClockIdle;
  2466  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  2467  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  2468  04F3  0823               	movf	spiInit@sType,w
  2469  04F4  0421               	iorwf	spiInit@sClockIdle,w
  2470  04F5  0094               	movwf	20	;volatile
  2471  04F6                     l205:	
  2472  04F6  0008               	return
  2473  04F7                     __end_of_spiInit:	
  2474                           
  2475                           	psect	text9
  2476  04C6                     __ptext9:	
  2477 ;; *************** function _setCursorLCD *****************
  2478 ;; Defined at:
  2479 ;;		line 17 in file "LCD.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  y               1    wreg     unsigned char 
  2482 ;;  x               1    3[BANK0 ] unsigned char 
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  y               1    5[BANK0 ] unsigned char 
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  1    wreg      void 
  2487 ;; Registers used:
  2488 ;;		wreg, status,2, status,0, pclath, cstack
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2494 ;;      Params:         0       1       0       0       0
  2495 ;;      Locals:         0       1       0       0       0
  2496 ;;      Temps:          0       1       0       0       0
  2497 ;;      Totals:         0       3       0       0       0
  2498 ;;Total ram usage:        3 bytes
  2499 ;; Hardware stack levels used:    1
  2500 ;; Hardware stack levels required when called:    4
  2501 ;; This function calls:
  2502 ;;		_cmdLCD
  2503 ;; This function is called by:
  2504 ;;		_main
  2505 ;;		_setup
  2506 ;;		_writeFloat
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           
  2511                           ;psect for function _setCursorLCD
  2512  04C6                     _setCursorLCD:	
  2513                           
  2514                           ;incstack = 0
  2515                           ; Regs used in _setCursorLCD: [wreg+status,2+status,0+pclath+cstack]
  2516                           ;setCursorLCD@y stored from wreg
  2517  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  2518  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  2519  04C8  00A5               	movwf	setCursorLCD@y
  2520  04C9                     l1590:	
  2521                           
  2522                           ;LCD.c: 18:     if(y == 1){
  2523  04C9  0325               	decf	setCursorLCD@y,w
  2524  04CA  1D03               	btfss	3,2
  2525  04CB  2CCD               	goto	u941
  2526  04CC  2CCE               	goto	u940
  2527  04CD                     u941:	
  2528  04CD  2CD4               	goto	l1594
  2529  04CE                     u940:	
  2530  04CE                     l1592:	
  2531                           
  2532                           ;LCD.c: 19:         cursor = 0x80 + x - 1;
  2533  04CE  0823               	movf	setCursorLCD@x,w
  2534  04CF  3E7F               	addlw	127
  2535  04D0  00A4               	movwf	??_setCursorLCD
  2536  04D1  0824               	movf	??_setCursorLCD,w
  2537  04D2  00F8               	movwf	_cursor
  2538                           
  2539                           ;LCD.c: 20:     }else{
  2540  04D3  2CD9               	goto	l1596
  2541  04D4                     l1594:	
  2542                           
  2543                           ;LCD.c: 21:         cursor = 0xC0 + x - 1;
  2544  04D4  0823               	movf	setCursorLCD@x,w
  2545  04D5  3EBF               	addlw	191
  2546  04D6  00A4               	movwf	??_setCursorLCD
  2547  04D7  0824               	movf	??_setCursorLCD,w
  2548  04D8  00F8               	movwf	_cursor
  2549  04D9                     l1596:	
  2550                           
  2551                           ;LCD.c: 23:     cmdLCD(cursor);
  2552  04D9  0878               	movf	_cursor,w
  2553  04DA  120A  118A  24F7  120A  118A  	fcall	_cmdLCD
  2554  04DF                     l165:	
  2555  04DF  0008               	return
  2556  04E0                     __end_of_setCursorLCD:	
  2557                           
  2558                           	psect	text10
  2559  043A                     __ptext10:	
  2560 ;; *************** function _initLCD *****************
  2561 ;; Defined at:
  2562 ;;		line 45 in file "LCD.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;		None
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;		None
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		wreg, status,2, status,0, pclath, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2576 ;;      Params:         0       0       0       0       0
  2577 ;;      Locals:         0       0       0       0       0
  2578 ;;      Temps:          0       2       0       0       0
  2579 ;;      Totals:         0       2       0       0       0
  2580 ;;Total ram usage:        2 bytes
  2581 ;; Hardware stack levels used:    1
  2582 ;; Hardware stack levels required when called:    4
  2583 ;; This function calls:
  2584 ;;		_cmdLCD
  2585 ;; This function is called by:
  2586 ;;		_setup
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           
  2591                           ;psect for function _initLCD
  2592  043A                     _initLCD:	
  2593  043A                     l1612:	
  2594                           ;incstack = 0
  2595                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  2596                           
  2597                           
  2598                           ;LCD.c: 46:      _delay((unsigned long)((15)*(4000000/4000.0)));
  2599  043A  3014               	movlw	20
  2600  043B  1283               	bcf	3,5	;RP0=0, select bank0
  2601  043C  1303               	bcf	3,6	;RP1=0, select bank0
  2602  043D  00A4               	movwf	??_initLCD+1
  2603  043E  3079               	movlw	121
  2604  043F  00A3               	movwf	??_initLCD
  2605  0440                     u1237:	
  2606  0440  0BA3               	decfsz	??_initLCD,f
  2607  0441  2C40               	goto	u1237
  2608  0442  0BA4               	decfsz	??_initLCD+1,f
  2609  0443  2C40               	goto	u1237
  2610  0444                     l1614:	
  2611                           
  2612                           ;LCD.c: 47:     cmdLCD(0x030);
  2613  0444  3030               	movlw	48
  2614  0445  120A  118A  24F7  120A  118A  	fcall	_cmdLCD
  2615  044A                     l1616:	
  2616                           
  2617                           ;LCD.c: 48:     cmdLCD(0x030);
  2618  044A  3030               	movlw	48
  2619  044B  120A  118A  24F7  120A  118A  	fcall	_cmdLCD
  2620  0450                     l1618:	
  2621                           
  2622                           ;LCD.c: 49:     cmdLCD(0x030);
  2623  0450  3030               	movlw	48
  2624  0451  120A  118A  24F7  120A  118A  	fcall	_cmdLCD
  2625  0456                     l1620:	
  2626                           
  2627                           ;LCD.c: 51:     cmdLCD(0x38);
  2628  0456  3038               	movlw	56
  2629  0457  120A  118A  24F7  120A  118A  	fcall	_cmdLCD
  2630  045C                     l1622:	
  2631                           
  2632                           ;LCD.c: 52:     cmdLCD(0x10);
  2633  045C  3010               	movlw	16
  2634  045D  120A  118A  24F7  120A  118A  	fcall	_cmdLCD
  2635  0462                     l1624:	
  2636                           
  2637                           ;LCD.c: 53:     cmdLCD(0x01);
  2638  0462  3001               	movlw	1
  2639  0463  120A  118A  24F7  120A  118A  	fcall	_cmdLCD
  2640  0468                     l1626:	
  2641                           
  2642                           ;LCD.c: 54:     cmdLCD(0x06);
  2643  0468  3006               	movlw	6
  2644  0469  120A  118A  24F7  120A  118A  	fcall	_cmdLCD
  2645  046E                     l1628:	
  2646                           
  2647                           ;LCD.c: 55:     cmdLCD(0x0E);
  2648  046E  300E               	movlw	14
  2649  046F  120A  118A  24F7  120A  118A  	fcall	_cmdLCD
  2650  0474                     l180:	
  2651  0474  0008               	return
  2652  0475                     __end_of_initLCD:	
  2653                           
  2654                           	psect	text11
  2655  0530                     __ptext11:	
  2656 ;; *************** function _clcLCD *****************
  2657 ;; Defined at:
  2658 ;;		line 26 in file "LCD.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;		None
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;		None
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  1    wreg      void 
  2665 ;; Registers used:
  2666 ;;		wreg, status,2, status,0, pclath, cstack
  2667 ;; Tracked objects:
  2668 ;;		On entry : 0/0
  2669 ;;		On exit  : 0/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2672 ;;      Params:         0       0       0       0       0
  2673 ;;      Locals:         0       0       0       0       0
  2674 ;;      Temps:          0       0       0       0       0
  2675 ;;      Totals:         0       0       0       0       0
  2676 ;;Total ram usage:        0 bytes
  2677 ;; Hardware stack levels used:    1
  2678 ;; Hardware stack levels required when called:    4
  2679 ;; This function calls:
  2680 ;;		_cmdLCD
  2681 ;; This function is called by:
  2682 ;;		_setup
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686                           
  2687                           ;psect for function _clcLCD
  2688  0530                     _clcLCD:	
  2689  0530                     l1630:	
  2690                           ;incstack = 0
  2691                           ; Regs used in _clcLCD: [wreg+status,2+status,0+pclath+cstack]
  2692                           
  2693                           
  2694                           ;LCD.c: 27:     cmdLCD(0x01);
  2695  0530  3001               	movlw	1
  2696  0531  120A  118A  24F7  120A  118A  	fcall	_cmdLCD
  2697  0536                     l168:	
  2698  0536  0008               	return
  2699  0537                     __end_of_clcLCD:	
  2700                           
  2701                           	psect	text12
  2702  04F7                     __ptext12:	
  2703 ;; *************** function _cmdLCD *****************
  2704 ;; Defined at:
  2705 ;;		line 58 in file "LCD.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;  cmd             1    wreg     unsigned char 
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;  cmd             1    2[BANK0 ] unsigned char 
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      void 
  2712 ;; Registers used:
  2713 ;;		wreg
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2719 ;;      Params:         0       0       0       0       0
  2720 ;;      Locals:         0       1       0       0       0
  2721 ;;      Temps:          0       2       0       0       0
  2722 ;;      Totals:         0       3       0       0       0
  2723 ;;Total ram usage:        3 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    3
  2726 ;; This function calls:
  2727 ;;		Nothing
  2728 ;; This function is called by:
  2729 ;;		_setCursorLCD
  2730 ;;		_clcLCD
  2731 ;;		_initLCD
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           
  2736                           ;psect for function _cmdLCD
  2737  04F7                     _cmdLCD:	
  2738                           
  2739                           ;incstack = 0
  2740                           ; Regs used in _cmdLCD: [wreg]
  2741                           ;cmdLCD@cmd stored from wreg
  2742  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  2743  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  2744  04F9  00A2               	movwf	cmdLCD@cmd
  2745  04FA                     l1548:	
  2746                           
  2747                           ;LCD.c: 59:     RD0 = 0;
  2748  04FA  1008               	bcf	8,0	;volatile
  2749  04FB                     l1550:	
  2750                           
  2751                           ;LCD.c: 60:  PORTB = cmd;
  2752  04FB  0822               	movf	cmdLCD@cmd,w
  2753  04FC  0086               	movwf	6	;volatile
  2754  04FD                     l1552:	
  2755                           
  2756                           ;LCD.c: 61:  RD1 = 1;
  2757  04FD  1488               	bsf	8,1	;volatile
  2758                           
  2759                           ;LCD.c: 62:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2760  04FE  3006               	movlw	6
  2761  04FF  1283               	bcf	3,5	;RP0=0, select bank0
  2762  0500  1303               	bcf	3,6	;RP1=0, select bank0
  2763  0501  00A1               	movwf	??_cmdLCD+1
  2764  0502  302F               	movlw	47
  2765  0503  00A0               	movwf	??_cmdLCD
  2766  0504                     u1247:	
  2767  0504  0BA0               	decfsz	??_cmdLCD,f
  2768  0505  2D04               	goto	u1247
  2769  0506  0BA1               	decfsz	??_cmdLCD+1,f
  2770  0507  2D04               	goto	u1247
  2771  0508  2D09               	nop2
  2772  0509                     l1554:	
  2773                           
  2774                           ;LCD.c: 63:     RD1 = 0;
  2775  0509  1283               	bcf	3,5	;RP0=0, select bank0
  2776  050A  1303               	bcf	3,6	;RP1=0, select bank0
  2777  050B  1088               	bcf	8,1	;volatile
  2778  050C                     l183:	
  2779  050C  0008               	return
  2780  050D                     __end_of_cmdLCD:	
  2781                           
  2782                           	psect	text13
  2783  0309                     __ptext13:	
  2784 ;; *************** function _isr *****************
  2785 ;; Defined at:
  2786 ;;		line 48 in file "main_rasp.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;		None
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;		None
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  1    wreg      void 
  2793 ;; Registers used:
  2794 ;;		wreg, status,2, status,0, pclath, cstack
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2800 ;;      Params:         0       0       0       0       0
  2801 ;;      Locals:         0       0       0       0       0
  2802 ;;      Temps:          4       0       0       0       0
  2803 ;;      Totals:         4       0       0       0       0
  2804 ;;Total ram usage:        4 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    2
  2807 ;; This function calls:
  2808 ;;		_spiRead
  2809 ;;		_spiWrite
  2810 ;; This function is called by:
  2811 ;;		Interrupt level 1
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           
  2816                           ;psect for function _isr
  2817  0309                     _isr:	
  2818  0309                     i1l1438:	
  2819                           
  2820                           ;main_rasp.c: 49:    if(PIR1bits.SSPIF == 1){
  2821  0309  1283               	bcf	3,5	;RP0=0, select bank0
  2822  030A  1303               	bcf	3,6	;RP1=0, select bank0
  2823  030B  1D8C               	btfss	12,3	;volatile
  2824  030C  2B0E               	goto	u70_21
  2825  030D  2B0F               	goto	u70_20
  2826  030E                     u70_21:	
  2827  030E  2B6B               	goto	i1l103
  2828  030F                     u70_20:	
  2829  030F                     i1l1440:	
  2830                           
  2831                           ;main_rasp.c: 50:         escoger = spiRead();
  2832  030F  120A  118A  251F  120A  118A  	fcall	_spiRead
  2833  0314  00F1               	movwf	??_isr
  2834  0315  01F2               	clrf	??_isr+1
  2835  0316  0871               	movf	??_isr,w
  2836  0317  00F5               	movwf	_escoger
  2837  0318  0872               	movf	??_isr+1,w
  2838  0319  00F6               	movwf	_escoger+1
  2839  031A                     i1l1442:	
  2840                           
  2841                           ;main_rasp.c: 51:         if (escoger == 0 ){
  2842  031A  0875               	movf	_escoger,w
  2843  031B  0476               	iorwf	_escoger+1,w
  2844  031C  1D03               	btfss	3,2
  2845  031D  2B1F               	goto	u71_21
  2846  031E  2B20               	goto	u71_20
  2847  031F                     u71_21:	
  2848  031F  2B29               	goto	i1l1446
  2849  0320                     u71_20:	
  2850  0320                     i1l1444:	
  2851                           
  2852                           ;main_rasp.c: 52:             spiWrite(prox);
  2853  0320  1283               	bcf	3,5	;RP0=0, select bank0
  2854  0321  1303               	bcf	3,6	;RP1=0, select bank0
  2855  0322  0849               	movf	_prox,w
  2856  0323  120A  118A  253E  120A  118A  	fcall	_spiWrite
  2857                           
  2858                           ;main_rasp.c: 53:         }
  2859  0328  2B68               	goto	i1l1462
  2860  0329                     i1l1446:	
  2861  0329  0375               	decf	_escoger,w
  2862  032A  0476               	iorwf	_escoger+1,w
  2863  032B  1D03               	btfss	3,2
  2864  032C  2B2E               	goto	u72_21
  2865  032D  2B2F               	goto	u72_20
  2866  032E                     u72_21:	
  2867  032E  2B38               	goto	i1l1450
  2868  032F                     u72_20:	
  2869  032F                     i1l1448:	
  2870                           
  2871                           ;main_rasp.c: 55:             spiWrite(temp);
  2872  032F  1283               	bcf	3,5	;RP0=0, select bank0
  2873  0330  1303               	bcf	3,6	;RP1=0, select bank0
  2874  0331  084D               	movf	_temp,w
  2875  0332  120A  118A  253E  120A  118A  	fcall	_spiWrite
  2876                           
  2877                           ;main_rasp.c: 56:         }
  2878  0337  2B68               	goto	i1l1462
  2879  0338                     i1l1450:	
  2880  0338  3002               	movlw	2
  2881  0339  0675               	xorwf	_escoger,w
  2882  033A  0476               	iorwf	_escoger+1,w
  2883  033B  1D03               	btfss	3,2
  2884  033C  2B3E               	goto	u73_21
  2885  033D  2B3F               	goto	u73_20
  2886  033E                     u73_21:	
  2887  033E  2B48               	goto	i1l1454
  2888  033F                     u73_20:	
  2889  033F                     i1l1452:	
  2890                           
  2891                           ;main_rasp.c: 58:             spiWrite(caudal);
  2892  033F  1283               	bcf	3,5	;RP0=0, select bank0
  2893  0340  1303               	bcf	3,6	;RP1=0, select bank0
  2894  0341  084B               	movf	_caudal,w
  2895  0342  120A  118A  253E  120A  118A  	fcall	_spiWrite
  2896                           
  2897                           ;main_rasp.c: 59:         }
  2898  0347  2B68               	goto	i1l1462
  2899  0348                     i1l1454:	
  2900  0348  3003               	movlw	3
  2901  0349  0675               	xorwf	_escoger,w
  2902  034A  0476               	iorwf	_escoger+1,w
  2903  034B  1D03               	btfss	3,2
  2904  034C  2B4E               	goto	u74_21
  2905  034D  2B4F               	goto	u74_20
  2906  034E                     u74_21:	
  2907  034E  2B58               	goto	i1l1458
  2908  034F                     u74_20:	
  2909  034F                     i1l1456:	
  2910                           
  2911                           ;main_rasp.c: 61:             spiWrite(luz);
  2912  034F  1283               	bcf	3,5	;RP0=0, select bank0
  2913  0350  1303               	bcf	3,6	;RP1=0, select bank0
  2914  0351  0847               	movf	_luz,w
  2915  0352  120A  118A  253E  120A  118A  	fcall	_spiWrite
  2916                           
  2917                           ;main_rasp.c: 62:         }
  2918  0357  2B68               	goto	i1l1462
  2919  0358                     i1l1458:	
  2920  0358  3004               	movlw	4
  2921  0359  0675               	xorwf	_escoger,w
  2922  035A  0476               	iorwf	_escoger+1,w
  2923  035B  1D03               	btfss	3,2
  2924  035C  2B5E               	goto	u75_21
  2925  035D  2B5F               	goto	u75_20
  2926  035E                     u75_21:	
  2927  035E  2B68               	goto	i1l97
  2928  035F                     u75_20:	
  2929  035F                     i1l1460:	
  2930                           
  2931                           ;main_rasp.c: 64:             spiWrite(hum);
  2932  035F  1283               	bcf	3,5	;RP0=0, select bank0
  2933  0360  1303               	bcf	3,6	;RP1=0, select bank0
  2934  0361  0845               	movf	_hum,w
  2935  0362  120A  118A  253E  120A  118A  	fcall	_spiWrite
  2936  0367  2B68               	goto	i1l1462
  2937  0368                     i1l97:	
  2938  0368                     i1l1462:	
  2939                           
  2940                           ;main_rasp.c: 66:         SSPIF = 0;
  2941  0368  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0369  1303               	bcf	3,6	;RP1=0, select bank0
  2943  036A  118C               	bcf	12,3	;volatile
  2944  036B                     i1l103:	
  2945  036B  0874               	movf	??_isr+3,w
  2946  036C  008A               	movwf	10
  2947  036D  0E73               	swapf	(??_isr+2)^(0+4294967168),w
  2948  036E  0083               	movwf	3
  2949  036F  0EFE               	swapf	btemp,f
  2950  0370  0E7E               	swapf	btemp,w
  2951  0371  0009               	retfie
  2952  0372                     __end_of_isr:	
  2953                           
  2954                           	psect	intentry
  2955  0004                     __pintentry:	
  2956                           ;incstack = 0
  2957                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2958                           
  2959  0004                     interrupt_function:	
  2960  007E                     saved_w	set	btemp
  2961  0004  00FE               	movwf	btemp
  2962  0005  0E03               	swapf	3,w
  2963  0006  00F3               	movwf	??_isr+2
  2964  0007  080A               	movf	10,w
  2965  0008  00F4               	movwf	??_isr+3
  2966  0009  120A  118A  2B09   	ljmp	_isr
  2967                           
  2968                           	psect	text14
  2969  053E                     __ptext14:	
  2970 ;; *************** function _spiWrite *****************
  2971 ;; Defined at:
  2972 ;;		line 37 in file "SPI.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;  dat             1    wreg     unsigned char 
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  dat             1    0[COMMON] unsigned char 
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    wreg      void 
  2979 ;; Registers used:
  2980 ;;		wreg
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2986 ;;      Params:         0       0       0       0       0
  2987 ;;      Locals:         1       0       0       0       0
  2988 ;;      Temps:          0       0       0       0       0
  2989 ;;      Totals:         1       0       0       0       0
  2990 ;;Total ram usage:        1 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_isr
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           
  3000                           ;psect for function _spiWrite
  3001  053E                     _spiWrite:	
  3002                           
  3003                           ;incstack = 0
  3004                           ; Regs used in _spiWrite: [wreg]
  3005                           ;spiWrite@dat stored from wreg
  3006  053E  00F0               	movwf	spiWrite@dat
  3007  053F                     i1l1374:	
  3008                           
  3009                           ;SPI.c: 37: void spiWrite(char dat);SPI.c: 38: {;SPI.c: 39:     SSPBUF = dat;
  3010  053F  0870               	movf	spiWrite@dat,w
  3011  0540  1283               	bcf	3,5	;RP0=0, select bank0
  3012  0541  1303               	bcf	3,6	;RP1=0, select bank0
  3013  0542  0093               	movwf	19	;volatile
  3014  0543                     i1l214:	
  3015  0543  0008               	return
  3016  0544                     __end_of_spiWrite:	
  3017                           
  3018                           	psect	text15
  3019  051F                     __ptext15:	
  3020 ;; *************** function _spiRead *****************
  3021 ;; Defined at:
  3022 ;;		line 50 in file "SPI.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;		None
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;		None
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      unsigned char 
  3029 ;; Registers used:
  3030 ;;		wreg, status,2, status,0, pclath, cstack
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3036 ;;      Params:         0       0       0       0       0
  3037 ;;      Locals:         0       0       0       0       0
  3038 ;;      Temps:          0       0       0       0       0
  3039 ;;      Totals:         0       0       0       0       0
  3040 ;;Total ram usage:        0 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:    1
  3043 ;; This function calls:
  3044 ;;		_spiReceiveWait
  3045 ;; This function is called by:
  3046 ;;		_isr
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           
  3051                           ;psect for function _spiRead
  3052  051F                     _spiRead:	
  3053  051F                     i1l1368:	
  3054                           ;incstack = 0
  3055                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  3056                           
  3057                           
  3058                           ;SPI.c: 52:     spiReceiveWait();
  3059  051F  120A  118A  2537  120A  118A  	fcall	_spiReceiveWait
  3060  0524                     i1l1370:	
  3061                           
  3062                           ;SPI.c: 53:     return(SSPBUF);
  3063  0524  1283               	bcf	3,5	;RP0=0, select bank0
  3064  0525  1303               	bcf	3,6	;RP1=0, select bank0
  3065  0526  0813               	movf	19,w	;volatile
  3066  0527                     i1l222:	
  3067  0527  0008               	return
  3068  0528                     __end_of_spiRead:	
  3069                           
  3070                           	psect	text16
  3071  0537                     __ptext16:	
  3072 ;; *************** function _spiReceiveWait *****************
  3073 ;; Defined at:
  3074 ;;		line 32 in file "SPI.c"
  3075 ;; Parameters:    Size  Location     Type
  3076 ;;		None
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;		None
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  1    wreg      void 
  3081 ;; Registers used:
  3082 ;;		None
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3088 ;;      Params:         0       0       0       0       0
  3089 ;;      Locals:         0       0       0       0       0
  3090 ;;      Temps:          0       0       0       0       0
  3091 ;;      Totals:         0       0       0       0       0
  3092 ;;Total ram usage:        0 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; This function calls:
  3095 ;;		Nothing
  3096 ;; This function is called by:
  3097 ;;		_spiRead
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           
  3102                           ;psect for function _spiReceiveWait
  3103  0537                     _spiReceiveWait:	
  3104  0537                     i1l1366:	
  3105                           ;incstack = 0
  3106                           ; Regs used in _spiReceiveWait: []
  3107                           
  3108  0537                     i1l208:	
  3109                           ;SPI.c: 34:     while ( !SSPSTATbits.BF );
  3110                           
  3111  0537  1683               	bsf	3,5	;RP0=1, select bank1
  3112  0538  1303               	bcf	3,6	;RP1=0, select bank1
  3113  0539  1C14               	btfss	20,0	;volatile
  3114  053A  2D3C               	goto	u69_21
  3115  053B  2D3D               	goto	u69_20
  3116  053C                     u69_21:	
  3117  053C  2D37               	goto	i1l208
  3118  053D                     u69_20:	
  3119  053D                     i1l211:	
  3120  053D  0008               	return
  3121  053E                     __end_of_spiReceiveWait:	
  3122  007E                     btemp	set	126	;btemp
  3123  007E                     wtemp0	set	126


Data Sizes:
    Strings     23
    Constant    10
    Data        0
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80     37      55
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_10(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 4
		 -> writeIntLCD@buffer(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    writeStrLCD@string	PTR unsigned char  size(2) Largest target is 4
		 -> writeIntLCD@buffer(BANK0[4]), STR_9(CODE[3]), STR_8(CODE[4]), STR_7(CODE[3]), 
		 -> STR_6(CODE[4]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_spiWrite

Critical Paths under _main in BANK0

    _main->_writeIntLCD
    _writeIntLCD->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_writeStrLCD
    _writeStrLCD->_writeCharLCD
    _setCursorLCD->_cmdLCD
    _initLCD->_cmdLCD
    _clcLCD->_cmdLCD

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8686
                                             35 BANK0      2     2      0
                       _setCursorLCD
                              _setup
                        _writeIntLCD
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (1) _writeIntLCD                                          8     8      0    2738
                                             27 BANK0      8     8      0
                            _sprintf
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1554
                                             14 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0    3233
                                              9 BANK0      1     1      0
                             _clcLCD
                            _initLCD
                       _setCursorLCD
                            _spiInit
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (1) _writeStrLCD                                          7     5      2    1061
                                              2 BANK0      7     5      2
                       _writeCharLCD
 ---------------------------------------------------------------------------------
 (2) _writeCharLCD                                         2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     456
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _setCursorLCD                                         3     2      1    1654
                                              3 BANK0      3     2      1
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              2     2      0      31
                                              3 BANK0      2     2      0
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (2) _clcLCD                                               0     0      0      31
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (3) _cmdLCD                                               3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0      22
                                              1 COMMON     4     4      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (5) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (6) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setCursorLCD
     _cmdLCD
   _setup
     _clcLCD
       _cmdLCD
     _initLCD
       _cmdLCD
     _setCursorLCD
       _cmdLCD
     _spiInit
     _writeStrLCD
       _writeCharLCD
   _writeIntLCD
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _writeStrLCD
       _writeCharLCD
   _writeStrLCD
     _writeCharLCD

 _isr (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      40       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      37       5       68.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      40      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon May 11 19:01:36 2020

                       _z 0077                         pc 0002               __CFG_CP$OFF 0000  
         writeStrLCD@cont 0027               _SSPSTATbits 0094                        fsr 0004  
                     l112 00D7                       l121 010B                       l130 0134  
                     l115 00EC                       l204 04F1                       l124 0115  
                     l205 04F6                       l133 0149                       l109 00CD  
                     l118 00F6                       l127 012A                       l144 0308  
                     l136 0153                       l180 0474                       l332 0255  
                     l165 04DF                       l174 03FD                       l183 050C  
                     l168 0536                       l177 051E                       l186 04C5  
                     l608 03B7                       l618 0439                       _RD0 0040  
                     _RD1 0041                       u510 0406                       u511 0405  
                     u530 0418              __CFG_CPD$OFF 0000                       u531 0417  
                     u540 0422                       u541 0421                       u525 040A  
                     u560 0435                       u561 0434                       u545 041E  
                     u555 0429                       u910 039F                       u911 039E  
                     u905 038F                       u930 03B3                       u931 03B2  
                     u915 039B                       u940 04CE                       u941 04CD  
                     u925 03A7                       u950 03C7                       u870 037C  
                     u871 037B                       u960 03EB                       u970 03FD  
                     u890 038E                       u971 03FC                       u891 038D  
                     u980 04E7                       u981 04E6                       u885 0380  
                     u990 017A                       u991 0179                       _hum 0045  
                     _isr 0309                       _luz 0047                       fsr0 0004  
                     indf 0000              __CFG_LVP$OFF 0000                      l1240 03FE  
                    l1250 0418                      l1242 0406                      l1252 0422  
                    l1244 0409                      l1254 0428                      l1246 0410  
                    l1600 03BD                      l1256 042F                      l1248 0414  
                    l1610 04EC                      l1602 03D9                      l1258 0435  
                    l1620 0456                      l1612 043A                      l1604 03E1  
                    l1700 0262                      l1550 04FB                      l1630 0530  
                    l1622 045C                      l1614 0444                      l1606 04E3  
                    l1710 0271                      l1702 0265                      l1552 04FD  
                    l1624 0462                      l1616 044A                      l1608 04E7  
                    l1560 0513                      l1720 0284                      l1712 0272  
                    l1704 0266                      l1640 0186                      l1632 016F  
                    l1554 0509                      l1626 0468                      l1618 0450  
                    l1562 051B                      l1730 028D                      l1722 0285  
                    l1714 0275                      l1706 0269                      l1570 037F  
                    l1650 01B0                      l1634 0174                      l1548 04FA  
                    l1628 046E                      l1556 0510                      l1740 02B8  
                    l1732 0292                      l1724 0286                      l1716 0276  
                    l1708 026A                      l1580 03A5                      l1572 0386  
                    l1564 0372                      l1652 01B4                      l1644 0187  
                    l1636 017A                      l1590 04C9                      l1558 0511  
                    l1750 02F1                      l1742 02C3                      l1734 0297  
                    l1726 0289                      l1718 0279                      l1582 03A6  
                    l1574 038A                      l1566 0376                      l1670 01EB  
                    l1662 01BF                      l1654 01B8                      l1646 01A4  
                    l1638 0181                      l1592 04CE                      l1752 02FD  
                    l1744 02CF                      l1736 02A1                      l1728 028C  
                    l1584 03AD                      l1576 038E                      l1568 037C  
                    l1680 0232                      l1672 01F2                      l1656 01BD  
                    l1648 01AC                      l1840 0199                      l1760 002F  
                    l1594 04D4                      l1746 02DA                      l1738 02AC  
                    l1578 039F                      l1586 03B3                      l1682 0236  
                    l1674 01F6                      l1666 01DB                      l1754 04A9  
                    l1770 0083                      l1762 0044                      l1596 04D9  
                    l1748 02E6                      l1676 01FB                      l1668 01E5  
                    l1684 023F                      l1780 00D3                      l1772 008E  
                    l1764 004C                      l1756 0020                      l1598 03B8  
                    l1694 0256                      l1678 022B                      l1686 0251  
                    l1790 0119                      l1782 00DB                      l1774 00A2  
                    l1766 0063                      l1758 0025                      l1696 025F  
                    l1792 0130                      l1784 00F2                      l1776 00AE  
                    l1768 006F                      l1698 0261                      l1794 0138  
                    l1786 00FA                      l1778 00C5                      l1796 014F  
                    l1788 0111                      l1798 0157                      ?_isr 0070  
                    STR_1 048F                      STR_2 048F                      STR_3 048F  
                    STR_4 048F                      STR_5 04A4                      STR_6 0497  
                    STR_7 04A1                      STR_8 0493                      STR_9 049E  
                    u1000 01B4                      u1001 01B3                      u1010 01DA  
                    u1011 01D9                      u1020 01E5                      u1100 0111  
                    u1021 01E4                      u1101 0110                      u1030 01EB  
                    u1110 0119                      u1031 01EA                      u1015 01D6  
                    u1111 0118                      u1040 023F                      u1120 0130  
                    u1041 023E                      u1121 012F                      u1050 0251  
                    u1130 0138                      u1051 0250                      u1131 0137  
                    u1140 014F                      u1060 00D3                      u1141 014E  
                    u1061 00D2                      u1150 0157                      u1070 00DB  
                    u1151 0156                      u1207 0145                      u1071 00DA  
                    u1080 00F2                      u1217 0164                      u1081 00F1  
                    u1090 00FA                      u1227 0518                      u1091 00F9  
                    u1237 0440                      u1247 0504                      u1177 00E8  
                    u1187 0107                      u1197 0126                      _RCIF 0065  
                    i1l97 0368                      _Pot1 0053                      _Pot2 0051  
            __CFG_WRT$OFF 0000         writeStrLCD@string 0022                      _cont 004F  
                    _main 0020                      _var1 0055                      _temp 004D  
                    _prox 0049                      btemp 007E                      start 000C  
           __CFG_IESO$OFF 0000                     ??_isr 0071               _writeIntLCD 04A6  
                   ?_main 0070                     STR_10 049B             __CFG_WDTE$OFF 0000  
                   _ANSEL 0188           __end_of___lwdiv 03B8                     i1l103 036B  
                   i1l211 053D                     i1l222 0527                     i1l214 0543  
                   i1l208 0537           __end_of___lwmod 043A                     _RCREG 001A  
             _writeStrLCD 03B8                     _SPBRG 0099                     _PORTA 0005  
                   _PORTB 0006                     _PORTD 0008                     u70_20 030F  
                   u70_21 030E                     u71_20 0320                     u71_21 031F  
                   u72_20 032F                     u72_21 032E                     u73_20 033F  
                   u73_21 033E                     _TRISA 0085                     _TRISB 0086  
                   _TRISC 0087                     _TRISD 0088                     u74_20 034F  
                   _SSPIF 0063                     u74_21 034E                     u75_20 035F  
                   u75_21 035E                     u69_20 053D                     u69_21 053C  
                   _TXREG 0019            __CFG_FCMEN$OFF 0000           __end_of_initLCD 0475  
         __end_of_dpowers 048F                     _setup 0256     __size_of_writeCharLCD 0012  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_spiInit 04F7  
         __end_of_spiRead 0528                     status 0003                     wtemp0 007E  
         __end_of_sprintf 0256            __CFG_MCLRE$OFF 0000           __initialization 000F  
            __end_of_main 016C                    ??_main 0043              _writeCharLCD 050D  
                  ?_setup 0070                    _ANSELH 0189                    i1l1440 030F  
                  i1l1370 0524                    i1l1450 0338                    i1l1442 031A  
                  i1l1460 035F                    i1l1452 033F                    i1l1444 0320  
                  i1l1366 0537                    i1l1374 053F                    i1l1454 0348  
                  i1l1462 0368                    i1l1446 0329                    i1l1438 0309  
                  i1l1368 051F                    i1l1456 034F                    i1l1448 032F  
                  i1l1458 0358                    _SPBRGH 009A                    _SSPCON 0014  
                  _SSPBUF 0013            __CFG_PWRTE$OFF 0000         writeIntLCD@buffer 003E  
       writeIntLCD@numero 0042                    _clcLCD 0530                    _cmdLCD 04F7  
                  _caudal 004B                 ??___lwdiv 0024                 ??___lwmod 002C  
                  _cursor 0078                 ??_initLCD 0023                    saved_w 007E  
        __end_of_spiWrite 0544                 ??_spiInit 0075                 ??_spiRead 0070  
               ??_sprintf 0031   __end_of__initialization 001C            __pcstackCOMMON 0070  
           __end_of_setup 0309                   ??_setup 0029                __pbssBANK0 0045  
           ?_setCursorLCD 0023                __pmaintext 0020                   ?_clcLCD 0070  
                 ?_cmdLCD 0070                __pintentry 0004   __size_of_spiReceiveWait 0007  
            ?_writeIntLCD 0070              ?_writeStrLCD 0022                   _SSPSTAT 0094  
              __stringtab 0475            ??_setCursorLCD 0024                 ?_spiWrite 0070  
           setCursorLCD@x 0023             setCursorLCD@y 0025           __size_of_clcLCD 0007  
         __size_of_cmdLCD 0016                   ___lwdiv 0372                   ___lwmod 03FE  
                 __ptext1 04A6                   __ptext2 016C                   __ptext3 03FE  
                 __ptext4 0372                   __ptext5 0256                   __ptext6 03B8  
                 __ptext7 050D                   __ptext8 04E0                   __ptext9 04C6  
                 _escoger 0075                   _initLCD 043A                   _dpowers 0485  
            __size_of_isr 0069                   _spiInit 04E0                   _spiRead 051F  
                 _sprintf 016C                   clrloop0 0529      end_of_initialization 001C  
               _RCSTAbits 0018                ??_spiWrite 0070                 _TRISAbits 0085  
             spiWrite@dat 0070                 _TXSTAbits 0098            _spiReceiveWait 0537  
          __end_of_clcLCD 0537            __end_of_cmdLCD 050D      __end_of_setCursorLCD 04E0  
             _BAUDCTLbits 0187      __size_of_writeIntLCD 0020       start_initialization 000F  
    __size_of_writeStrLCD 0046               __end_of_isr 0372  __CFG_FOSC$INTRC_NOCLKOUT 0000  
  __end_of_spiReceiveWait 053E                  ??_clcLCD 0075                  ??_cmdLCD 0020  
             __pbssCOMMON 0075                 ___latbits 0002             __pcstackBANK0 0020  
   writeCharLCD@character 0021               sprintf@flag 0035               sprintf@prec 0036  
        ___lwdiv@dividend 0022                 cmdLCD@cmd 0022           ?_spiReceiveWait 0070  
                ?___lwdiv 0020                  ?___lwmod 0028         __size_of_spiWrite 0006  
               __pstrings 0475                  ?_initLCD 0070             ?_writeCharLCD 0070  
                ?_spiInit 0020                  ?_spiRead 0070          ___lwdiv@quotient 0026  
                ?_sprintf 002E            __size_of_setup 00B3      spiInit@sTransmitEdge 0022  
       interrupt_function 0004                 clear_ram0 0528                  _PIE1bits 008C  
      spiInit@sDataSample 0020                  _PIR1bits 000C     __size_of_setCursorLCD 001A  
             __stringbase 0484            ??_writeCharLCD 0020              _setCursorLCD 04C6  
        __size_of___lwdiv 0046          __size_of___lwmod 003C        __end_of__stringtab 0485  
              sprintf@val 0037          __size_of_initLCD 003B           ___lwdiv@divisor 0020  
         ___lwdiv@counter 0025                  __ptext10 043A                  __ptext11 0530  
                __ptext12 04F7                  __ptext13 0309                  __ptext14 053E  
                __ptext15 051F                  __ptext16 0537          __size_of_spiInit 0017  
        __size_of_spiRead 0009         __CFG_BOR4V$BOR40V 0000          __size_of_sprintf 00EA  
           __size_of_main 014C                  _spiWrite 053E              spiInit@sType 0023  
       spiInit@sClockIdle 0021             ??_writeIntLCD 003B             ??_writeStrLCD 0024  
              _INTCONbits 000B                  intlevel1 0000                 sprintf@ap 0034  
               sprintf@sp 0039          ___lwmod@dividend 002A          ??_spiReceiveWait 0070  
    __end_of_writeCharLCD 051F                 stringcode 047F                  sprintf@c 003A  
                sprintf@f 002E           ___lwmod@divisor 0028           ___lwmod@counter 002D  
                stringdir 047F                  stringtab 0475       __end_of_writeIntLCD 04C6  
     __end_of_writeStrLCD 03FE  
