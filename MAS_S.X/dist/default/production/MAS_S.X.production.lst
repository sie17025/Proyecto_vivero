

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon May 11 19:29:28 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.10
    28                           ; Generated 31/07/2019 GMT
    29                           ; 
    30                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F887 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  0087                     	;# 
   100  0088                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  008F                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  0105                     	;# 
   125  0107                     	;# 
   126  0108                     	;# 
   127  0109                     	;# 
   128  010C                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  0185                     	;# 
   134  0187                     	;# 
   135  0188                     	;# 
   136  0189                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  008F                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0093                     	;# 
   190  0094                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0098                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  009F                     	;# 
   202  0105                     	;# 
   203  0107                     	;# 
   204  0108                     	;# 
   205  0109                     	;# 
   206  010C                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  0185                     	;# 
   212  0187                     	;# 
   213  0188                     	;# 
   214  0189                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0008                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  000E                     	;# 
   232  000E                     	;# 
   233  000F                     	;# 
   234  0010                     	;# 
   235  0011                     	;# 
   236  0012                     	;# 
   237  0013                     	;# 
   238  0014                     	;# 
   239  0015                     	;# 
   240  0015                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001B                     	;# 
   248  001C                     	;# 
   249  001D                     	;# 
   250  001E                     	;# 
   251  001F                     	;# 
   252  0081                     	;# 
   253  0085                     	;# 
   254  0086                     	;# 
   255  0087                     	;# 
   256  0088                     	;# 
   257  0089                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  008F                     	;# 
   262  0090                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0094                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0097                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009A                     	;# 
   275  009B                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009E                     	;# 
   279  009F                     	;# 
   280  0105                     	;# 
   281  0107                     	;# 
   282  0108                     	;# 
   283  0109                     	;# 
   284  010C                     	;# 
   285  010C                     	;# 
   286  010D                     	;# 
   287  010E                     	;# 
   288  010F                     	;# 
   289  0185                     	;# 
   290  0187                     	;# 
   291  0188                     	;# 
   292  0189                     	;# 
   293  018C                     	;# 
   294  018D                     	;# 
   295  0000                     	;# 
   296  0001                     	;# 
   297  0002                     	;# 
   298  0003                     	;# 
   299  0004                     	;# 
   300  0005                     	;# 
   301  0006                     	;# 
   302  0007                     	;# 
   303  0008                     	;# 
   304  0009                     	;# 
   305  000A                     	;# 
   306  000B                     	;# 
   307  000C                     	;# 
   308  000D                     	;# 
   309  000E                     	;# 
   310  000E                     	;# 
   311  000F                     	;# 
   312  0010                     	;# 
   313  0011                     	;# 
   314  0012                     	;# 
   315  0013                     	;# 
   316  0014                     	;# 
   317  0015                     	;# 
   318  0015                     	;# 
   319  0016                     	;# 
   320  0017                     	;# 
   321  0018                     	;# 
   322  0019                     	;# 
   323  001A                     	;# 
   324  001B                     	;# 
   325  001B                     	;# 
   326  001C                     	;# 
   327  001D                     	;# 
   328  001E                     	;# 
   329  001F                     	;# 
   330  0081                     	;# 
   331  0085                     	;# 
   332  0086                     	;# 
   333  0087                     	;# 
   334  0088                     	;# 
   335  0089                     	;# 
   336  008C                     	;# 
   337  008D                     	;# 
   338  008E                     	;# 
   339  008F                     	;# 
   340  0090                     	;# 
   341  0091                     	;# 
   342  0092                     	;# 
   343  0093                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0094                     	;# 
   347  0095                     	;# 
   348  0096                     	;# 
   349  0097                     	;# 
   350  0098                     	;# 
   351  0099                     	;# 
   352  009A                     	;# 
   353  009B                     	;# 
   354  009C                     	;# 
   355  009D                     	;# 
   356  009E                     	;# 
   357  009F                     	;# 
   358  0105                     	;# 
   359  0107                     	;# 
   360  0108                     	;# 
   361  0109                     	;# 
   362  010C                     	;# 
   363  010C                     	;# 
   364  010D                     	;# 
   365  010E                     	;# 
   366  010F                     	;# 
   367  0185                     	;# 
   368  0187                     	;# 
   369  0188                     	;# 
   370  0189                     	;# 
   371  018C                     	;# 
   372  018D                     	;# 
   373  0000                     	;# 
   374  0001                     	;# 
   375  0002                     	;# 
   376  0003                     	;# 
   377  0004                     	;# 
   378  0005                     	;# 
   379  0006                     	;# 
   380  0007                     	;# 
   381  0008                     	;# 
   382  0009                     	;# 
   383  000A                     	;# 
   384  000B                     	;# 
   385  000C                     	;# 
   386  000D                     	;# 
   387  000E                     	;# 
   388  000E                     	;# 
   389  000F                     	;# 
   390  0010                     	;# 
   391  0011                     	;# 
   392  0012                     	;# 
   393  0013                     	;# 
   394  0014                     	;# 
   395  0015                     	;# 
   396  0015                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001B                     	;# 
   404  001C                     	;# 
   405  001D                     	;# 
   406  001E                     	;# 
   407  001F                     	;# 
   408  0081                     	;# 
   409  0085                     	;# 
   410  0086                     	;# 
   411  0087                     	;# 
   412  0088                     	;# 
   413  0089                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  008F                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0093                     	;# 
   422  0093                     	;# 
   423  0093                     	;# 
   424  0094                     	;# 
   425  0095                     	;# 
   426  0096                     	;# 
   427  0097                     	;# 
   428  0098                     	;# 
   429  0099                     	;# 
   430  009A                     	;# 
   431  009B                     	;# 
   432  009C                     	;# 
   433  009D                     	;# 
   434  009E                     	;# 
   435  009F                     	;# 
   436  0105                     	;# 
   437  0107                     	;# 
   438  0108                     	;# 
   439  0109                     	;# 
   440  010C                     	;# 
   441  010C                     	;# 
   442  010D                     	;# 
   443  010E                     	;# 
   444  010F                     	;# 
   445  0185                     	;# 
   446  0187                     	;# 
   447  0188                     	;# 
   448  0189                     	;# 
   449  018C                     	;# 
   450  018D                     	;# 
   451                           
   452                           	psect	strings
   453  0003                     __pstrings:	
   454  0003                     stringtab:	
   455  0003                     __stringtab:	
   456                           
   457                           ;	String table - string pointers are 1 byte each
   458  0003  1BFF               	btfsc	btemp+1,7
   459  0004  280D               	ljmp	stringcode
   460  0005  1383               	bcf	3,7
   461  0006  187F               	btfsc	btemp+1,0
   462  0007  1783               	bsf	3,7
   463  0008  0800               	movf	0,w
   464  0009  0A84               	incf	4,f
   465  000A  1903               	skipnz
   466  000B  0AFF               	incf	btemp+1,f
   467  000C  0008               	return
   468  000D                     stringcode:	
   469  000D                     stringdir:	
   470  000D  3000               	movlw	high stringdir
   471  000E  008A               	movwf	10
   472  000F  0804               	movf	4,w
   473  0010  0A84               	incf	4,f
   474  0011  0782               	addwf	2,f
   475  0012                     __stringbase:	
   476  0012  3400               	retlw	0
   477  0013                     __end_of__stringtab:	
   478  0013                     _dpowers:	
   479  0013  3401               	retlw	1
   480  0014  3400               	retlw	0
   481  0015  340A               	retlw	10
   482  0016  3400               	retlw	0
   483  0017  3464               	retlw	100
   484  0018  3400               	retlw	0
   485  0019  34E8               	retlw	232
   486  001A  3403               	retlw	3
   487  001B  3410               	retlw	16
   488  001C  3427               	retlw	39
   489  001D                     __end_of_dpowers:	
   490  000C                     _PIR1bits	set	12
   491  0018                     _RCSTAbits	set	24
   492  0007                     _PORTC	set	7
   493  0005                     _PORTA	set	5
   494  0013                     _SSPBUF	set	19
   495  0014                     _SSPCON	set	20
   496  0008                     _PORTD	set	8
   497  0006                     _PORTB	set	6
   498  0041                     _RD1	set	65
   499  0040                     _RD0	set	64
   500  008F                     _OSCCONbits	set	143
   501  008C                     _PIE1bits	set	140
   502  009A                     _SPBRGH	set	154
   503  0099                     _SPBRG	set	153
   504  0098                     _TXSTAbits	set	152
   505  009F                     _ADCON1	set	159
   506  0085                     _TRISA	set	133
   507  0094                     _SSPSTATbits	set	148
   508  0094                     _SSPSTAT	set	148
   509  0088                     _TRISD	set	136
   510  0087                     _TRISC	set	135
   511  0086                     _TRISB	set	134
   512  0187                     _BAUDCTLbits	set	391
   513  0189                     _ANSELH	set	393
   514  0188                     _ANSEL	set	392
   515  001D                     STR_1:	
   516  001D  3420               	retlw	32	;' '
   517  001E  3420               	retlw	32	;' '
   518  001F  3420               	retlw	32	;' '
   519  0020  3400               	retlw	0
   520  0021                     STR_8:	
   521  0021  3453               	retlw	83	;'S'
   522  0022  344F               	retlw	79	;'O'
   523  0023  344C               	retlw	76	;'L'
   524  0024  3400               	retlw	0
   525  0025                     STR_6:	
   526  0025  3454               	retlw	84	;'T'
   527  0026  3445               	retlw	69	;'E'
   528  0027  344D               	retlw	77	;'M'
   529  0028  3400               	retlw	0
   530  0029                     STR_10:	
   531  0029  3425               	retlw	37	;'%'
   532  002A  3464               	retlw	100	;'d'
   533  002B  3400               	retlw	0
   534  002C                     STR_9:	
   535  002C  3443               	retlw	67	;'C'
   536  002D  3441               	retlw	65	;'A'
   537  002E  3400               	retlw	0
   538  002F                     STR_7:	
   539  002F  3448               	retlw	72	;'H'
   540  0030  3455               	retlw	85	;'U'
   541  0031  3400               	retlw	0
   542  0032                     STR_5:	
   543  0032  3450               	retlw	80	;'P'
   544  0033  3400               	retlw	0
   545  001D                     
   546                           ; #config settings
   547  0000                     
   548                           	psect	cinit
   549  07EF                     start_initialization:	
   550  07EF                     __initialization:	
   551                           
   552                           ; Clear objects allocated to BANK0
   553  07EF  1283               	bcf	3,5	;RP0=0, select bank0
   554  07F0  1303               	bcf	3,6	;RP1=0, select bank0
   555  07F1  01B7               	clrf	__pbssBANK0& (0+127)
   556  07F2  01B8               	clrf	(__pbssBANK0+1)& (0+127)
   557  07F3  01B9               	clrf	(__pbssBANK0+2)& (0+127)
   558  07F4  01BA               	clrf	(__pbssBANK0+3)& (0+127)
   559  07F5  01BB               	clrf	(__pbssBANK0+4)& (0+127)
   560  07F6  01BC               	clrf	(__pbssBANK0+5)& (0+127)
   561  07F7  01BD               	clrf	(__pbssBANK0+6)& (0+127)
   562  07F8  01BE               	clrf	(__pbssBANK0+7)& (0+127)
   563  07F9  01BF               	clrf	(__pbssBANK0+8)& (0+127)
   564  07FA  01C0               	clrf	(__pbssBANK0+9)& (0+127)
   565  07FB  01C1               	clrf	(__pbssBANK0+10)& (0+127)
   566  07FC                     end_of_initialization:	
   567                           ;End of C runtime variable initialization code
   568                           
   569  07FC                     __end_of__initialization:	
   570  07FC  0183               	clrf	3
   571  07FD  120A  118A  2EB4   	ljmp	_main	;jump to C main() function
   572                           
   573                           	psect	bssBANK0
   574  0037                     __pbssBANK0:	
   575  0037                     _caudal:	
   576  0037                     	ds	2
   577  0039                     _hum:	
   578  0039                     	ds	2
   579  003B                     _luz:	
   580  003B                     	ds	2
   581  003D                     _temp:	
   582  003D                     	ds	2
   583  003F                     _prox:	
   584  003F                     	ds	2
   585  0041                     _cursor:	
   586  0041                     	ds	1
   587                           
   588                           	psect	cstackCOMMON
   589  0070                     __pcstackCOMMON:	
   590  0070                     ?_setup:	
   591  0070                     ?_spiWrite:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ??_spiWrite:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ?_spiRead:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ??_spiRead:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ?_writeIntLCD:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ?_spiInit:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?_initLCD:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ?_clcLCD:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_cmdLCD:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ??_cmdLCD:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ?_writeCharLCD:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ??_writeCharLCD:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ?_main:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0070                     ?_spiReceiveWait:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ??_spiReceiveWait:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ?___lwdiv:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     spiInit@sDataSample:	
   640                           ; 2 bytes @ 0x0
   641                           
   642  0070                     spiWrite@dat:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0070                     ___lwdiv@divisor:	
   646                           ; 1 bytes @ 0x0
   647                           
   648                           
   649                           ; 2 bytes @ 0x0
   650  0070                     	ds	1
   651  0071                     spiInit@sClockIdle:	
   652  0071                     writeCharLCD@character:	
   653                           ; 1 bytes @ 0x1
   654                           
   655                           
   656                           ; 1 bytes @ 0x1
   657  0071                     	ds	1
   658  0072                     ?_writeStrLCD:	
   659  0072                     spiInit@sTransmitEdge:	
   660                           ; 1 bytes @ 0x2
   661                           
   662  0072                     cmdLCD@cmd:	
   663                           ; 1 bytes @ 0x2
   664                           
   665  0072                     writeStrLCD@string:	
   666                           ; 1 bytes @ 0x2
   667                           
   668  0072                     ___lwdiv@dividend:	
   669                           ; 2 bytes @ 0x2
   670                           
   671                           
   672                           ; 2 bytes @ 0x2
   673  0072                     	ds	1
   674  0073                     ?_setCursorLCD:	
   675  0073                     ??_spiInit:	
   676                           ; 1 bytes @ 0x3
   677                           
   678  0073                     ??_initLCD:	
   679                           ; 1 bytes @ 0x3
   680                           
   681  0073                     ??_clcLCD:	
   682                           ; 1 bytes @ 0x3
   683                           
   684  0073                     spiInit@sType:	
   685                           ; 1 bytes @ 0x3
   686                           
   687  0073                     setCursorLCD@x:	
   688                           ; 1 bytes @ 0x3
   689                           
   690                           
   691                           ; 1 bytes @ 0x3
   692  0073                     	ds	1
   693  0074                     ??_setCursorLCD:	
   694  0074                     ??_writeStrLCD:	
   695                           ; 1 bytes @ 0x4
   696                           
   697  0074                     ??___lwdiv:	
   698                           ; 1 bytes @ 0x4
   699                           
   700                           
   701                           ; 1 bytes @ 0x4
   702  0074                     	ds	1
   703  0075                     setCursorLCD@y:	
   704  0075                     ___lwdiv@quotient:	
   705                           ; 1 bytes @ 0x5
   706                           
   707                           
   708                           ; 2 bytes @ 0x5
   709  0075                     	ds	2
   710  0077                     ___lwdiv@counter:	
   711  0077                     writeStrLCD@cont:	
   712                           ; 1 bytes @ 0x7
   713                           
   714                           
   715                           ; 2 bytes @ 0x7
   716  0077                     	ds	1
   717  0078                     ?___lwmod:	
   718  0078                     ___lwmod@divisor:	
   719                           ; 2 bytes @ 0x8
   720                           
   721                           
   722                           ; 2 bytes @ 0x8
   723  0078                     	ds	1
   724  0079                     ??_setup:	
   725                           
   726                           ; 1 bytes @ 0x9
   727  0079                     	ds	1
   728  007A                     ___lwmod@dividend:	
   729                           
   730                           ; 2 bytes @ 0xA
   731  007A                     	ds	2
   732  007C                     ??___lwmod:	
   733                           
   734                           ; 1 bytes @ 0xC
   735  007C                     	ds	1
   736  007D                     ___lwmod@counter:	
   737                           
   738                           ; 1 bytes @ 0xD
   739  007D                     	ds	1
   740                           
   741                           	psect	cstackBANK0
   742  0020                     __pcstackBANK0:	
   743  0020                     ?_sprintf:	
   744  0020                     sprintf@f:	
   745                           ; 2 bytes @ 0x0
   746                           
   747                           
   748                           ; 1 bytes @ 0x0
   749  0020                     	ds	3
   750  0023                     ??_sprintf:	
   751                           
   752                           ; 1 bytes @ 0x3
   753  0023                     	ds	3
   754  0026                     sprintf@ap:	
   755                           
   756                           ; 1 bytes @ 0x6
   757  0026                     	ds	1
   758  0027                     sprintf@flag:	
   759                           
   760                           ; 1 bytes @ 0x7
   761  0027                     	ds	1
   762  0028                     sprintf@prec:	
   763                           
   764                           ; 1 bytes @ 0x8
   765  0028                     	ds	1
   766  0029                     sprintf@val:	
   767                           
   768                           ; 2 bytes @ 0x9
   769  0029                     	ds	2
   770  002B                     sprintf@sp:	
   771                           
   772                           ; 1 bytes @ 0xB
   773  002B                     	ds	1
   774  002C                     sprintf@c:	
   775                           
   776                           ; 1 bytes @ 0xC
   777  002C                     	ds	1
   778  002D                     ??_writeIntLCD:	
   779                           
   780                           ; 1 bytes @ 0xD
   781  002D                     	ds	3
   782  0030                     writeIntLCD@buffer:	
   783                           
   784                           ; 4 bytes @ 0x10
   785  0030                     	ds	4
   786  0034                     writeIntLCD@numero:	
   787                           
   788                           ; 1 bytes @ 0x14
   789  0034                     	ds	1
   790  0035                     ??_main:	
   791                           
   792                           ; 1 bytes @ 0x15
   793  0035                     	ds	2
   794                           
   795                           	psect	maintext
   796  06B4                     __pmaintext:	
   797 ;;
   798 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   799 ;;
   800 ;; *************** function _main *****************
   801 ;; Defined at:
   802 ;;		line 47 in file "main_s.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   811 ;; Tracked objects:
   812 ;;		On entry : B00/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   816 ;;      Params:         0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0
   818 ;;      Temps:          0       2       0       0       0
   819 ;;      Totals:         0       2       0       0       0
   820 ;;Total ram usage:        2 bytes
   821 ;; Hardware stack levels required when called:    3
   822 ;; This function calls:
   823 ;;		_setCursorLCD
   824 ;;		_setup
   825 ;;		_spiRead
   826 ;;		_spiWrite
   827 ;;		_writeIntLCD
   828 ;;		_writeStrLCD
   829 ;; This function is called by:
   830 ;;		Startup code after reset
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           
   835                           ;psect for function _main
   836  06B4                     _main:	
   837  06B4                     l1402:	
   838                           ;incstack = 0
   839                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   840                           
   841                           
   842                           ;main_s.c: 48:     setup();
   843  06B4  120A  118A  254D  120A  118A  	fcall	_setup
   844  06B9                     l1404:	
   845                           
   846                           ;main_s.c: 54:        spiWrite(0);
   847  06B9  3000               	movlw	0
   848  06BA  120A  118A  23C4  120A  118A  	fcall	_spiWrite
   849  06BF                     l1406:	
   850                           
   851                           ;main_s.c: 55:        prox = spiRead();
   852  06BF  120A  118A  23D8  120A  118A  	fcall	_spiRead
   853  06C4  1283               	bcf	3,5	;RP0=0, select bank0
   854  06C5  1303               	bcf	3,6	;RP1=0, select bank0
   855  06C6  00B5               	movwf	??_main
   856  06C7  01B6               	clrf	??_main+1
   857  06C8  0835               	movf	??_main,w
   858  06C9  00BF               	movwf	_prox
   859  06CA  0836               	movf	??_main+1,w
   860  06CB  00C0               	movwf	_prox+1
   861  06CC                     l1408:	
   862                           
   863                           ;main_s.c: 56:        _delay((unsigned long)((5)*(4000000/4000.0)));
   864  06CC  3007               	movlw	7
   865  06CD  1283               	bcf	3,5	;RP0=0, select bank0
   866  06CE  1303               	bcf	3,6	;RP1=0, select bank0
   867  06CF  00B6               	movwf	??_main+1
   868  06D0  307C               	movlw	124
   869  06D1  00B5               	movwf	??_main
   870  06D2                     u557:	
   871  06D2  0BB5               	decfsz	??_main,f
   872  06D3  2ED2               	goto	u557
   873  06D4  0BB6               	decfsz	??_main+1,f
   874  06D5  2ED2               	goto	u557
   875  06D6  0000               	nop
   876  06D7                     l1410:	
   877                           
   878                           ;main_s.c: 57:        spiWrite(1);
   879  06D7  3001               	movlw	1
   880  06D8  120A  118A  23C4  120A  118A  	fcall	_spiWrite
   881  06DD                     l1412:	
   882                           
   883                           ;main_s.c: 58:        temp = spiRead();
   884  06DD  120A  118A  23D8  120A  118A  	fcall	_spiRead
   885  06E2  1283               	bcf	3,5	;RP0=0, select bank0
   886  06E3  1303               	bcf	3,6	;RP1=0, select bank0
   887  06E4  00B5               	movwf	??_main
   888  06E5  01B6               	clrf	??_main+1
   889  06E6  0835               	movf	??_main,w
   890  06E7  00BD               	movwf	_temp
   891  06E8  0836               	movf	??_main+1,w
   892  06E9  00BE               	movwf	_temp+1
   893  06EA                     l1414:	
   894                           
   895                           ;main_s.c: 59:        _delay((unsigned long)((5)*(4000000/4000.0)));
   896  06EA  3007               	movlw	7
   897  06EB  1283               	bcf	3,5	;RP0=0, select bank0
   898  06EC  1303               	bcf	3,6	;RP1=0, select bank0
   899  06ED  00B6               	movwf	??_main+1
   900  06EE  307C               	movlw	124
   901  06EF  00B5               	movwf	??_main
   902  06F0                     u567:	
   903  06F0  0BB5               	decfsz	??_main,f
   904  06F1  2EF0               	goto	u567
   905  06F2  0BB6               	decfsz	??_main+1,f
   906  06F3  2EF0               	goto	u567
   907  06F4  0000               	nop
   908  06F5                     l1416:	
   909                           
   910                           ;main_s.c: 60:        spiWrite(2);
   911  06F5  3002               	movlw	2
   912  06F6  120A  118A  23C4  120A  118A  	fcall	_spiWrite
   913  06FB                     l1418:	
   914                           
   915                           ;main_s.c: 61:        caudal = spiRead();
   916  06FB  120A  118A  23D8  120A  118A  	fcall	_spiRead
   917  0700  1283               	bcf	3,5	;RP0=0, select bank0
   918  0701  1303               	bcf	3,6	;RP1=0, select bank0
   919  0702  00B5               	movwf	??_main
   920  0703  01B6               	clrf	??_main+1
   921  0704  0835               	movf	??_main,w
   922  0705  00B7               	movwf	_caudal
   923  0706  0836               	movf	??_main+1,w
   924  0707  00B8               	movwf	_caudal+1
   925  0708                     l1420:	
   926                           
   927                           ;main_s.c: 62:        _delay((unsigned long)((5)*(4000000/4000.0)));
   928  0708  3007               	movlw	7
   929  0709  1283               	bcf	3,5	;RP0=0, select bank0
   930  070A  1303               	bcf	3,6	;RP1=0, select bank0
   931  070B  00B6               	movwf	??_main+1
   932  070C  307C               	movlw	124
   933  070D  00B5               	movwf	??_main
   934  070E                     u577:	
   935  070E  0BB5               	decfsz	??_main,f
   936  070F  2F0E               	goto	u577
   937  0710  0BB6               	decfsz	??_main+1,f
   938  0711  2F0E               	goto	u577
   939  0712  0000               	nop
   940  0713                     l1422:	
   941                           
   942                           ;main_s.c: 63:        spiWrite(3);
   943  0713  3003               	movlw	3
   944  0714  120A  118A  23C4  120A  118A  	fcall	_spiWrite
   945  0719                     l1424:	
   946                           
   947                           ;main_s.c: 64:        luz = spiRead();
   948  0719  120A  118A  23D8  120A  118A  	fcall	_spiRead
   949  071E  1283               	bcf	3,5	;RP0=0, select bank0
   950  071F  1303               	bcf	3,6	;RP1=0, select bank0
   951  0720  00B5               	movwf	??_main
   952  0721  01B6               	clrf	??_main+1
   953  0722  0835               	movf	??_main,w
   954  0723  00BB               	movwf	_luz
   955  0724  0836               	movf	??_main+1,w
   956  0725  00BC               	movwf	_luz+1
   957  0726                     l1426:	
   958                           
   959                           ;main_s.c: 65:        _delay((unsigned long)((5)*(4000000/4000.0)));
   960  0726  3007               	movlw	7
   961  0727  1283               	bcf	3,5	;RP0=0, select bank0
   962  0728  1303               	bcf	3,6	;RP1=0, select bank0
   963  0729  00B6               	movwf	??_main+1
   964  072A  307C               	movlw	124
   965  072B  00B5               	movwf	??_main
   966  072C                     u587:	
   967  072C  0BB5               	decfsz	??_main,f
   968  072D  2F2C               	goto	u587
   969  072E  0BB6               	decfsz	??_main+1,f
   970  072F  2F2C               	goto	u587
   971  0730  0000               	nop
   972  0731                     l1428:	
   973                           
   974                           ;main_s.c: 66:        spiWrite(4);
   975  0731  3004               	movlw	4
   976  0732  120A  118A  23C4  120A  118A  	fcall	_spiWrite
   977  0737                     l1430:	
   978                           
   979                           ;main_s.c: 67:        hum = spiRead();
   980  0737  120A  118A  23D8  120A  118A  	fcall	_spiRead
   981  073C  1283               	bcf	3,5	;RP0=0, select bank0
   982  073D  1303               	bcf	3,6	;RP1=0, select bank0
   983  073E  00B5               	movwf	??_main
   984  073F  01B6               	clrf	??_main+1
   985  0740  0835               	movf	??_main,w
   986  0741  00B9               	movwf	_hum
   987  0742  0836               	movf	??_main+1,w
   988  0743  00BA               	movwf	_hum+1
   989  0744                     l1432:	
   990                           
   991                           ;main_s.c: 68:        _delay((unsigned long)((5)*(4000000/4000.0)));
   992  0744  3007               	movlw	7
   993  0745  1283               	bcf	3,5	;RP0=0, select bank0
   994  0746  1303               	bcf	3,6	;RP1=0, select bank0
   995  0747  00B6               	movwf	??_main+1
   996  0748  307C               	movlw	124
   997  0749  00B5               	movwf	??_main
   998  074A                     u597:	
   999  074A  0BB5               	decfsz	??_main,f
  1000  074B  2F4A               	goto	u597
  1001  074C  0BB6               	decfsz	??_main+1,f
  1002  074D  2F4A               	goto	u597
  1003  074E  0000               	nop
  1004  074F                     l1434:	
  1005                           
  1006                           ;main_s.c: 72:         setCursorLCD(2, 1);
  1007  074F  01F3               	clrf	setCursorLCD@x
  1008  0750  0AF3               	incf	setCursorLCD@x,f
  1009  0751  3002               	movlw	2
  1010  0752  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  1011  0757                     l1436:	
  1012                           
  1013                           ;main_s.c: 73:         writeStrLCD("   ");
  1014  0757  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1015  0758  00F2               	movwf	writeStrLCD@string
  1016  0759  3080               	movlw	128
  1017  075A  00F3               	movwf	writeStrLCD@string+1
  1018  075B  120A  118A  24C7  120A  118A  	fcall	_writeStrLCD
  1019  0760                     l1438:	
  1020                           
  1021                           ;main_s.c: 74:         setCursorLCD(2, 1);
  1022  0760  01F3               	clrf	setCursorLCD@x
  1023  0761  0AF3               	incf	setCursorLCD@x,f
  1024  0762  3002               	movlw	2
  1025  0763  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  1026  0768                     l1440:	
  1027                           
  1028                           ;main_s.c: 75:         writeIntLCD(prox);
  1029  0768  1283               	bcf	3,5	;RP0=0, select bank0
  1030  0769  1303               	bcf	3,6	;RP1=0, select bank0
  1031  076A  083F               	movf	_prox,w
  1032  076B  120A  118A  2435  120A  118A  	fcall	_writeIntLCD
  1033  0770                     l1442:	
  1034                           
  1035                           ;main_s.c: 76:         setCursorLCD(2, 9);
  1036  0770  3009               	movlw	9
  1037  0771  1283               	bcf	3,5	;RP0=0, select bank0
  1038  0772  1303               	bcf	3,6	;RP1=0, select bank0
  1039  0773  00B5               	movwf	??_main
  1040  0774  0835               	movf	??_main,w
  1041  0775  00F3               	movwf	setCursorLCD@x
  1042  0776  3002               	movlw	2
  1043  0777  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  1044  077C                     l1444:	
  1045                           
  1046                           ;main_s.c: 77:         writeStrLCD("   ");
  1047  077C  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1048  077D  00F2               	movwf	writeStrLCD@string
  1049  077E  3080               	movlw	128
  1050  077F  00F3               	movwf	writeStrLCD@string+1
  1051  0780  120A  118A  24C7  120A  118A  	fcall	_writeStrLCD
  1052  0785                     l1446:	
  1053                           
  1054                           ;main_s.c: 78:         setCursorLCD(2, 9);
  1055  0785  3009               	movlw	9
  1056  0786  1283               	bcf	3,5	;RP0=0, select bank0
  1057  0787  1303               	bcf	3,6	;RP1=0, select bank0
  1058  0788  00B5               	movwf	??_main
  1059  0789  0835               	movf	??_main,w
  1060  078A  00F3               	movwf	setCursorLCD@x
  1061  078B  3002               	movlw	2
  1062  078C  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  1063  0791                     l1448:	
  1064                           
  1065                           ;main_s.c: 79:         writeIntLCD(temp);
  1066  0791  1283               	bcf	3,5	;RP0=0, select bank0
  1067  0792  1303               	bcf	3,6	;RP1=0, select bank0
  1068  0793  083D               	movf	_temp,w
  1069  0794  120A  118A  2435  120A  118A  	fcall	_writeIntLCD
  1070  0799                     l1450:	
  1071                           
  1072                           ;main_s.c: 81:         setCursorLCD(2, 14);
  1073  0799  300E               	movlw	14
  1074  079A  1283               	bcf	3,5	;RP0=0, select bank0
  1075  079B  1303               	bcf	3,6	;RP1=0, select bank0
  1076  079C  00B5               	movwf	??_main
  1077  079D  0835               	movf	??_main,w
  1078  079E  00F3               	movwf	setCursorLCD@x
  1079  079F  3002               	movlw	2
  1080  07A0  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  1081  07A5                     l1452:	
  1082                           
  1083                           ;main_s.c: 82:         writeStrLCD("   ");
  1084  07A5  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1085  07A6  00F2               	movwf	writeStrLCD@string
  1086  07A7  3080               	movlw	128
  1087  07A8  00F3               	movwf	writeStrLCD@string+1
  1088  07A9  120A  118A  24C7  120A  118A  	fcall	_writeStrLCD
  1089  07AE                     l1454:	
  1090                           
  1091                           ;main_s.c: 83:         setCursorLCD(2, 14);
  1092  07AE  300E               	movlw	14
  1093  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  1094  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  1095  07B1  00B5               	movwf	??_main
  1096  07B2  0835               	movf	??_main,w
  1097  07B3  00F3               	movwf	setCursorLCD@x
  1098  07B4  3002               	movlw	2
  1099  07B5  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  1100  07BA                     l1456:	
  1101                           
  1102                           ;main_s.c: 84:         writeIntLCD(luz);
  1103  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  1104  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  1105  07BC  083B               	movf	_luz,w
  1106  07BD  120A  118A  2435  120A  118A  	fcall	_writeIntLCD
  1107  07C2                     l1458:	
  1108                           
  1109                           ;main_s.c: 85:         setCursorLCD(2, 4);
  1110  07C2  3004               	movlw	4
  1111  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  1112  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  1113  07C5  00B5               	movwf	??_main
  1114  07C6  0835               	movf	??_main,w
  1115  07C7  00F3               	movwf	setCursorLCD@x
  1116  07C8  3002               	movlw	2
  1117  07C9  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  1118  07CE                     l1460:	
  1119                           
  1120                           ;main_s.c: 86:         writeStrLCD("   ");
  1121  07CE  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1122  07CF  00F2               	movwf	writeStrLCD@string
  1123  07D0  3080               	movlw	128
  1124  07D1  00F3               	movwf	writeStrLCD@string+1
  1125  07D2  120A  118A  24C7  120A  118A  	fcall	_writeStrLCD
  1126  07D7                     l1462:	
  1127                           
  1128                           ;main_s.c: 87:         setCursorLCD(2, 4);
  1129  07D7  3004               	movlw	4
  1130  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  1131  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  1132  07DA  00B5               	movwf	??_main
  1133  07DB  0835               	movf	??_main,w
  1134  07DC  00F3               	movwf	setCursorLCD@x
  1135  07DD  3002               	movlw	2
  1136  07DE  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  1137  07E3                     l1464:	
  1138                           
  1139                           ;main_s.c: 88:         writeIntLCD(hum);
  1140  07E3  1283               	bcf	3,5	;RP0=0, select bank0
  1141  07E4  1303               	bcf	3,6	;RP1=0, select bank0
  1142  07E5  0839               	movf	_hum,w
  1143  07E6  120A  118A  2435  120A  118A  	fcall	_writeIntLCD
  1144  07EB  2EB9               	goto	l1404
  1145  07EC  120A  118A  2800   	ljmp	start
  1146  07EF                     __end_of_main:	
  1147                           
  1148                           	psect	text1
  1149  0435                     __ptext1:	
  1150 ;; *************** function _writeIntLCD *****************
  1151 ;; Defined at:
  1152 ;;		line 66 in file "LCD.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;  numero          1    wreg     unsigned char 
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;  numero          1   20[BANK0 ] unsigned char 
  1157 ;;  buffer          4   16[BANK0 ] unsigned char [4]
  1158 ;; Return value:  Size  Location     Type
  1159 ;;                  1    wreg      void 
  1160 ;; Registers used:
  1161 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1162 ;; Tracked objects:
  1163 ;;		On entry : 0/0
  1164 ;;		On exit  : 0/0
  1165 ;;		Unchanged: 0/0
  1166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1167 ;;      Params:         0       0       0       0       0
  1168 ;;      Locals:         0       5       0       0       0
  1169 ;;      Temps:          0       3       0       0       0
  1170 ;;      Totals:         0       8       0       0       0
  1171 ;;Total ram usage:        8 bytes
  1172 ;; Hardware stack levels used:    1
  1173 ;; Hardware stack levels required when called:    2
  1174 ;; This function calls:
  1175 ;;		_sprintf
  1176 ;;		_writeStrLCD
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;;		_writeFloat
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           
  1184                           ;psect for function _writeIntLCD
  1185  0435                     _writeIntLCD:	
  1186                           
  1187                           ;incstack = 0
  1188                           ; Regs used in _writeIntLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1189                           ;writeIntLCD@numero stored from wreg
  1190  0435  1283               	bcf	3,5	;RP0=0, select bank0
  1191  0436  1303               	bcf	3,6	;RP1=0, select bank0
  1192  0437  00B4               	movwf	writeIntLCD@numero
  1193  0438                     l1400:	
  1194                           
  1195                           ;LCD.c: 67:     char buffer [4];;LCD.c: 68:     sprintf (buffer, "%d", numero);
  1196  0438  3017               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1197  0439  00AD               	movwf	??_writeIntLCD
  1198  043A  082D               	movf	??_writeIntLCD,w
  1199  043B  00A0               	movwf	sprintf@f
  1200  043C  0834               	movf	writeIntLCD@numero,w
  1201  043D  00AE               	movwf	??_writeIntLCD+1
  1202  043E  01AF               	clrf	??_writeIntLCD+2
  1203  043F  082E               	movf	??_writeIntLCD+1,w
  1204  0440  00A1               	movwf	?_sprintf+1
  1205  0441  082F               	movf	??_writeIntLCD+2,w
  1206  0442  00A2               	movwf	?_sprintf+2
  1207  0443  3030               	movlw	(low (writeIntLCD@buffer| 0))& (0+255)
  1208  0444  120A  118A  25CC  120A  118A  	fcall	_sprintf
  1209                           
  1210                           ;LCD.c: 69:     writeStrLCD(buffer);
  1211  0449  3030               	movlw	(low (writeIntLCD@buffer| 0))& (0+255)
  1212  044A  00F2               	movwf	writeStrLCD@string
  1213  044B  3000               	movlw	0
  1214  044C  00F3               	movwf	writeStrLCD@string+1
  1215  044D  120A  118A  24C7  120A  118A  	fcall	_writeStrLCD
  1216  0452                     l190:	
  1217  0452  0008               	return
  1218  0453                     __end_of_writeIntLCD:	
  1219                           
  1220                           	psect	text2
  1221  05CC                     __ptext2:	
  1222 ;; *************** function _sprintf *****************
  1223 ;; Defined at:
  1224 ;;		line 505 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;  sp              1    wreg     PTR unsigned char 
  1227 ;;		 -> writeIntLCD@buffer(4), 
  1228 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1229 ;;		 -> STR_10(3), 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1232 ;;		 -> writeIntLCD@buffer(4), 
  1233 ;;  tmpval          4    0        struct .
  1234 ;;  val             2    9[BANK0 ] unsigned int 
  1235 ;;  cp              2    0        PTR const unsigned char 
  1236 ;;  len             2    0        unsigned int 
  1237 ;;  c               1   12[BANK0 ] unsigned char 
  1238 ;;  prec            1    8[BANK0 ] char 
  1239 ;;  flag            1    7[BANK0 ] unsigned char 
  1240 ;;  ap              1    6[BANK0 ] PTR void [1]
  1241 ;;		 -> ?_sprintf(2), 
  1242 ;; Return value:  Size  Location     Type
  1243 ;;                  2    0[BANK0 ] int 
  1244 ;; Registers used:
  1245 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1246 ;; Tracked objects:
  1247 ;;		On entry : 0/0
  1248 ;;		On exit  : 0/0
  1249 ;;		Unchanged: 0/0
  1250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1251 ;;      Params:         0       3       0       0       0
  1252 ;;      Locals:         0       7       0       0       0
  1253 ;;      Temps:          0       3       0       0       0
  1254 ;;      Totals:         0      13       0       0       0
  1255 ;;Total ram usage:       13 bytes
  1256 ;; Hardware stack levels used:    1
  1257 ;; Hardware stack levels required when called:    1
  1258 ;; This function calls:
  1259 ;;		___lwdiv
  1260 ;;		___lwmod
  1261 ;; This function is called by:
  1262 ;;		_writeIntLCD
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266                           
  1267                           ;psect for function _sprintf
  1268  05CC                     _sprintf:	
  1269                           
  1270                           ;incstack = 0
  1271                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1272                           ;sprintf@sp stored from wreg
  1273  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  1274  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  1275  05CE  00AB               	movwf	sprintf@sp
  1276  05CF                     l1294:	
  1277                           
  1278                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 505: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources
      +                          \c90\common\doprnt.c: 506: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\
      +                          common\doprnt.c: 507:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\source
      +                          s\c90\common\doprnt.c: 512:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sour
      +                          ces\c90\common\doprnt.c: 521:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .10\pic\sources\c90\common\doprnt.c: 525:  unsigned char flag;
  1279  05CF  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1280  05D0  00A3               	movwf	??_sprintf
  1281  05D1  0823               	movf	??_sprintf,w
  1282  05D2  00A6               	movwf	sprintf@ap
  1283                           
  1284                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
  1285  05D3  2E9D               	goto	l1346
  1286  05D4                     l1296:	
  1287                           
  1288                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 555:   if(c
      +                           != '%')
  1289  05D4  3025               	movlw	37
  1290  05D5  062C               	xorwf	sprintf@c,w
  1291  05D6  1903               	btfsc	3,2
  1292  05D7  2DD9               	goto	u471
  1293  05D8  2DDA               	goto	u470
  1294  05D9                     u471:	
  1295  05D9  2DE6               	goto	l1302
  1296  05DA                     u470:	
  1297  05DA                     l1298:	
  1298                           
  1299                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 557:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 558:    ((*sp+
      +                          + = (c)));
  1300  05DA  082C               	movf	sprintf@c,w
  1301  05DB  00A3               	movwf	??_sprintf
  1302  05DC  082B               	movf	sprintf@sp,w
  1303  05DD  0084               	movwf	4
  1304  05DE  0823               	movf	??_sprintf,w
  1305  05DF  1383               	bcf	3,7	;select IRP bank0
  1306  05E0  0080               	movwf	0
  1307  05E1                     l1300:	
  1308  05E1  3001               	movlw	1
  1309  05E2  00A3               	movwf	??_sprintf
  1310  05E3  0823               	movf	??_sprintf,w
  1311  05E4  07AB               	addwf	sprintf@sp,f
  1312                           
  1313                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 559:    con
      +                          tinue;
  1314  05E5  2E9D               	goto	l1346
  1315  05E6                     l1302:	
  1316                           
  1317                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 565:   flag
      +                           = 0;
  1318  05E6  01A7               	clrf	sprintf@flag
  1319  05E7                     l1306:	
  1320                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 661:   swit
      +                          ch(c = *f++) {
  1321                           
  1322  05E7  3001               	movlw	1
  1323  05E8  07A0               	addwf	sprintf@f,f
  1324  05E9  30FF               	movlw	-1
  1325  05EA  0720               	addwf	sprintf@f,w
  1326  05EB  0084               	movwf	4
  1327  05EC  120A  118A  200D  120A  118A  	fcall	stringdir
  1328  05F1  00AC               	movwf	sprintf@c
  1329  05F2  00A3               	movwf	??_sprintf
  1330  05F3  01A4               	clrf	??_sprintf+1
  1331                           
  1332                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1333                           ; Switch size 1, requested type "simple"
  1334                           ; Number of cases is 1, Range of values is 0 to 0
  1335                           ; switch strategies available:
  1336                           ; Name         Instructions Cycles
  1337                           ; simple_byte            4     3 (average)
  1338                           ; direct_byte           11     8 (fixed)
  1339                           ; jumptable            260     6 (fixed)
  1340                           ;	Chosen strategy is simple_byte
  1341  05F4  0824               	movf	??_sprintf+1,w
  1342  05F5  3A00               	xorlw	0	; case 0
  1343  05F6  1903               	skipnz
  1344  05F7  2DF9               	goto	l1542
  1345  05F8  2E9D               	goto	l1346
  1346  05F9                     l1542:	
  1347                           
  1348                           ; Switch size 1, requested type "simple"
  1349                           ; Number of cases is 3, Range of values is 0 to 105
  1350                           ; switch strategies available:
  1351                           ; Name         Instructions Cycles
  1352                           ; simple_byte           10     6 (average)
  1353                           ; jumptable            260     6 (fixed)
  1354                           ;	Chosen strategy is simple_byte
  1355  05F9  0823               	movf	??_sprintf,w
  1356  05FA  3A00               	xorlw	0	; case 0
  1357  05FB  1903               	skipnz
  1358  05FC  2EAF               	goto	l1348
  1359  05FD  3A64               	xorlw	100	; case 100
  1360  05FE  1903               	skipnz
  1361  05FF  2E04               	goto	l1308
  1362  0600  3A0D               	xorlw	13	; case 105
  1363  0601  1903               	skipnz
  1364  0602  2E04               	goto	l1308
  1365  0603  2E9D               	goto	l1346
  1366  0604                     l1308:	
  1367                           
  1368                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1279:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1285:     val
      +                           = (unsigned int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1369  0604  0826               	movf	sprintf@ap,w
  1370  0605  0084               	movwf	4
  1371  0606  1383               	bcf	3,7	;select IRP bank0
  1372  0607  0800               	movf	0,w
  1373  0608  00A9               	movwf	sprintf@val
  1374  0609  0A84               	incf	4,f
  1375  060A  0800               	movf	0,w
  1376  060B  00AA               	movwf	sprintf@val+1
  1377  060C                     l1310:	
  1378  060C  3002               	movlw	2
  1379  060D  00A3               	movwf	??_sprintf
  1380  060E  0823               	movf	??_sprintf,w
  1381  060F  07A6               	addwf	sprintf@ap,f
  1382  0610                     l1312:	
  1383                           
  1384                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1287:    if
      +                          ((int)val < 0) {
  1385  0610  1FAA               	btfss	sprintf@val+1,7
  1386  0611  2E13               	goto	u481
  1387  0612  2E14               	goto	u480
  1388  0613                     u481:	
  1389  0613  2E1D               	goto	l1318
  1390  0614                     u480:	
  1391  0614                     l1314:	
  1392                           
  1393                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1288:     f
      +                          lag |= 0x03;
  1394  0614  3003               	movlw	3
  1395  0615  00A3               	movwf	??_sprintf
  1396  0616  0823               	movf	??_sprintf,w
  1397  0617  04A7               	iorwf	sprintf@flag,f
  1398  0618                     l1316:	
  1399                           
  1400                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1289:     v
      +                          al = -val;
  1401  0618  09A9               	comf	sprintf@val,f
  1402  0619  09AA               	comf	sprintf@val+1,f
  1403  061A  0AA9               	incf	sprintf@val,f
  1404  061B  1903               	skipnz
  1405  061C  0AAA               	incf	sprintf@val+1,f
  1406  061D                     l1318:	
  1407                           
  1408                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1292:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1331:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1409  061D  01AC               	clrf	sprintf@c
  1410  061E  0AAC               	incf	sprintf@c,f
  1411  061F                     l1324:	
  1412                           
  1413                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1332:     i
      +                          f(val < dpowers[c])
  1414  061F  082C               	movf	sprintf@c,w
  1415  0620  00A3               	movwf	??_sprintf
  1416  0621  0723               	addwf	??_sprintf,w
  1417  0622  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1418  0623  0084               	movwf	4
  1419  0624  120A  118A  200D  120A  118A  	fcall	stringdir
  1420  0629  00A4               	movwf	??_sprintf+1
  1421  062A  120A  118A  200D  120A  118A  	fcall	stringdir
  1422  062F  00A5               	movwf	??_sprintf+2
  1423  0630  0825               	movf	??_sprintf+2,w
  1424  0631  022A               	subwf	sprintf@val+1,w
  1425  0632  1D03               	skipz
  1426  0633  2E36               	goto	u495
  1427  0634  0824               	movf	??_sprintf+1,w
  1428  0635  0229               	subwf	sprintf@val,w
  1429  0636                     u495:	
  1430  0636  1803               	skipnc
  1431  0637  2E39               	goto	u491
  1432  0638  2E3A               	goto	u490
  1433  0639                     u491:	
  1434  0639  2E3B               	goto	l1328
  1435  063A                     u490:	
  1436  063A  2E45               	goto	l1330
  1437  063B                     l1328:	
  1438  063B  3001               	movlw	1
  1439  063C  00A3               	movwf	??_sprintf
  1440  063D  0823               	movf	??_sprintf,w
  1441  063E  07AC               	addwf	sprintf@c,f
  1442  063F  3005               	movlw	5
  1443  0640  062C               	xorwf	sprintf@c,w
  1444  0641  1D03               	btfss	3,2
  1445  0642  2E44               	goto	u501
  1446  0643  2E45               	goto	u500
  1447  0644                     u501:	
  1448  0644  2E1F               	goto	l1324
  1449  0645                     u500:	
  1450  0645                     l1330:	
  1451                           
  1452                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1448:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1464:    if(f
      +                          lag & 0x03)
  1453  0645  0827               	movf	sprintf@flag,w
  1454  0646  3903               	andlw	3
  1455  0647  1903               	btfsc	3,2
  1456  0648  2E4A               	goto	u511
  1457  0649  2E4B               	goto	u510
  1458  064A                     u511:	
  1459  064A  2E56               	goto	l1336
  1460  064B                     u510:	
  1461  064B                     l1332:	
  1462                           
  1463                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1465:     (
      +                          (*sp++ = ('-')));
  1464  064B  302D               	movlw	45
  1465  064C  00A3               	movwf	??_sprintf
  1466  064D  082B               	movf	sprintf@sp,w
  1467  064E  0084               	movwf	4
  1468  064F  0823               	movf	??_sprintf,w
  1469  0650  1383               	bcf	3,7	;select IRP bank0
  1470  0651  0080               	movwf	0
  1471  0652                     l1334:	
  1472  0652  3001               	movlw	1
  1473  0653  00A3               	movwf	??_sprintf
  1474  0654  0823               	movf	??_sprintf,w
  1475  0655  07AB               	addwf	sprintf@sp,f
  1476  0656                     l1336:	
  1477                           
  1478                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1495:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1498:   prec 
      +                          = c;
  1479  0656  082C               	movf	sprintf@c,w
  1480  0657  00A3               	movwf	??_sprintf
  1481  0658  0823               	movf	??_sprintf,w
  1482  0659  00A8               	movwf	sprintf@prec
  1483                           
  1484                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
  1485  065A  2E94               	goto	l1344
  1486  065B                     l1338:	
  1487                           
  1488                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1504:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1515:     c 
      +                          = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  1489  065B  300A               	movlw	10
  1490  065C  00F8               	movwf	___lwmod@divisor
  1491  065D  3000               	movlw	0
  1492  065E  00F9               	movwf	___lwmod@divisor+1
  1493  065F  0828               	movf	sprintf@prec,w
  1494  0660  00A3               	movwf	??_sprintf
  1495  0661  0723               	addwf	??_sprintf,w
  1496  0662  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1497  0663  0084               	movwf	4
  1498  0664  120A  118A  200D  120A  118A  	fcall	stringdir
  1499  0669  00F0               	movwf	___lwdiv@divisor
  1500  066A  120A  118A  200D  120A  118A  	fcall	stringdir
  1501  066F  00F1               	movwf	___lwdiv@divisor+1
  1502  0670  082A               	movf	sprintf@val+1,w
  1503  0671  00F3               	movwf	___lwdiv@dividend+1
  1504  0672  0829               	movf	sprintf@val,w
  1505  0673  00F2               	movwf	___lwdiv@dividend
  1506  0674  120A  118A  2509  120A  118A  	fcall	___lwdiv
  1507  0679  0871               	movf	?___lwdiv+1,w
  1508  067A  00FB               	movwf	___lwmod@dividend+1
  1509  067B  0870               	movf	?___lwdiv,w
  1510  067C  00FA               	movwf	___lwmod@dividend
  1511  067D  120A  118A  248D  120A  118A  	fcall	___lwmod
  1512  0682  0878               	movf	?___lwmod,w
  1513  0683  3E30               	addlw	48
  1514  0684  1283               	bcf	3,5	;RP0=0, select bank0
  1515  0685  1303               	bcf	3,6	;RP1=0, select bank0
  1516  0686  00A4               	movwf	??_sprintf+1
  1517  0687  0824               	movf	??_sprintf+1,w
  1518  0688  00AC               	movwf	sprintf@c
  1519  0689                     l1340:	
  1520                           
  1521                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1549:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1550:    ((*
      +                          sp++ = (c)));
  1522  0689  082C               	movf	sprintf@c,w
  1523  068A  00A3               	movwf	??_sprintf
  1524  068B  082B               	movf	sprintf@sp,w
  1525  068C  0084               	movwf	4
  1526  068D  0823               	movf	??_sprintf,w
  1527  068E  1383               	bcf	3,7	;select IRP bank0
  1528  068F  0080               	movwf	0
  1529  0690                     l1342:	
  1530  0690  3001               	movlw	1
  1531  0691  00A3               	movwf	??_sprintf
  1532  0692  0823               	movf	??_sprintf,w
  1533  0693  07AB               	addwf	sprintf@sp,f
  1534  0694                     l1344:	
  1535                           
  1536                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
  1537  0694  30FF               	movlw	255
  1538  0695  00A3               	movwf	??_sprintf
  1539  0696  0823               	movf	??_sprintf,w
  1540  0697  07A8               	addwf	sprintf@prec,f
  1541  0698  0A28               	incf	sprintf@prec,w
  1542  0699  1D03               	btfss	3,2
  1543  069A  2E9C               	goto	u521
  1544  069B  2E9D               	goto	u520
  1545  069C                     u521:	
  1546  069C  2E5B               	goto	l1338
  1547  069D                     u520:	
  1548  069D                     l1346:	
  1549                           
  1550                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
  1551  069D  3001               	movlw	1
  1552  069E  07A0               	addwf	sprintf@f,f
  1553  069F  30FF               	movlw	-1
  1554  06A0  0720               	addwf	sprintf@f,w
  1555  06A1  0084               	movwf	4
  1556  06A2  120A  118A  200D  120A  118A  	fcall	stringdir
  1557  06A7  00A3               	movwf	??_sprintf
  1558  06A8  0823               	movf	??_sprintf,w
  1559  06A9  00AC               	movwf	sprintf@c
  1560  06AA  082C               	movf	sprintf@c,w
  1561  06AB  1D03               	btfss	3,2
  1562  06AC  2EAE               	goto	u531
  1563  06AD  2EAF               	goto	u530
  1564  06AE                     u531:	
  1565  06AE  2DD4               	goto	l1296
  1566  06AF                     u530:	
  1567  06AF                     l1348:	
  1568                           
  1569                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1564:  *sp 
      +                          = 0;
  1570  06AF  082B               	movf	sprintf@sp,w
  1571  06B0  0084               	movwf	4
  1572  06B1  1383               	bcf	3,7	;select IRP bank0
  1573  06B2  0180               	clrf	0
  1574  06B3                     l304:	
  1575  06B3  0008               	return
  1576  06B4                     __end_of_sprintf:	
  1577                           
  1578                           	psect	text3
  1579  048D                     __ptext3:	
  1580 ;; *************** function ___lwmod *****************
  1581 ;; Defined at:
  1582 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;  divisor         2    8[COMMON] unsigned int 
  1585 ;;  dividend        2   10[COMMON] unsigned int 
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  counter         1   13[COMMON] unsigned char 
  1588 ;; Return value:  Size  Location     Type
  1589 ;;                  2    8[COMMON] unsigned int 
  1590 ;; Registers used:
  1591 ;;		wreg, status,2, status,0
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: 0/0
  1596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1597 ;;      Params:         4       0       0       0       0
  1598 ;;      Locals:         1       0       0       0       0
  1599 ;;      Temps:          1       0       0       0       0
  1600 ;;      Totals:         6       0       0       0       0
  1601 ;;Total ram usage:        6 bytes
  1602 ;; Hardware stack levels used:    1
  1603 ;; This function calls:
  1604 ;;		Nothing
  1605 ;; This function is called by:
  1606 ;;		_sprintf
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           
  1611                           ;psect for function ___lwmod
  1612  048D                     ___lwmod:	
  1613  048D                     l1228:	
  1614                           ;incstack = 0
  1615                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1616                           
  1617  048D  0878               	movf	___lwmod@divisor,w
  1618  048E  0479               	iorwf	___lwmod@divisor+1,w
  1619  048F  1903               	btfsc	3,2
  1620  0490  2C92               	goto	u351
  1621  0491  2C93               	goto	u350
  1622  0492                     u351:	
  1623  0492  2CC2               	goto	l1246
  1624  0493                     u350:	
  1625  0493                     l1230:	
  1626  0493  01FD               	clrf	___lwmod@counter
  1627  0494  0AFD               	incf	___lwmod@counter,f
  1628  0495  2CA1               	goto	l1236
  1629  0496                     l1232:	
  1630  0496  3001               	movlw	1
  1631  0497                     u365:	
  1632  0497  1003               	clrc
  1633  0498  0DF8               	rlf	___lwmod@divisor,f
  1634  0499  0DF9               	rlf	___lwmod@divisor+1,f
  1635  049A  3EFF               	addlw	-1
  1636  049B  1D03               	skipz
  1637  049C  2C97               	goto	u365
  1638  049D                     l1234:	
  1639  049D  3001               	movlw	1
  1640  049E  00FC               	movwf	??___lwmod
  1641  049F  087C               	movf	??___lwmod,w
  1642  04A0  07FD               	addwf	___lwmod@counter,f
  1643  04A1                     l1236:	
  1644  04A1  1FF9               	btfss	___lwmod@divisor+1,7
  1645  04A2  2CA4               	goto	u371
  1646  04A3  2CA5               	goto	u370
  1647  04A4                     u371:	
  1648  04A4  2C96               	goto	l1232
  1649  04A5                     u370:	
  1650  04A5                     l1238:	
  1651  04A5  0879               	movf	___lwmod@divisor+1,w
  1652  04A6  027B               	subwf	___lwmod@dividend+1,w
  1653  04A7  1D03               	skipz
  1654  04A8  2CAB               	goto	u385
  1655  04A9  0878               	movf	___lwmod@divisor,w
  1656  04AA  027A               	subwf	___lwmod@dividend,w
  1657  04AB                     u385:	
  1658  04AB  1C03               	skipc
  1659  04AC  2CAE               	goto	u381
  1660  04AD  2CAF               	goto	u380
  1661  04AE                     u381:	
  1662  04AE  2CB5               	goto	l1242
  1663  04AF                     u380:	
  1664  04AF                     l1240:	
  1665  04AF  0878               	movf	___lwmod@divisor,w
  1666  04B0  02FA               	subwf	___lwmod@dividend,f
  1667  04B1  0879               	movf	___lwmod@divisor+1,w
  1668  04B2  1C03               	skipc
  1669  04B3  03FB               	decf	___lwmod@dividend+1,f
  1670  04B4  02FB               	subwf	___lwmod@dividend+1,f
  1671  04B5                     l1242:	
  1672  04B5  3001               	movlw	1
  1673  04B6                     u395:	
  1674  04B6  1003               	clrc
  1675  04B7  0CF9               	rrf	___lwmod@divisor+1,f
  1676  04B8  0CF8               	rrf	___lwmod@divisor,f
  1677  04B9  3EFF               	addlw	-1
  1678  04BA  1D03               	skipz
  1679  04BB  2CB6               	goto	u395
  1680  04BC                     l1244:	
  1681  04BC  3001               	movlw	1
  1682  04BD  02FD               	subwf	___lwmod@counter,f
  1683  04BE  1D03               	btfss	3,2
  1684  04BF  2CC1               	goto	u401
  1685  04C0  2CC2               	goto	u400
  1686  04C1                     u401:	
  1687  04C1  2CA5               	goto	l1238
  1688  04C2                     u400:	
  1689  04C2                     l1246:	
  1690  04C2  087B               	movf	___lwmod@dividend+1,w
  1691  04C3  00F9               	movwf	?___lwmod+1
  1692  04C4  087A               	movf	___lwmod@dividend,w
  1693  04C5  00F8               	movwf	?___lwmod
  1694  04C6                     l590:	
  1695  04C6  0008               	return
  1696  04C7                     __end_of___lwmod:	
  1697                           
  1698                           	psect	text4
  1699  0509                     __ptext4:	
  1700 ;; *************** function ___lwdiv *****************
  1701 ;; Defined at:
  1702 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  divisor         2    0[COMMON] unsigned int 
  1705 ;;  dividend        2    2[COMMON] unsigned int 
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;  quotient        2    5[COMMON] unsigned int 
  1708 ;;  counter         1    7[COMMON] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  2    0[COMMON] unsigned int 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1718 ;;      Params:         4       0       0       0       0
  1719 ;;      Locals:         3       0       0       0       0
  1720 ;;      Temps:          1       0       0       0       0
  1721 ;;      Totals:         8       0       0       0       0
  1722 ;;Total ram usage:        8 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; This function calls:
  1725 ;;		Nothing
  1726 ;; This function is called by:
  1727 ;;		_sprintf
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           
  1732                           ;psect for function ___lwdiv
  1733  0509                     ___lwdiv:	
  1734  0509                     l1202:	
  1735                           ;incstack = 0
  1736                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1737                           
  1738  0509  01F5               	clrf	___lwdiv@quotient
  1739  050A  01F6               	clrf	___lwdiv@quotient+1
  1740  050B                     l1204:	
  1741  050B  0870               	movf	___lwdiv@divisor,w
  1742  050C  0471               	iorwf	___lwdiv@divisor+1,w
  1743  050D  1903               	btfsc	3,2
  1744  050E  2D10               	goto	u281
  1745  050F  2D11               	goto	u280
  1746  0510                     u281:	
  1747  0510  2D48               	goto	l1224
  1748  0511                     u280:	
  1749  0511                     l1206:	
  1750  0511  01F7               	clrf	___lwdiv@counter
  1751  0512  0AF7               	incf	___lwdiv@counter,f
  1752  0513  2D1F               	goto	l1212
  1753  0514                     l1208:	
  1754  0514  3001               	movlw	1
  1755  0515                     u295:	
  1756  0515  1003               	clrc
  1757  0516  0DF0               	rlf	___lwdiv@divisor,f
  1758  0517  0DF1               	rlf	___lwdiv@divisor+1,f
  1759  0518  3EFF               	addlw	-1
  1760  0519  1D03               	skipz
  1761  051A  2D15               	goto	u295
  1762  051B                     l1210:	
  1763  051B  3001               	movlw	1
  1764  051C  00F4               	movwf	??___lwdiv
  1765  051D  0874               	movf	??___lwdiv,w
  1766  051E  07F7               	addwf	___lwdiv@counter,f
  1767  051F                     l1212:	
  1768  051F  1FF1               	btfss	___lwdiv@divisor+1,7
  1769  0520  2D22               	goto	u301
  1770  0521  2D23               	goto	u300
  1771  0522                     u301:	
  1772  0522  2D14               	goto	l1208
  1773  0523                     u300:	
  1774  0523                     l1214:	
  1775  0523  3001               	movlw	1
  1776  0524                     u315:	
  1777  0524  1003               	clrc
  1778  0525  0DF5               	rlf	___lwdiv@quotient,f
  1779  0526  0DF6               	rlf	___lwdiv@quotient+1,f
  1780  0527  3EFF               	addlw	-1
  1781  0528  1D03               	skipz
  1782  0529  2D24               	goto	u315
  1783  052A  0871               	movf	___lwdiv@divisor+1,w
  1784  052B  0273               	subwf	___lwdiv@dividend+1,w
  1785  052C  1D03               	skipz
  1786  052D  2D30               	goto	u325
  1787  052E  0870               	movf	___lwdiv@divisor,w
  1788  052F  0272               	subwf	___lwdiv@dividend,w
  1789  0530                     u325:	
  1790  0530  1C03               	skipc
  1791  0531  2D33               	goto	u321
  1792  0532  2D34               	goto	u320
  1793  0533                     u321:	
  1794  0533  2D3B               	goto	l1220
  1795  0534                     u320:	
  1796  0534                     l1216:	
  1797  0534  0870               	movf	___lwdiv@divisor,w
  1798  0535  02F2               	subwf	___lwdiv@dividend,f
  1799  0536  0871               	movf	___lwdiv@divisor+1,w
  1800  0537  1C03               	skipc
  1801  0538  03F3               	decf	___lwdiv@dividend+1,f
  1802  0539  02F3               	subwf	___lwdiv@dividend+1,f
  1803  053A                     l1218:	
  1804  053A  1475               	bsf	___lwdiv@quotient,0
  1805  053B                     l1220:	
  1806  053B  3001               	movlw	1
  1807  053C                     u335:	
  1808  053C  1003               	clrc
  1809  053D  0CF1               	rrf	___lwdiv@divisor+1,f
  1810  053E  0CF0               	rrf	___lwdiv@divisor,f
  1811  053F  3EFF               	addlw	-1
  1812  0540  1D03               	skipz
  1813  0541  2D3C               	goto	u335
  1814  0542                     l1222:	
  1815  0542  3001               	movlw	1
  1816  0543  02F7               	subwf	___lwdiv@counter,f
  1817  0544  1D03               	btfss	3,2
  1818  0545  2D47               	goto	u341
  1819  0546  2D48               	goto	u340
  1820  0547                     u341:	
  1821  0547  2D23               	goto	l1214
  1822  0548                     u340:	
  1823  0548                     l1224:	
  1824  0548  0876               	movf	___lwdiv@quotient+1,w
  1825  0549  00F1               	movwf	?___lwdiv+1
  1826  054A  0875               	movf	___lwdiv@quotient,w
  1827  054B  00F0               	movwf	?___lwdiv
  1828  054C                     l580:	
  1829  054C  0008               	return
  1830  054D                     __end_of___lwdiv:	
  1831                           
  1832                           	psect	text5
  1833  03C4                     __ptext5:	
  1834 ;; *************** function _spiWrite *****************
  1835 ;; Defined at:
  1836 ;;		line 49 in file "Lib_SPI_Ma.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;  dat             1    wreg     unsigned char 
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;  dat             1    0[COMMON] unsigned char 
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  1    wreg      void 
  1843 ;; Registers used:
  1844 ;;		wreg
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1850 ;;      Params:         0       0       0       0       0
  1851 ;;      Locals:         1       0       0       0       0
  1852 ;;      Temps:          0       0       0       0       0
  1853 ;;      Totals:         1       0       0       0       0
  1854 ;;Total ram usage:        1 bytes
  1855 ;; Hardware stack levels used:    1
  1856 ;; This function calls:
  1857 ;;		Nothing
  1858 ;; This function is called by:
  1859 ;;		_main
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863                           
  1864                           ;psect for function _spiWrite
  1865  03C4                     _spiWrite:	
  1866                           
  1867                           ;incstack = 0
  1868                           ; Regs used in _spiWrite: [wreg]
  1869                           ;spiWrite@dat stored from wreg
  1870  03C4  00F0               	movwf	spiWrite@dat
  1871  03C5                     l1392:	
  1872                           
  1873                           ;Lib_SPI_Ma.c: 49: void spiWrite(char dat);Lib_SPI_Ma.c: 50: {;Lib_SPI_Ma.c: 51:     SSP
      +                          BUF = dat;
  1874  03C5  0870               	movf	spiWrite@dat,w
  1875  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  1876  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  1877  03C8  0093               	movwf	19	;volatile
  1878  03C9                     l81:	
  1879  03C9  0008               	return
  1880  03CA                     __end_of_spiWrite:	
  1881                           
  1882                           	psect	text6
  1883  03D8                     __ptext6:	
  1884 ;; *************** function _spiRead *****************
  1885 ;; Defined at:
  1886 ;;		line 62 in file "Lib_SPI_Ma.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  1    wreg      unsigned char 
  1893 ;; Registers used:
  1894 ;;		wreg, status,2, status,0, pclath, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1900 ;;      Params:         0       0       0       0       0
  1901 ;;      Locals:         0       0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0
  1903 ;;      Totals:         0       0       0       0       0
  1904 ;;Total ram usage:        0 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    1
  1907 ;; This function calls:
  1908 ;;		_spiReceiveWait
  1909 ;; This function is called by:
  1910 ;;		_main
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           
  1915                           ;psect for function _spiRead
  1916  03D8                     _spiRead:	
  1917  03D8                     l1394:	
  1918                           ;incstack = 0
  1919                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1920                           
  1921                           
  1922                           ;Lib_SPI_Ma.c: 64:     spiReceiveWait();
  1923  03D8  120A  118A  23D1  120A  118A  	fcall	_spiReceiveWait
  1924  03DD                     l1396:	
  1925                           
  1926                           ;Lib_SPI_Ma.c: 65:     return(SSPBUF);
  1927  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  1928  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  1929  03DF  0813               	movf	19,w	;volatile
  1930  03E0                     l89:	
  1931  03E0  0008               	return
  1932  03E1                     __end_of_spiRead:	
  1933                           
  1934                           	psect	text7
  1935  03D1                     __ptext7:	
  1936 ;; *************** function _spiReceiveWait *****************
  1937 ;; Defined at:
  1938 ;;		line 44 in file "Lib_SPI_Ma.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;		None
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;		None
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		None
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1952 ;;      Params:         0       0       0       0       0
  1953 ;;      Locals:         0       0       0       0       0
  1954 ;;      Temps:          0       0       0       0       0
  1955 ;;      Totals:         0       0       0       0       0
  1956 ;;Total ram usage:        0 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; This function calls:
  1959 ;;		Nothing
  1960 ;; This function is called by:
  1961 ;;		_spiRead
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           
  1966                           ;psect for function _spiReceiveWait
  1967  03D1                     _spiReceiveWait:	
  1968  03D1                     l1292:	
  1969                           ;incstack = 0
  1970                           ; Regs used in _spiReceiveWait: []
  1971                           
  1972  03D1                     l75:	
  1973                           ;Lib_SPI_Ma.c: 46:     while ( !SSPSTATbits.BF );
  1974                           
  1975  03D1  1683               	bsf	3,5	;RP0=1, select bank1
  1976  03D2  1303               	bcf	3,6	;RP1=0, select bank1
  1977  03D3  1C14               	btfss	20,0	;volatile
  1978  03D4  2BD6               	goto	u461
  1979  03D5  2BD7               	goto	u460
  1980  03D6                     u461:	
  1981  03D6  2BD1               	goto	l75
  1982  03D7                     u460:	
  1983  03D7                     l78:	
  1984  03D7  0008               	return
  1985  03D8                     __end_of_spiReceiveWait:	
  1986                           
  1987                           	psect	text8
  1988  054D                     __ptext8:	
  1989 ;; *************** function _setup *****************
  1990 ;; Defined at:
  1991 ;;		line 102 in file "main_s.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;		None
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;		None
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  1    wreg      void 
  1998 ;; Registers used:
  1999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2005 ;;      Params:         0       0       0       0       0
  2006 ;;      Locals:         0       0       0       0       0
  2007 ;;      Temps:          1       0       0       0       0
  2008 ;;      Totals:         1       0       0       0       0
  2009 ;;Total ram usage:        1 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    2
  2012 ;; This function calls:
  2013 ;;		_clcLCD
  2014 ;;		_initLCD
  2015 ;;		_setCursorLCD
  2016 ;;		_spiInit
  2017 ;;		_writeStrLCD
  2018 ;; This function is called by:
  2019 ;;		_main
  2020 ;; This function uses a non-reentrant model
  2021 ;;
  2022                           
  2023                           
  2024                           ;psect for function _setup
  2025  054D                     _setup:	
  2026  054D                     l1356:	
  2027                           ;incstack = 0
  2028                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2029                           
  2030                           
  2031                           ;main_s.c: 103:     ANSEL = 0;
  2032  054D  1683               	bsf	3,5	;RP0=1, select bank3
  2033  054E  1703               	bsf	3,6	;RP1=1, select bank3
  2034  054F  0188               	clrf	8	;volatile
  2035                           
  2036                           ;main_s.c: 104:     ANSELH = 0;
  2037  0550  0189               	clrf	9	;volatile
  2038                           
  2039                           ;main_s.c: 106:     TRISB = 0;
  2040  0551  1683               	bsf	3,5	;RP0=1, select bank1
  2041  0552  1303               	bcf	3,6	;RP1=0, select bank1
  2042  0553  0186               	clrf	6	;volatile
  2043  0554                     l1358:	
  2044                           
  2045                           ;main_s.c: 107:     TRISC = 0b00010000;
  2046  0554  3010               	movlw	16
  2047  0555  0087               	movwf	7	;volatile
  2048  0556                     l1360:	
  2049                           
  2050                           ;main_s.c: 108:     TRISD = 0;
  2051  0556  0188               	clrf	8	;volatile
  2052  0557                     l1362:	
  2053                           
  2054                           ;main_s.c: 109:     PORTB = 0;
  2055  0557  1283               	bcf	3,5	;RP0=0, select bank0
  2056  0558  1303               	bcf	3,6	;RP1=0, select bank0
  2057  0559  0186               	clrf	6	;volatile
  2058  055A                     l1364:	
  2059                           
  2060                           ;main_s.c: 110:     PORTD = 0;
  2061  055A  0188               	clrf	8	;volatile
  2062  055B                     l1366:	
  2063                           
  2064                           ;main_s.c: 112:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_
      +                          LOW, SPI_IDLE_2_ACTIVE);
  2065  055B  01F0               	clrf	spiInit@sDataSample
  2066  055C  01F1               	clrf	spiInit@sClockIdle
  2067  055D  01F2               	clrf	spiInit@sTransmitEdge
  2068  055E  3020               	movlw	32
  2069  055F  120A  118A  2404  120A  118A  	fcall	_spiInit
  2070  0564                     l1368:	
  2071                           
  2072                           ;main_s.c: 114:     initLCD();
  2073  0564  120A  118A  2453  120A  118A  	fcall	_initLCD
  2074  0569                     l1370:	
  2075                           
  2076                           ;main_s.c: 115:     clcLCD();
  2077  0569  120A  118A  23CA  120A  118A  	fcall	_clcLCD
  2078  056E                     l1372:	
  2079                           
  2080                           ;main_s.c: 118:     setCursorLCD(1, 1);
  2081  056E  01F3               	clrf	setCursorLCD@x
  2082  056F  0AF3               	incf	setCursorLCD@x,f
  2083  0570  3001               	movlw	1
  2084  0571  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  2085  0576                     l1374:	
  2086                           
  2087                           ;main_s.c: 119:     writeStrLCD("P");
  2088  0576  3020               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2089  0577  00F2               	movwf	writeStrLCD@string
  2090  0578  3080               	movlw	128
  2091  0579  00F3               	movwf	writeStrLCD@string+1
  2092  057A  120A  118A  24C7  120A  118A  	fcall	_writeStrLCD
  2093  057F                     l1376:	
  2094                           
  2095                           ;main_s.c: 120:     setCursorLCD(1, 3);
  2096  057F  3003               	movlw	3
  2097  0580  00F9               	movwf	??_setup
  2098  0581  0879               	movf	??_setup,w
  2099  0582  00F3               	movwf	setCursorLCD@x
  2100  0583  3001               	movlw	1
  2101  0584  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  2102  0589                     l1378:	
  2103                           
  2104                           ;main_s.c: 121:     writeStrLCD("TEM");
  2105  0589  3013               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2106  058A  00F2               	movwf	writeStrLCD@string
  2107  058B  3080               	movlw	128
  2108  058C  00F3               	movwf	writeStrLCD@string+1
  2109  058D  120A  118A  24C7  120A  118A  	fcall	_writeStrLCD
  2110  0592                     l1380:	
  2111                           
  2112                           ;main_s.c: 122:     setCursorLCD(1, 7);
  2113  0592  3007               	movlw	7
  2114  0593  00F9               	movwf	??_setup
  2115  0594  0879               	movf	??_setup,w
  2116  0595  00F3               	movwf	setCursorLCD@x
  2117  0596  3001               	movlw	1
  2118  0597  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  2119  059C                     l1382:	
  2120                           
  2121                           ;main_s.c: 123:     writeStrLCD("HU");
  2122  059C  301D               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2123  059D  00F2               	movwf	writeStrLCD@string
  2124  059E  3080               	movlw	128
  2125  059F  00F3               	movwf	writeStrLCD@string+1
  2126  05A0  120A  118A  24C7  120A  118A  	fcall	_writeStrLCD
  2127  05A5                     l1384:	
  2128                           
  2129                           ;main_s.c: 124:     setCursorLCD(1, 10);
  2130  05A5  300A               	movlw	10
  2131  05A6  00F9               	movwf	??_setup
  2132  05A7  0879               	movf	??_setup,w
  2133  05A8  00F3               	movwf	setCursorLCD@x
  2134  05A9  3001               	movlw	1
  2135  05AA  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  2136  05AF                     l1386:	
  2137                           
  2138                           ;main_s.c: 125:     writeStrLCD("SOL");
  2139  05AF  300F               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2140  05B0  00F2               	movwf	writeStrLCD@string
  2141  05B1  3080               	movlw	128
  2142  05B2  00F3               	movwf	writeStrLCD@string+1
  2143  05B3  120A  118A  24C7  120A  118A  	fcall	_writeStrLCD
  2144  05B8                     l1388:	
  2145                           
  2146                           ;main_s.c: 126:     setCursorLCD(1, 14);
  2147  05B8  300E               	movlw	14
  2148  05B9  00F9               	movwf	??_setup
  2149  05BA  0879               	movf	??_setup,w
  2150  05BB  00F3               	movwf	setCursorLCD@x
  2151  05BC  3001               	movlw	1
  2152  05BD  120A  118A  2419  120A  118A  	fcall	_setCursorLCD
  2153  05C2                     l1390:	
  2154                           
  2155                           ;main_s.c: 127:     writeStrLCD("CA");
  2156  05C2  301A               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2157  05C3  00F2               	movwf	writeStrLCD@string
  2158  05C4  3080               	movlw	128
  2159  05C5  00F3               	movwf	writeStrLCD@string+1
  2160  05C6  120A  118A  24C7  120A  118A  	fcall	_writeStrLCD
  2161  05CB                     l57:	
  2162  05CB  0008               	return
  2163  05CC                     __end_of_setup:	
  2164                           
  2165                           	psect	text9
  2166  04C7                     __ptext9:	
  2167 ;; *************** function _writeStrLCD *****************
  2168 ;; Defined at:
  2169 ;;		line 30 in file "LCD.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  string          2    2[COMMON] PTR unsigned char 
  2172 ;;		 -> writeIntLCD@buffer(4), STR_9(3), STR_8(4), STR_7(3), 
  2173 ;;		 -> STR_6(4), STR_5(2), STR_4(4), STR_3(4), 
  2174 ;;		 -> STR_2(4), STR_1(4), 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  cont            2    7[COMMON] int 
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  1    wreg      void 
  2179 ;; Registers used:
  2180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2186 ;;      Params:         2       0       0       0       0
  2187 ;;      Locals:         2       0       0       0       0
  2188 ;;      Temps:          3       0       0       0       0
  2189 ;;      Totals:         7       0       0       0       0
  2190 ;;Total ram usage:        7 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    1
  2193 ;; This function calls:
  2194 ;;		_writeCharLCD
  2195 ;; This function is called by:
  2196 ;;		_main
  2197 ;;		_setup
  2198 ;;		_writeIntLCD
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           
  2203                           ;psect for function _writeStrLCD
  2204  04C7                     _writeStrLCD:	
  2205  04C7                     l1258:	
  2206                           ;incstack = 0
  2207                           ; Regs used in _writeStrLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2208                           
  2209                           
  2210                           ;LCD.c: 31:  int cont;;LCD.c: 32:  for(cont=0;string[cont]!='\0';cont++){
  2211  04C7  01F7               	clrf	writeStrLCD@cont
  2212  04C8  01F8               	clrf	writeStrLCD@cont+1
  2213  04C9  2CEC               	goto	l1264
  2214  04CA                     l1260:	
  2215                           
  2216                           ;LCD.c: 33:         writeCharLCD(string[cont]);
  2217  04CA  0877               	movf	writeStrLCD@cont,w
  2218  04CB  0772               	addwf	writeStrLCD@string,w
  2219  04CC  00F5               	movwf	??_writeStrLCD+1
  2220  04CD  0873               	movf	writeStrLCD@string+1,w
  2221  04CE  00F4               	movwf	??_writeStrLCD
  2222  04CF  1803               	skipnc
  2223  04D0  0AF4               	incf	??_writeStrLCD,f
  2224  04D1  1FF7               	btfss	writeStrLCD@cont,7
  2225  04D2  2CD4               	goto	u420
  2226  04D3  03F4               	decf	??_writeStrLCD,f
  2227  04D4                     u420:	
  2228  04D4  0874               	movf	??_writeStrLCD,w
  2229  04D5  00F6               	movwf	??_writeStrLCD+2
  2230  04D6  0876               	movf	??_writeStrLCD+2,w
  2231  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2232  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2233  04D9  00FF               	movwf	btemp+1
  2234  04DA  0875               	movf	??_writeStrLCD+1,w
  2235  04DB  0084               	movwf	4
  2236  04DC  120A  118A  2003  120A  118A  	fcall	stringtab
  2237  04E1  120A  118A  23E1  120A  118A  	fcall	_writeCharLCD
  2238  04E6                     l1262:	
  2239                           
  2240                           ;LCD.c: 34:     }
  2241  04E6  3001               	movlw	1
  2242  04E7  07F7               	addwf	writeStrLCD@cont,f
  2243  04E8  1803               	skipnc
  2244  04E9  0AF8               	incf	writeStrLCD@cont+1,f
  2245  04EA  3000               	movlw	0
  2246  04EB  07F8               	addwf	writeStrLCD@cont+1,f
  2247  04EC                     l1264:	
  2248  04EC  0877               	movf	writeStrLCD@cont,w
  2249  04ED  0772               	addwf	writeStrLCD@string,w
  2250  04EE  00F5               	movwf	??_writeStrLCD+1
  2251  04EF  0873               	movf	writeStrLCD@string+1,w
  2252  04F0  00F4               	movwf	??_writeStrLCD
  2253  04F1  1803               	skipnc
  2254  04F2  0AF4               	incf	??_writeStrLCD,f
  2255  04F3  1FF7               	btfss	writeStrLCD@cont,7
  2256  04F4  2CF6               	goto	u430
  2257  04F5  03F4               	decf	??_writeStrLCD,f
  2258  04F6                     u430:	
  2259  04F6  0874               	movf	??_writeStrLCD,w
  2260  04F7  00F6               	movwf	??_writeStrLCD+2
  2261  04F8  0876               	movf	??_writeStrLCD+2,w
  2262  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  2263  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  2264  04FB  00FF               	movwf	btemp+1
  2265  04FC  0875               	movf	??_writeStrLCD+1,w
  2266  04FD  0084               	movwf	4
  2267  04FE  120A  118A  2003  120A  118A  	fcall	stringtab
  2268  0503  3A00               	xorlw	0
  2269  0504  1D03               	skipz
  2270  0505  2D07               	goto	u441
  2271  0506  2D08               	goto	u440
  2272  0507                     u441:	
  2273  0507  2CCA               	goto	l1260
  2274  0508                     u440:	
  2275  0508                     l178:	
  2276  0508  0008               	return
  2277  0509                     __end_of_writeStrLCD:	
  2278                           
  2279                           	psect	text10
  2280  03E1                     __ptext10:	
  2281 ;; *************** function _writeCharLCD *****************
  2282 ;; Defined at:
  2283 ;;		line 37 in file "LCD.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;  character       1    wreg     unsigned char 
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;  character       1    1[COMMON] unsigned char 
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2297 ;;      Params:         0       0       0       0       0
  2298 ;;      Locals:         1       0       0       0       0
  2299 ;;      Temps:          1       0       0       0       0
  2300 ;;      Totals:         2       0       0       0       0
  2301 ;;Total ram usage:        2 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; This function calls:
  2304 ;;		Nothing
  2305 ;; This function is called by:
  2306 ;;		_writeStrLCD
  2307 ;;		_writeFloat
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           
  2312                           ;psect for function _writeCharLCD
  2313  03E1                     _writeCharLCD:	
  2314                           
  2315                           ;incstack = 0
  2316                           ; Regs used in _writeCharLCD: [wreg]
  2317                           ;writeCharLCD@character stored from wreg
  2318  03E1  00F1               	movwf	writeCharLCD@character
  2319  03E2                     l1194:	
  2320                           
  2321                           ;LCD.c: 38:    RD0 = 1;
  2322  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  2323  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  2324  03E4  1408               	bsf	8,0	;volatile
  2325  03E5                     l1196:	
  2326                           
  2327                           ;LCD.c: 39:    PORTB = character;
  2328  03E5  0871               	movf	writeCharLCD@character,w
  2329  03E6  0086               	movwf	6	;volatile
  2330  03E7                     l1198:	
  2331                           
  2332                           ;LCD.c: 40:    RD1 = 1;
  2333  03E7  1488               	bsf	8,1	;volatile
  2334                           
  2335                           ;LCD.c: 41:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2336  03E8  300D               	movlw	13
  2337  03E9  00F0               	movwf	??_writeCharLCD
  2338  03EA                     u607:	
  2339  03EA  0BF0               	decfsz	??_writeCharLCD,f
  2340  03EB  2BEA               	goto	u607
  2341  03EC                     l1200:	
  2342                           
  2343                           ;LCD.c: 42:    RD1 = 0;
  2344  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  2345  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  2346  03EE  1088               	bcf	8,1	;volatile
  2347  03EF                     l181:	
  2348  03EF  0008               	return
  2349  03F0                     __end_of_writeCharLCD:	
  2350                           
  2351                           	psect	text11
  2352  0404                     __ptext11:	
  2353 ;; *************** function _spiInit *****************
  2354 ;; Defined at:
  2355 ;;		line 27 in file "Lib_SPI_Ma.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  sType           1    wreg     enum E1293
  2358 ;;  sDataSample     1    0[COMMON] enum E1301
  2359 ;;  sClockIdle      1    1[COMMON] enum E1305
  2360 ;;  sTransmitEdg    1    2[COMMON] enum E1309
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;  sType           1    3[COMMON] enum E1293
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      void 
  2365 ;; Registers used:
  2366 ;;		wreg, status,2, status,0
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2372 ;;      Params:         3       0       0       0       0
  2373 ;;      Locals:         1       0       0       0       0
  2374 ;;      Temps:          0       0       0       0       0
  2375 ;;      Totals:         4       0       0       0       0
  2376 ;;Total ram usage:        4 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; This function calls:
  2379 ;;		Nothing
  2380 ;; This function is called by:
  2381 ;;		_setup
  2382 ;;		_conf
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           
  2387                           ;psect for function _spiInit
  2388  0404                     _spiInit:	
  2389                           
  2390                           ;incstack = 0
  2391                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2392                           ;spiInit@sType stored from wreg
  2393  0404  00F3               	movwf	spiInit@sType
  2394  0405                     l1266:	
  2395                           
  2396                           ;Lib_SPI_Ma.c: 27: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_I
      +                          dle sClockIdle, Spi_Transmit_Edge sTransmitEdge);Lib_SPI_Ma.c: 28: {;Lib_SPI_Ma.c: 30:  
      +                             if(sType & 0b00000100)
  2397  0405  1D73               	btfss	spiInit@sType,2
  2398  0406  2C08               	goto	u451
  2399  0407  2C09               	goto	u450
  2400  0408                     u451:	
  2401  0408  2C0E               	goto	l1270
  2402  0409                     u450:	
  2403  0409                     l1268:	
  2404                           
  2405                           ;Lib_SPI_Ma.c: 31:     {;Lib_SPI_Ma.c: 32:         SSPSTAT = sTransmitEdge;
  2406  0409  0872               	movf	spiInit@sTransmitEdge,w
  2407  040A  1683               	bsf	3,5	;RP0=1, select bank1
  2408  040B  1303               	bcf	3,6	;RP1=0, select bank1
  2409  040C  0094               	movwf	20	;volatile
  2410                           
  2411                           ;Lib_SPI_Ma.c: 34:     }
  2412  040D  2C13               	goto	l71
  2413  040E                     l1270:	
  2414                           
  2415                           ;Lib_SPI_Ma.c: 36:     {;Lib_SPI_Ma.c: 37:         SSPSTAT = sDataSample | sTransmitEdge
      +                          ;
  2416  040E  0870               	movf	spiInit@sDataSample,w
  2417  040F  0472               	iorwf	spiInit@sTransmitEdge,w
  2418  0410  1683               	bsf	3,5	;RP0=1, select bank1
  2419  0411  1303               	bcf	3,6	;RP1=0, select bank1
  2420  0412  0094               	movwf	20	;volatile
  2421  0413                     l71:	
  2422                           ;Lib_SPI_Ma.c: 39:     }
  2423                           
  2424                           
  2425                           ;Lib_SPI_Ma.c: 41:     SSPCON = sType | sClockIdle;
  2426  0413  0873               	movf	spiInit@sType,w
  2427  0414  0471               	iorwf	spiInit@sClockIdle,w
  2428  0415  1283               	bcf	3,5	;RP0=0, select bank0
  2429  0416  1303               	bcf	3,6	;RP1=0, select bank0
  2430  0417  0094               	movwf	20	;volatile
  2431  0418                     l72:	
  2432  0418  0008               	return
  2433  0419                     __end_of_spiInit:	
  2434                           
  2435                           	psect	text12
  2436  0419                     __ptext12:	
  2437 ;; *************** function _setCursorLCD *****************
  2438 ;; Defined at:
  2439 ;;		line 17 in file "LCD.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  y               1    wreg     unsigned char 
  2442 ;;  x               1    3[COMMON] unsigned char 
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;  y               1    5[COMMON] unsigned char 
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  1    wreg      void 
  2447 ;; Registers used:
  2448 ;;		wreg, status,2, status,0, pclath, cstack
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2454 ;;      Params:         1       0       0       0       0
  2455 ;;      Locals:         1       0       0       0       0
  2456 ;;      Temps:          1       0       0       0       0
  2457 ;;      Totals:         3       0       0       0       0
  2458 ;;Total ram usage:        3 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    1
  2461 ;; This function calls:
  2462 ;;		_cmdLCD
  2463 ;; This function is called by:
  2464 ;;		_main
  2465 ;;		_setup
  2466 ;;		_writeFloat
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           
  2471                           ;psect for function _setCursorLCD
  2472  0419                     _setCursorLCD:	
  2473                           
  2474                           ;incstack = 0
  2475                           ; Regs used in _setCursorLCD: [wreg+status,2+status,0+pclath+cstack]
  2476                           ;setCursorLCD@y stored from wreg
  2477  0419  00F5               	movwf	setCursorLCD@y
  2478  041A                     l1250:	
  2479                           
  2480                           ;LCD.c: 18:     if(y == 1){
  2481  041A  0375               	decf	setCursorLCD@y,w
  2482  041B  1D03               	btfss	3,2
  2483  041C  2C1E               	goto	u411
  2484  041D  2C1F               	goto	u410
  2485  041E                     u411:	
  2486  041E  2C27               	goto	l1254
  2487  041F                     u410:	
  2488  041F                     l1252:	
  2489                           
  2490                           ;LCD.c: 19:         cursor = 0x80 + x - 1;
  2491  041F  0873               	movf	setCursorLCD@x,w
  2492  0420  3E7F               	addlw	127
  2493  0421  00F4               	movwf	??_setCursorLCD
  2494  0422  0874               	movf	??_setCursorLCD,w
  2495  0423  1283               	bcf	3,5	;RP0=0, select bank0
  2496  0424  1303               	bcf	3,6	;RP1=0, select bank0
  2497  0425  00C1               	movwf	_cursor
  2498                           
  2499                           ;LCD.c: 20:     }else{
  2500  0426  2C2E               	goto	l1256
  2501  0427                     l1254:	
  2502                           
  2503                           ;LCD.c: 21:         cursor = 0xC0 + x - 1;
  2504  0427  0873               	movf	setCursorLCD@x,w
  2505  0428  3EBF               	addlw	191
  2506  0429  00F4               	movwf	??_setCursorLCD
  2507  042A  0874               	movf	??_setCursorLCD,w
  2508  042B  1283               	bcf	3,5	;RP0=0, select bank0
  2509  042C  1303               	bcf	3,6	;RP1=0, select bank0
  2510  042D  00C1               	movwf	_cursor
  2511  042E                     l1256:	
  2512                           
  2513                           ;LCD.c: 23:     cmdLCD(cursor);
  2514  042E  0841               	movf	_cursor,w
  2515  042F  120A  118A  23F0  120A  118A  	fcall	_cmdLCD
  2516  0434                     l169:	
  2517  0434  0008               	return
  2518  0435                     __end_of_setCursorLCD:	
  2519                           
  2520                           	psect	text13
  2521  0453                     __ptext13:	
  2522 ;; *************** function _initLCD *****************
  2523 ;; Defined at:
  2524 ;;		line 45 in file "LCD.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;		None
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      void 
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, status,0, pclath, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2538 ;;      Params:         0       0       0       0       0
  2539 ;;      Locals:         0       0       0       0       0
  2540 ;;      Temps:          2       0       0       0       0
  2541 ;;      Totals:         2       0       0       0       0
  2542 ;;Total ram usage:        2 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    1
  2545 ;; This function calls:
  2546 ;;		_cmdLCD
  2547 ;; This function is called by:
  2548 ;;		_setup
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           
  2553                           ;psect for function _initLCD
  2554  0453                     _initLCD:	
  2555  0453                     l1272:	
  2556                           ;incstack = 0
  2557                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  2558                           
  2559                           
  2560                           ;LCD.c: 46:      _delay((unsigned long)((15)*(4000000/4000.0)));
  2561  0453  3014               	movlw	20
  2562  0454  00F4               	movwf	??_initLCD+1
  2563  0455  3079               	movlw	121
  2564  0456  00F3               	movwf	??_initLCD
  2565  0457                     u617:	
  2566  0457  0BF3               	decfsz	??_initLCD,f
  2567  0458  2C57               	goto	u617
  2568  0459  0BF4               	decfsz	??_initLCD+1,f
  2569  045A  2C57               	goto	u617
  2570  045B  2C5C               	nop2
  2571  045C                     l1274:	
  2572                           
  2573                           ;LCD.c: 47:     cmdLCD(0x030);
  2574  045C  3030               	movlw	48
  2575  045D  120A  118A  23F0  120A  118A  	fcall	_cmdLCD
  2576  0462                     l1276:	
  2577                           
  2578                           ;LCD.c: 48:     cmdLCD(0x030);
  2579  0462  3030               	movlw	48
  2580  0463  120A  118A  23F0  120A  118A  	fcall	_cmdLCD
  2581  0468                     l1278:	
  2582                           
  2583                           ;LCD.c: 49:     cmdLCD(0x030);
  2584  0468  3030               	movlw	48
  2585  0469  120A  118A  23F0  120A  118A  	fcall	_cmdLCD
  2586  046E                     l1280:	
  2587                           
  2588                           ;LCD.c: 51:     cmdLCD(0x38);
  2589  046E  3038               	movlw	56
  2590  046F  120A  118A  23F0  120A  118A  	fcall	_cmdLCD
  2591  0474                     l1282:	
  2592                           
  2593                           ;LCD.c: 52:     cmdLCD(0x10);
  2594  0474  3010               	movlw	16
  2595  0475  120A  118A  23F0  120A  118A  	fcall	_cmdLCD
  2596  047A                     l1284:	
  2597                           
  2598                           ;LCD.c: 53:     cmdLCD(0x01);
  2599  047A  3001               	movlw	1
  2600  047B  120A  118A  23F0  120A  118A  	fcall	_cmdLCD
  2601  0480                     l1286:	
  2602                           
  2603                           ;LCD.c: 54:     cmdLCD(0x06);
  2604  0480  3006               	movlw	6
  2605  0481  120A  118A  23F0  120A  118A  	fcall	_cmdLCD
  2606  0486                     l1288:	
  2607                           
  2608                           ;LCD.c: 55:     cmdLCD(0x0E);
  2609  0486  300E               	movlw	14
  2610  0487  120A  118A  23F0  120A  118A  	fcall	_cmdLCD
  2611  048C                     l184:	
  2612  048C  0008               	return
  2613  048D                     __end_of_initLCD:	
  2614                           
  2615                           	psect	text14
  2616  03CA                     __ptext14:	
  2617 ;; *************** function _clcLCD *****************
  2618 ;; Defined at:
  2619 ;;		line 26 in file "LCD.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;		None
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;		None
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      void 
  2626 ;; Registers used:
  2627 ;;		wreg, status,2, status,0, pclath, cstack
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2633 ;;      Params:         0       0       0       0       0
  2634 ;;      Locals:         0       0       0       0       0
  2635 ;;      Temps:          0       0       0       0       0
  2636 ;;      Totals:         0       0       0       0       0
  2637 ;;Total ram usage:        0 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; Hardware stack levels required when called:    1
  2640 ;; This function calls:
  2641 ;;		_cmdLCD
  2642 ;; This function is called by:
  2643 ;;		_setup
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           
  2648                           ;psect for function _clcLCD
  2649  03CA                     _clcLCD:	
  2650  03CA                     l1290:	
  2651                           ;incstack = 0
  2652                           ; Regs used in _clcLCD: [wreg+status,2+status,0+pclath+cstack]
  2653                           
  2654                           
  2655                           ;LCD.c: 27:     cmdLCD(0x01);
  2656  03CA  3001               	movlw	1
  2657  03CB  120A  118A  23F0  120A  118A  	fcall	_cmdLCD
  2658  03D0                     l172:	
  2659  03D0  0008               	return
  2660  03D1                     __end_of_clcLCD:	
  2661                           
  2662                           	psect	text15
  2663  03F0                     __ptext15:	
  2664 ;; *************** function _cmdLCD *****************
  2665 ;; Defined at:
  2666 ;;		line 58 in file "LCD.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  cmd             1    wreg     unsigned char 
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;  cmd             1    2[COMMON] unsigned char 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  1    wreg      void 
  2673 ;; Registers used:
  2674 ;;		wreg
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2680 ;;      Params:         0       0       0       0       0
  2681 ;;      Locals:         1       0       0       0       0
  2682 ;;      Temps:          2       0       0       0       0
  2683 ;;      Totals:         3       0       0       0       0
  2684 ;;Total ram usage:        3 bytes
  2685 ;; Hardware stack levels used:    1
  2686 ;; This function calls:
  2687 ;;		Nothing
  2688 ;; This function is called by:
  2689 ;;		_setCursorLCD
  2690 ;;		_clcLCD
  2691 ;;		_initLCD
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           
  2696                           ;psect for function _cmdLCD
  2697  03F0                     _cmdLCD:	
  2698                           
  2699                           ;incstack = 0
  2700                           ; Regs used in _cmdLCD: [wreg]
  2701                           ;cmdLCD@cmd stored from wreg
  2702  03F0  00F2               	movwf	cmdLCD@cmd
  2703  03F1                     l1186:	
  2704                           
  2705                           ;LCD.c: 59:     RD0 = 0;
  2706  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  2707  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  2708  03F3  1008               	bcf	8,0	;volatile
  2709  03F4                     l1188:	
  2710                           
  2711                           ;LCD.c: 60:  PORTB = cmd;
  2712  03F4  0872               	movf	cmdLCD@cmd,w
  2713  03F5  0086               	movwf	6	;volatile
  2714  03F6                     l1190:	
  2715                           
  2716                           ;LCD.c: 61:  RD1 = 1;
  2717  03F6  1488               	bsf	8,1	;volatile
  2718                           
  2719                           ;LCD.c: 62:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2720  03F7  3006               	movlw	6
  2721  03F8  00F1               	movwf	??_cmdLCD+1
  2722  03F9  3030               	movlw	48
  2723  03FA  00F0               	movwf	??_cmdLCD
  2724  03FB                     u627:	
  2725  03FB  0BF0               	decfsz	??_cmdLCD,f
  2726  03FC  2BFB               	goto	u627
  2727  03FD  0BF1               	decfsz	??_cmdLCD+1,f
  2728  03FE  2BFB               	goto	u627
  2729  03FF  0000               	nop
  2730  0400                     l1192:	
  2731                           
  2732                           ;LCD.c: 63:     RD1 = 0;
  2733  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2734  0401  1303               	bcf	3,6	;RP1=0, select bank0
  2735  0402  1088               	bcf	8,1	;volatile
  2736  0403                     l187:	
  2737  0403  0008               	return
  2738  0404                     __end_of_cmdLCD:	
  2739  007E                     btemp	set	126	;btemp
  2740  007E                     wtemp0	set	126


Data Sizes:
    Strings     23
    Constant    10
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     23      34
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_10(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 4
		 -> writeIntLCD@buffer(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    writeStrLCD@string	PTR unsigned char  size(2) Largest target is 4
		 -> writeIntLCD@buffer(BANK0[4]), STR_9(CODE[3]), STR_8(CODE[4]), STR_7(CODE[3]), 
		 -> STR_6(CODE[4]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_writeStrLCD
    _writeStrLCD->_writeCharLCD
    _setCursorLCD->_cmdLCD
    _initLCD->_cmdLCD
    _clcLCD->_cmdLCD

Critical Paths under _main in BANK0

    _main->_writeIntLCD
    _writeIntLCD->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7317
                                             21 BANK0      2     2      0
                       _setCursorLCD
                              _setup
                            _spiRead
                           _spiWrite
                        _writeIntLCD
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (1) _writeIntLCD                                          8     8      0    2159
                                             13 BANK0      8     8      0
                            _sprintf
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0    2884
                                              9 COMMON     1     1      0
                             _clcLCD
                            _initLCD
                       _setCursorLCD
                            _spiInit
                        _writeStrLCD
 ---------------------------------------------------------------------------------
 (1) _writeStrLCD                                          7     5      2     872
                                              2 COMMON     7     5      2
                       _writeCharLCD
 ---------------------------------------------------------------------------------
 (2) _writeCharLCD                                         2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     588
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _setCursorLCD                                         3     2      1    1380
                                              3 COMMON     3     2      1
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              2     2      0      22
                                              3 COMMON     2     2      0
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (2) _clcLCD                                               0     0      0      22
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (3) _cmdLCD                                               3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setCursorLCD
     _cmdLCD
   _setup
     _clcLCD
       _cmdLCD
     _initLCD
       _cmdLCD
     _setCursorLCD
       _cmdLCD
     _spiInit
     _writeStrLCD
       _writeCharLCD
   _spiRead
     _spiReceiveWait
   _spiWrite
   _writeIntLCD
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _writeStrLCD
       _writeCharLCD
   _writeStrLCD
     _writeCharLCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      30       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      22       5       42.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      30      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon May 11 19:29:28 2020

                      pc 0002              __CFG_CP$OFF 0000          writeStrLCD@cont 0077  
            _SSPSTATbits 0094                       l71 0413                       l72 0418  
                     l57 05CB                       l81 03C9                       l75 03D1  
                     l78 03D7                       l89 03E0                       fsr 0004  
                    l304 06B3                      l172 03D0                      l181 03EF  
                    l190 0452                      l184 048C                      l169 0434  
                    l178 0508                      l187 0403                      l580 054C  
                    l590 04C6                      _RD0 0040                      _RD1 0041  
                    u300 0523                      u301 0522                      u320 0534  
                    u400 04C2                      u321 0533                      u401 04C1  
                    u410 041F                      u411 041E                      u315 0524  
                    u420 04D4                      u340 0548                      u500 0645  
                    u341 0547                      u325 0530                      u501 0644  
                    u430 04F6                      u350 0493                      u510 064B  
                    u335 053C                      u351 0492                      u511 064A  
                    u440 0508                      u280 0511                      u520 069D  
                    u441 0507                      u281 0510                      u521 069C  
                    u450 0409                      u370 04A5                      u530 06AF  
           __CFG_CPD$OFF 0000                      u451 0408                      u371 04A4  
                    u531 06AE                      u460 03D7                      u380 04AF  
                    u461 03D6                      u381 04AE                      u365 0497  
                    u470 05DA                      u607 03EA                      u295 0515  
                    u471 05D9                      u480 0614                      u617 0457  
                    u385 04AB                      u481 0613                      u490 063A  
                    u627 03FB                      u395 04B6                      u491 0639  
                    u557 06D2                      u495 0636                      u567 06F0  
                    u577 070E                      u587 072C                      u597 074A  
                    _hum 0039                      _luz 003B                      fsr0 0004  
                    indf 0000             __CFG_LVP$OFF 0000                     l1200 03EC  
                   l1210 051B                     l1202 0509                     l1220 053B  
                   l1212 051F                     l1204 050B                     l1300 05E1  
                   l1222 0542                     l1214 0523                     l1206 0511  
                   l1230 0493                     l1310 060C                     l1302 05E6  
                   l1216 0534                     l1208 0514                     l1224 0548  
                   l1240 04AF                     l1232 0496                     l1312 0610  
                   l1400 0438                     l1250 041A                     l1218 053A  
                   l1242 04B5                     l1234 049D                     l1330 0645  
                   l1314 0614                     l1306 05E7                     l1410 06D7  
                   l1402 06B4                     l1252 041F                     l1260 04CA  
                   l1244 04BC                     l1236 04A1                     l1228 048D  
                   l1340 0689                     l1332 064B                     l1324 061F  
                   l1316 0618                     l1308 0604                     l1420 0708  
                   l1412 06DD                     l1404 06B9                     l1190 03F6  
                   l1254 0427                     l1270 040E                     l1262 04E6  
                   l1238 04A5                     l1246 04C2                     l1342 0690  
                   l1334 0652                     l1318 061D                     l1430 0737  
                   l1422 0713                     l1414 06EA                     l1406 06BF  
                   l1192 0400                     l1280 046E                     l1272 0453  
                   l1256 042E                     l1264 04EC                     l1360 0556  
                   l1344 0694                     l1336 0656                     l1328 063B  
                   l1440 0768                     l1432 0744                     l1424 0719  
                   l1416 06F5                     l1408 06CC                     l1186 03F1  
                   l1290 03CA                     l1282 0474                     l1274 045C  
                   l1266 0405                     l1194 03E2                     l1258 04C7  
                   l1370 0569                     l1362 0557                     l1338 065B  
                   l1346 069D                     l1450 0799                     l1442 0770  
                   l1434 074F                     l1426 0726                     l1418 06FB  
                   l1188 03F4                     l1284 047A                     l1276 0462  
                   l1268 0409                     l1196 03E5                     l1380 0592  
                   l1372 056E                     l1364 055A                     l1356 054D  
                   l1292 03D1                     l1348 06AF                     l1460 07CE  
                   l1452 07A5                     l1444 077C                     l1436 0757  
                   l1428 0731                     l1286 0480                     l1278 0468  
                   l1198 03E7                     l1390 05C2                     l1382 059C  
                   l1374 0576                     l1366 055B                     l1358 0554  
                   l1542 05F9                     l1294 05CF                     l1462 07D7  
                   l1454 07AE                     l1446 0785                     l1438 0760  
                   l1288 0486                     l1384 05A5                     l1376 057F  
                   l1368 0564                     l1392 03C5                     l1296 05D4  
                   l1464 07E3                     l1456 07BA                     l1448 0791  
                   l1386 05AF                     l1378 0589                     l1394 03D8  
                   l1298 05DA                     l1458 07C2                     l1388 05B8  
                   l1396 03DD                     STR_1 001D                     STR_2 001D  
                   STR_3 001D                     STR_4 001D                     STR_5 0032  
                   STR_6 0025                     STR_7 002F                     STR_8 0021  
                   STR_9 002C             __CFG_WRT$OFF 0000        writeStrLCD@string 0072  
                   _main 06B4                     _temp 003D                     _prox 003F  
                   btemp 007E                     start 0000            __CFG_IESO$OFF 0000  
          __CFG_MCLRE$ON 0000              _writeIntLCD 0435                    ?_main 0070  
                  STR_10 0029            __CFG_WDTE$OFF 0000                    _ANSEL 0188  
        __end_of___lwdiv 054D          __end_of___lwmod 04C7              _writeStrLCD 04C7  
                  _SPBRG 0099                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _PORTD 0008                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
         __CFG_FCMEN$OFF 0000          __end_of_initLCD 048D          __end_of_dpowers 001D  
                  _setup 054D    __size_of_writeCharLCD 000F           __CFG_BOREN$OFF 0000  
                  pclath 000A          __end_of_spiInit 0419          __end_of_spiRead 03E1  
                  status 0003                    wtemp0 007E          __end_of_sprintf 06B4  
        __initialization 07EF             __end_of_main 07EF                   ??_main 0035  
           _writeCharLCD 03E1                   _ADCON1 009F                   ?_setup 0070  
                 _ANSELH 0189                   _SPBRGH 009A                   _SSPCON 0014  
                 _SSPBUF 0013           __CFG_PWRTE$OFF 0000        writeIntLCD@buffer 0030  
      writeIntLCD@numero 0034                   _clcLCD 03CA                   _cmdLCD 03F0  
                 _caudal 0037                ??___lwdiv 0074                ??___lwmod 007C  
                 _cursor 0041                ??_initLCD 0073         __end_of_spiWrite 03CA  
              ??_spiInit 0073                ??_spiRead 0070                ??_sprintf 0023  
__end_of__initialization 07FC           __pcstackCOMMON 0070            __end_of_setup 05CC  
                ??_setup 0079               __pbssBANK0 0037            ?_setCursorLCD 0073  
             __pmaintext 06B4                  ?_clcLCD 0070                  ?_cmdLCD 0070  
__size_of_spiReceiveWait 0007             ?_writeIntLCD 0070             ?_writeStrLCD 0072  
                _SSPSTAT 0094               __stringtab 0003           ??_setCursorLCD 0074  
              ?_spiWrite 0070            setCursorLCD@x 0073            setCursorLCD@y 0075  
        __size_of_clcLCD 0007          __size_of_cmdLCD 0014                  ___lwdiv 0509  
                ___lwmod 048D                  __ptext1 0435                  __ptext2 05CC  
                __ptext3 048D                  __ptext4 0509                  __ptext5 03C4  
                __ptext6 03D8                  __ptext7 03D1                  __ptext8 054D  
                __ptext9 04C7                  _initLCD 0453                  _dpowers 0013  
                _spiInit 0404                  _spiRead 03D8                  _sprintf 05CC  
   end_of_initialization 07FC                _RCSTAbits 0018               ??_spiWrite 0070  
            spiWrite@dat 0070                _TXSTAbits 0098           _spiReceiveWait 03D1  
         __end_of_clcLCD 03D1           __end_of_cmdLCD 0404     __end_of_setCursorLCD 0435  
            _BAUDCTLbits 0187     __size_of_writeIntLCD 001E      start_initialization 07EF  
   __size_of_writeStrLCD 0042   __end_of_spiReceiveWait 03D8                 ??_clcLCD 0073  
               ??_cmdLCD 0070                ___latbits 0002            __pcstackBANK0 0020  
 __CFG_FOSC$INTRC_CLKOUT 0000    writeCharLCD@character 0071              sprintf@flag 0027  
            sprintf@prec 0028         ___lwdiv@dividend 0072                cmdLCD@cmd 0072  
        ?_spiReceiveWait 0070                 ?___lwdiv 0070                 ?___lwmod 0078  
      __size_of_spiWrite 0006                __pstrings 0003                 ?_initLCD 0070  
          ?_writeCharLCD 0070                 ?_spiInit 0070                 ?_spiRead 0070  
       ___lwdiv@quotient 0075                 ?_sprintf 0020           __size_of_setup 007F  
   spiInit@sTransmitEdge 0072                 _PIE1bits 008C       spiInit@sDataSample 0070  
               _PIR1bits 000C    __size_of_setCursorLCD 001C              __stringbase 0012  
         ??_writeCharLCD 0070             _setCursorLCD 0419         __size_of___lwdiv 0044  
       __size_of___lwmod 003A       __end_of__stringtab 0013               sprintf@val 0029  
       __size_of_initLCD 003A          ___lwdiv@divisor 0070          ___lwdiv@counter 0077  
               __ptext10 03E1                 __ptext11 0404                 __ptext12 0419  
               __ptext13 0453                 __ptext14 03CA                 __ptext15 03F0  
       __size_of_spiInit 0015         __size_of_spiRead 0009        __CFG_BOR4V$BOR40V 0000  
       __size_of_sprintf 00E8            __size_of_main 013B                 _spiWrite 03C4  
           spiInit@sType 0073        spiInit@sClockIdle 0071            ??_writeIntLCD 002D  
          ??_writeStrLCD 0074                sprintf@ap 0026                sprintf@sp 002B  
       ___lwmod@dividend 007A         ??_spiReceiveWait 0070     __end_of_writeCharLCD 03F0  
              stringcode 000D               _OSCCONbits 008F                 sprintf@c 002C  
               sprintf@f 0020          ___lwmod@divisor 0078          ___lwmod@counter 007D  
               stringdir 000D                 stringtab 0003      __end_of_writeIntLCD 0453  
    __end_of_writeStrLCD 0509  
